// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lorawan-stack/api/search_services.proto

package ttnpb

import (
	context "context"
	fmt "fmt"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// This message is used for finding applications in the EntityRegistrySearch service.
type SearchApplicationsRequest struct {
	// Find applications where the ID contains this substring.
	IdContains string `protobuf:"bytes,1,opt,name=id_contains,json=idContains,proto3" json:"id_contains,omitempty"`
	// Find applications where the name contains this substring.
	NameContains string `protobuf:"bytes,2,opt,name=name_contains,json=nameContains,proto3" json:"name_contains,omitempty"`
	// Find applications where the description contains this substring.
	DescriptionContains string `protobuf:"bytes,3,opt,name=description_contains,json=descriptionContains,proto3" json:"description_contains,omitempty"`
	// Find applications where the given attributes contain these substrings.
	AttributesContain map[string]string `protobuf:"bytes,4,rep,name=attributes_contain,json=attributesContain,proto3" json:"attributes_contain,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	FieldMask         *types.FieldMask  `protobuf:"bytes,6,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
	// Order the results by this field path (must be present in the field mask).
	// Default ordering is by ID. Prepend with a minus (-) to reverse the order.
	Order string `protobuf:"bytes,7,opt,name=order,proto3" json:"order,omitempty"`
	// Limit the number of results per page.
	Limit uint32 `protobuf:"varint,8,opt,name=limit,proto3" json:"limit,omitempty"`
	// Page number for pagination. 0 is interpreted as 1.
	Page uint32 `protobuf:"varint,9,opt,name=page,proto3" json:"page,omitempty"`
	// Only return recently deleted applications.
	Deleted              bool     `protobuf:"varint,10,opt,name=deleted,proto3" json:"deleted,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SearchApplicationsRequest) Reset()         { *m = SearchApplicationsRequest{} }
func (m *SearchApplicationsRequest) String() string { return proto.CompactTextString(m) }
func (*SearchApplicationsRequest) ProtoMessage()    {}
func (*SearchApplicationsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_584ecc2845ae2dc1, []int{0}
}
func (m *SearchApplicationsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SearchApplicationsRequest.Unmarshal(m, b)
}
func (m *SearchApplicationsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SearchApplicationsRequest.Marshal(b, m, deterministic)
}
func (m *SearchApplicationsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchApplicationsRequest.Merge(m, src)
}
func (m *SearchApplicationsRequest) XXX_Size() int {
	return xxx_messageInfo_SearchApplicationsRequest.Size(m)
}
func (m *SearchApplicationsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchApplicationsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SearchApplicationsRequest proto.InternalMessageInfo

func (m *SearchApplicationsRequest) GetIdContains() string {
	if m != nil {
		return m.IdContains
	}
	return ""
}

func (m *SearchApplicationsRequest) GetNameContains() string {
	if m != nil {
		return m.NameContains
	}
	return ""
}

func (m *SearchApplicationsRequest) GetDescriptionContains() string {
	if m != nil {
		return m.DescriptionContains
	}
	return ""
}

func (m *SearchApplicationsRequest) GetAttributesContain() map[string]string {
	if m != nil {
		return m.AttributesContain
	}
	return nil
}

func (m *SearchApplicationsRequest) GetFieldMask() *types.FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *SearchApplicationsRequest) GetOrder() string {
	if m != nil {
		return m.Order
	}
	return ""
}

func (m *SearchApplicationsRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *SearchApplicationsRequest) GetPage() uint32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *SearchApplicationsRequest) GetDeleted() bool {
	if m != nil {
		return m.Deleted
	}
	return false
}

// This message is used for finding OAuth clients in the EntityRegistrySearch service.
type SearchClientsRequest struct {
	// Find OAuth clients where the ID contains this substring.
	IdContains string `protobuf:"bytes,1,opt,name=id_contains,json=idContains,proto3" json:"id_contains,omitempty"`
	// Find OAuth clients where the name contains this substring.
	NameContains string `protobuf:"bytes,2,opt,name=name_contains,json=nameContains,proto3" json:"name_contains,omitempty"`
	// Find OAuth clients where the description contains this substring.
	DescriptionContains string `protobuf:"bytes,3,opt,name=description_contains,json=descriptionContains,proto3" json:"description_contains,omitempty"`
	// Find OAuth clients where the given attributes contain these substrings.
	AttributesContain map[string]string `protobuf:"bytes,4,rep,name=attributes_contain,json=attributesContain,proto3" json:"attributes_contain,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Find OAuth clients where the state is any of these states.
	State     []State          `protobuf:"varint,5,rep,packed,name=state,proto3,enum=ttn.lorawan.v3.State" json:"state,omitempty"`
	FieldMask *types.FieldMask `protobuf:"bytes,6,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
	// Order the results by this field path (must be present in the field mask).
	// Default ordering is by ID. Prepend with a minus (-) to reverse the order.
	Order string `protobuf:"bytes,7,opt,name=order,proto3" json:"order,omitempty"`
	// Limit the number of results per page.
	Limit uint32 `protobuf:"varint,8,opt,name=limit,proto3" json:"limit,omitempty"`
	// Page number for pagination. 0 is interpreted as 1.
	Page uint32 `protobuf:"varint,9,opt,name=page,proto3" json:"page,omitempty"`
	// Only return recently deleted OAuth clients.
	Deleted              bool     `protobuf:"varint,10,opt,name=deleted,proto3" json:"deleted,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SearchClientsRequest) Reset()         { *m = SearchClientsRequest{} }
func (m *SearchClientsRequest) String() string { return proto.CompactTextString(m) }
func (*SearchClientsRequest) ProtoMessage()    {}
func (*SearchClientsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_584ecc2845ae2dc1, []int{1}
}
func (m *SearchClientsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SearchClientsRequest.Unmarshal(m, b)
}
func (m *SearchClientsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SearchClientsRequest.Marshal(b, m, deterministic)
}
func (m *SearchClientsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchClientsRequest.Merge(m, src)
}
func (m *SearchClientsRequest) XXX_Size() int {
	return xxx_messageInfo_SearchClientsRequest.Size(m)
}
func (m *SearchClientsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchClientsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SearchClientsRequest proto.InternalMessageInfo

func (m *SearchClientsRequest) GetIdContains() string {
	if m != nil {
		return m.IdContains
	}
	return ""
}

func (m *SearchClientsRequest) GetNameContains() string {
	if m != nil {
		return m.NameContains
	}
	return ""
}

func (m *SearchClientsRequest) GetDescriptionContains() string {
	if m != nil {
		return m.DescriptionContains
	}
	return ""
}

func (m *SearchClientsRequest) GetAttributesContain() map[string]string {
	if m != nil {
		return m.AttributesContain
	}
	return nil
}

func (m *SearchClientsRequest) GetState() []State {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *SearchClientsRequest) GetFieldMask() *types.FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *SearchClientsRequest) GetOrder() string {
	if m != nil {
		return m.Order
	}
	return ""
}

func (m *SearchClientsRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *SearchClientsRequest) GetPage() uint32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *SearchClientsRequest) GetDeleted() bool {
	if m != nil {
		return m.Deleted
	}
	return false
}

// This message is used for finding gateways in the EntityRegistrySearch service.
type SearchGatewaysRequest struct {
	// Find gateways where the ID contains this substring.
	IdContains string `protobuf:"bytes,1,opt,name=id_contains,json=idContains,proto3" json:"id_contains,omitempty"`
	// Find gateways where the name contains this substring.
	NameContains string `protobuf:"bytes,2,opt,name=name_contains,json=nameContains,proto3" json:"name_contains,omitempty"`
	// Find gateways where the description contains this substring.
	DescriptionContains string `protobuf:"bytes,3,opt,name=description_contains,json=descriptionContains,proto3" json:"description_contains,omitempty"`
	// Find gateways where the given attributes contain these substrings.
	AttributesContain map[string]string `protobuf:"bytes,4,rep,name=attributes_contain,json=attributesContain,proto3" json:"attributes_contain,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Find gateways where the (hexadecimal) EUI contains this substring.
	EuiContains string           `protobuf:"bytes,5,opt,name=eui_contains,json=euiContains,proto3" json:"eui_contains,omitempty"`
	FieldMask   *types.FieldMask `protobuf:"bytes,6,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
	// Order the results by this field path (must be present in the field mask).
	// Default ordering is by ID. Prepend with a minus (-) to reverse the order.
	Order string `protobuf:"bytes,7,opt,name=order,proto3" json:"order,omitempty"`
	// Limit the number of results per page.
	Limit uint32 `protobuf:"varint,8,opt,name=limit,proto3" json:"limit,omitempty"`
	// Page number for pagination. 0 is interpreted as 1.
	Page uint32 `protobuf:"varint,9,opt,name=page,proto3" json:"page,omitempty"`
	// Only return recently deleted gateways.
	Deleted              bool     `protobuf:"varint,10,opt,name=deleted,proto3" json:"deleted,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SearchGatewaysRequest) Reset()         { *m = SearchGatewaysRequest{} }
func (m *SearchGatewaysRequest) String() string { return proto.CompactTextString(m) }
func (*SearchGatewaysRequest) ProtoMessage()    {}
func (*SearchGatewaysRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_584ecc2845ae2dc1, []int{2}
}
func (m *SearchGatewaysRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SearchGatewaysRequest.Unmarshal(m, b)
}
func (m *SearchGatewaysRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SearchGatewaysRequest.Marshal(b, m, deterministic)
}
func (m *SearchGatewaysRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchGatewaysRequest.Merge(m, src)
}
func (m *SearchGatewaysRequest) XXX_Size() int {
	return xxx_messageInfo_SearchGatewaysRequest.Size(m)
}
func (m *SearchGatewaysRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchGatewaysRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SearchGatewaysRequest proto.InternalMessageInfo

func (m *SearchGatewaysRequest) GetIdContains() string {
	if m != nil {
		return m.IdContains
	}
	return ""
}

func (m *SearchGatewaysRequest) GetNameContains() string {
	if m != nil {
		return m.NameContains
	}
	return ""
}

func (m *SearchGatewaysRequest) GetDescriptionContains() string {
	if m != nil {
		return m.DescriptionContains
	}
	return ""
}

func (m *SearchGatewaysRequest) GetAttributesContain() map[string]string {
	if m != nil {
		return m.AttributesContain
	}
	return nil
}

func (m *SearchGatewaysRequest) GetEuiContains() string {
	if m != nil {
		return m.EuiContains
	}
	return ""
}

func (m *SearchGatewaysRequest) GetFieldMask() *types.FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *SearchGatewaysRequest) GetOrder() string {
	if m != nil {
		return m.Order
	}
	return ""
}

func (m *SearchGatewaysRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *SearchGatewaysRequest) GetPage() uint32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *SearchGatewaysRequest) GetDeleted() bool {
	if m != nil {
		return m.Deleted
	}
	return false
}

// This message is used for finding organizations in the EntityRegistrySearch service.
type SearchOrganizationsRequest struct {
	// Find organizations where the ID contains this substring.
	IdContains string `protobuf:"bytes,1,opt,name=id_contains,json=idContains,proto3" json:"id_contains,omitempty"`
	// Find organizations where the name contains this substring.
	NameContains string `protobuf:"bytes,2,opt,name=name_contains,json=nameContains,proto3" json:"name_contains,omitempty"`
	// Find organizations where the description contains this substring.
	DescriptionContains string `protobuf:"bytes,3,opt,name=description_contains,json=descriptionContains,proto3" json:"description_contains,omitempty"`
	// Find organizations where the given attributes contain these substrings.
	AttributesContain map[string]string `protobuf:"bytes,4,rep,name=attributes_contain,json=attributesContain,proto3" json:"attributes_contain,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	FieldMask         *types.FieldMask  `protobuf:"bytes,6,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
	// Order the results by this field path (must be present in the field mask).
	// Default ordering is by ID. Prepend with a minus (-) to reverse the order.
	Order string `protobuf:"bytes,7,opt,name=order,proto3" json:"order,omitempty"`
	// Limit the number of results per page.
	Limit uint32 `protobuf:"varint,8,opt,name=limit,proto3" json:"limit,omitempty"`
	// Page number for pagination. 0 is interpreted as 1.
	Page uint32 `protobuf:"varint,9,opt,name=page,proto3" json:"page,omitempty"`
	// Only return recently deleted organizations.
	Deleted              bool     `protobuf:"varint,10,opt,name=deleted,proto3" json:"deleted,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SearchOrganizationsRequest) Reset()         { *m = SearchOrganizationsRequest{} }
func (m *SearchOrganizationsRequest) String() string { return proto.CompactTextString(m) }
func (*SearchOrganizationsRequest) ProtoMessage()    {}
func (*SearchOrganizationsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_584ecc2845ae2dc1, []int{3}
}
func (m *SearchOrganizationsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SearchOrganizationsRequest.Unmarshal(m, b)
}
func (m *SearchOrganizationsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SearchOrganizationsRequest.Marshal(b, m, deterministic)
}
func (m *SearchOrganizationsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchOrganizationsRequest.Merge(m, src)
}
func (m *SearchOrganizationsRequest) XXX_Size() int {
	return xxx_messageInfo_SearchOrganizationsRequest.Size(m)
}
func (m *SearchOrganizationsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchOrganizationsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SearchOrganizationsRequest proto.InternalMessageInfo

func (m *SearchOrganizationsRequest) GetIdContains() string {
	if m != nil {
		return m.IdContains
	}
	return ""
}

func (m *SearchOrganizationsRequest) GetNameContains() string {
	if m != nil {
		return m.NameContains
	}
	return ""
}

func (m *SearchOrganizationsRequest) GetDescriptionContains() string {
	if m != nil {
		return m.DescriptionContains
	}
	return ""
}

func (m *SearchOrganizationsRequest) GetAttributesContain() map[string]string {
	if m != nil {
		return m.AttributesContain
	}
	return nil
}

func (m *SearchOrganizationsRequest) GetFieldMask() *types.FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *SearchOrganizationsRequest) GetOrder() string {
	if m != nil {
		return m.Order
	}
	return ""
}

func (m *SearchOrganizationsRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *SearchOrganizationsRequest) GetPage() uint32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *SearchOrganizationsRequest) GetDeleted() bool {
	if m != nil {
		return m.Deleted
	}
	return false
}

// This message is used for finding users in the EntityRegistrySearch service.
type SearchUsersRequest struct {
	// Find users where the ID contains this substring.
	IdContains string `protobuf:"bytes,1,opt,name=id_contains,json=idContains,proto3" json:"id_contains,omitempty"`
	// Find users where the name contains this substring.
	NameContains string `protobuf:"bytes,2,opt,name=name_contains,json=nameContains,proto3" json:"name_contains,omitempty"`
	// Find users where the description contains this substring.
	DescriptionContains string `protobuf:"bytes,3,opt,name=description_contains,json=descriptionContains,proto3" json:"description_contains,omitempty"`
	// Find users where the given attributes contain these substrings.
	AttributesContain map[string]string `protobuf:"bytes,4,rep,name=attributes_contain,json=attributesContain,proto3" json:"attributes_contain,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Find users where the state is any of these states.
	State     []State          `protobuf:"varint,5,rep,packed,name=state,proto3,enum=ttn.lorawan.v3.State" json:"state,omitempty"`
	FieldMask *types.FieldMask `protobuf:"bytes,6,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
	// Order the results by this field path (must be present in the field mask).
	// Default ordering is by ID. Prepend with a minus (-) to reverse the order.
	Order string `protobuf:"bytes,7,opt,name=order,proto3" json:"order,omitempty"`
	// Limit the number of results per page.
	Limit uint32 `protobuf:"varint,8,opt,name=limit,proto3" json:"limit,omitempty"`
	// Page number for pagination. 0 is interpreted as 1.
	Page uint32 `protobuf:"varint,9,opt,name=page,proto3" json:"page,omitempty"`
	// Only return recently deleted users.
	Deleted              bool     `protobuf:"varint,10,opt,name=deleted,proto3" json:"deleted,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SearchUsersRequest) Reset()         { *m = SearchUsersRequest{} }
func (m *SearchUsersRequest) String() string { return proto.CompactTextString(m) }
func (*SearchUsersRequest) ProtoMessage()    {}
func (*SearchUsersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_584ecc2845ae2dc1, []int{4}
}
func (m *SearchUsersRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SearchUsersRequest.Unmarshal(m, b)
}
func (m *SearchUsersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SearchUsersRequest.Marshal(b, m, deterministic)
}
func (m *SearchUsersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchUsersRequest.Merge(m, src)
}
func (m *SearchUsersRequest) XXX_Size() int {
	return xxx_messageInfo_SearchUsersRequest.Size(m)
}
func (m *SearchUsersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchUsersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SearchUsersRequest proto.InternalMessageInfo

func (m *SearchUsersRequest) GetIdContains() string {
	if m != nil {
		return m.IdContains
	}
	return ""
}

func (m *SearchUsersRequest) GetNameContains() string {
	if m != nil {
		return m.NameContains
	}
	return ""
}

func (m *SearchUsersRequest) GetDescriptionContains() string {
	if m != nil {
		return m.DescriptionContains
	}
	return ""
}

func (m *SearchUsersRequest) GetAttributesContain() map[string]string {
	if m != nil {
		return m.AttributesContain
	}
	return nil
}

func (m *SearchUsersRequest) GetState() []State {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *SearchUsersRequest) GetFieldMask() *types.FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *SearchUsersRequest) GetOrder() string {
	if m != nil {
		return m.Order
	}
	return ""
}

func (m *SearchUsersRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *SearchUsersRequest) GetPage() uint32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *SearchUsersRequest) GetDeleted() bool {
	if m != nil {
		return m.Deleted
	}
	return false
}

type SearchEndDevicesRequest struct {
	ApplicationIds *ApplicationIdentifiers `protobuf:"bytes,1,opt,name=application_ids,json=applicationIds,proto3" json:"application_ids,omitempty"`
	// Find end devices where the ID contains this substring.
	IdContains string `protobuf:"bytes,2,opt,name=id_contains,json=idContains,proto3" json:"id_contains,omitempty"`
	// Find end devices where the name contains this substring.
	NameContains string `protobuf:"bytes,3,opt,name=name_contains,json=nameContains,proto3" json:"name_contains,omitempty"`
	// Find end devices where the description contains this substring.
	DescriptionContains string `protobuf:"bytes,4,opt,name=description_contains,json=descriptionContains,proto3" json:"description_contains,omitempty"`
	// Find end devices where the given attributes contain these substrings.
	AttributesContain map[string]string `protobuf:"bytes,5,rep,name=attributes_contain,json=attributesContain,proto3" json:"attributes_contain,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Find end devices where the (hexadecimal) DevEUI contains this substring.
	DevEuiContains string `protobuf:"bytes,6,opt,name=dev_eui_contains,json=devEuiContains,proto3" json:"dev_eui_contains,omitempty"`
	// Find end devices where the (hexadecimal) JoinEUI contains this substring.
	JoinEuiContains string `protobuf:"bytes,7,opt,name=join_eui_contains,json=joinEuiContains,proto3" json:"join_eui_contains,omitempty"`
	// Find end devices where the (hexadecimal) DevAddr contains this substring.
	DevAddrContains string           `protobuf:"bytes,8,opt,name=dev_addr_contains,json=devAddrContains,proto3" json:"dev_addr_contains,omitempty"`
	FieldMask       *types.FieldMask `protobuf:"bytes,9,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
	// Order the results by this field path (must be present in the field mask).
	// Default ordering is by ID. Prepend with a minus (-) to reverse the order.
	Order string `protobuf:"bytes,10,opt,name=order,proto3" json:"order,omitempty"`
	// Limit the number of results per page.
	Limit uint32 `protobuf:"varint,11,opt,name=limit,proto3" json:"limit,omitempty"`
	// Page number for pagination. 0 is interpreted as 1.
	Page                 uint32   `protobuf:"varint,12,opt,name=page,proto3" json:"page,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SearchEndDevicesRequest) Reset()         { *m = SearchEndDevicesRequest{} }
func (m *SearchEndDevicesRequest) String() string { return proto.CompactTextString(m) }
func (*SearchEndDevicesRequest) ProtoMessage()    {}
func (*SearchEndDevicesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_584ecc2845ae2dc1, []int{5}
}
func (m *SearchEndDevicesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SearchEndDevicesRequest.Unmarshal(m, b)
}
func (m *SearchEndDevicesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SearchEndDevicesRequest.Marshal(b, m, deterministic)
}
func (m *SearchEndDevicesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchEndDevicesRequest.Merge(m, src)
}
func (m *SearchEndDevicesRequest) XXX_Size() int {
	return xxx_messageInfo_SearchEndDevicesRequest.Size(m)
}
func (m *SearchEndDevicesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchEndDevicesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SearchEndDevicesRequest proto.InternalMessageInfo

func (m *SearchEndDevicesRequest) GetApplicationIds() *ApplicationIdentifiers {
	if m != nil {
		return m.ApplicationIds
	}
	return nil
}

func (m *SearchEndDevicesRequest) GetIdContains() string {
	if m != nil {
		return m.IdContains
	}
	return ""
}

func (m *SearchEndDevicesRequest) GetNameContains() string {
	if m != nil {
		return m.NameContains
	}
	return ""
}

func (m *SearchEndDevicesRequest) GetDescriptionContains() string {
	if m != nil {
		return m.DescriptionContains
	}
	return ""
}

func (m *SearchEndDevicesRequest) GetAttributesContain() map[string]string {
	if m != nil {
		return m.AttributesContain
	}
	return nil
}

func (m *SearchEndDevicesRequest) GetDevEuiContains() string {
	if m != nil {
		return m.DevEuiContains
	}
	return ""
}

func (m *SearchEndDevicesRequest) GetJoinEuiContains() string {
	if m != nil {
		return m.JoinEuiContains
	}
	return ""
}

func (m *SearchEndDevicesRequest) GetDevAddrContains() string {
	if m != nil {
		return m.DevAddrContains
	}
	return ""
}

func (m *SearchEndDevicesRequest) GetFieldMask() *types.FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *SearchEndDevicesRequest) GetOrder() string {
	if m != nil {
		return m.Order
	}
	return ""
}

func (m *SearchEndDevicesRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *SearchEndDevicesRequest) GetPage() uint32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func init() {
	proto.RegisterType((*SearchApplicationsRequest)(nil), "ttn.lorawan.v3.SearchApplicationsRequest")
	golang_proto.RegisterType((*SearchApplicationsRequest)(nil), "ttn.lorawan.v3.SearchApplicationsRequest")
	proto.RegisterMapType((map[string]string)(nil), "ttn.lorawan.v3.SearchApplicationsRequest.AttributesContainEntry")
	golang_proto.RegisterMapType((map[string]string)(nil), "ttn.lorawan.v3.SearchApplicationsRequest.AttributesContainEntry")
	proto.RegisterType((*SearchClientsRequest)(nil), "ttn.lorawan.v3.SearchClientsRequest")
	golang_proto.RegisterType((*SearchClientsRequest)(nil), "ttn.lorawan.v3.SearchClientsRequest")
	proto.RegisterMapType((map[string]string)(nil), "ttn.lorawan.v3.SearchClientsRequest.AttributesContainEntry")
	golang_proto.RegisterMapType((map[string]string)(nil), "ttn.lorawan.v3.SearchClientsRequest.AttributesContainEntry")
	proto.RegisterType((*SearchGatewaysRequest)(nil), "ttn.lorawan.v3.SearchGatewaysRequest")
	golang_proto.RegisterType((*SearchGatewaysRequest)(nil), "ttn.lorawan.v3.SearchGatewaysRequest")
	proto.RegisterMapType((map[string]string)(nil), "ttn.lorawan.v3.SearchGatewaysRequest.AttributesContainEntry")
	golang_proto.RegisterMapType((map[string]string)(nil), "ttn.lorawan.v3.SearchGatewaysRequest.AttributesContainEntry")
	proto.RegisterType((*SearchOrganizationsRequest)(nil), "ttn.lorawan.v3.SearchOrganizationsRequest")
	golang_proto.RegisterType((*SearchOrganizationsRequest)(nil), "ttn.lorawan.v3.SearchOrganizationsRequest")
	proto.RegisterMapType((map[string]string)(nil), "ttn.lorawan.v3.SearchOrganizationsRequest.AttributesContainEntry")
	golang_proto.RegisterMapType((map[string]string)(nil), "ttn.lorawan.v3.SearchOrganizationsRequest.AttributesContainEntry")
	proto.RegisterType((*SearchUsersRequest)(nil), "ttn.lorawan.v3.SearchUsersRequest")
	golang_proto.RegisterType((*SearchUsersRequest)(nil), "ttn.lorawan.v3.SearchUsersRequest")
	proto.RegisterMapType((map[string]string)(nil), "ttn.lorawan.v3.SearchUsersRequest.AttributesContainEntry")
	golang_proto.RegisterMapType((map[string]string)(nil), "ttn.lorawan.v3.SearchUsersRequest.AttributesContainEntry")
	proto.RegisterType((*SearchEndDevicesRequest)(nil), "ttn.lorawan.v3.SearchEndDevicesRequest")
	golang_proto.RegisterType((*SearchEndDevicesRequest)(nil), "ttn.lorawan.v3.SearchEndDevicesRequest")
	proto.RegisterMapType((map[string]string)(nil), "ttn.lorawan.v3.SearchEndDevicesRequest.AttributesContainEntry")
	golang_proto.RegisterMapType((map[string]string)(nil), "ttn.lorawan.v3.SearchEndDevicesRequest.AttributesContainEntry")
}

func init() {
	proto.RegisterFile("lorawan-stack/api/search_services.proto", fileDescriptor_584ecc2845ae2dc1)
}
func init() {
	golang_proto.RegisterFile("lorawan-stack/api/search_services.proto", fileDescriptor_584ecc2845ae2dc1)
}

var fileDescriptor_584ecc2845ae2dc1 = []byte{
	// 1393 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x58, 0xcf, 0x6f, 0x1b, 0xc5,
	0x17, 0xcf, 0x26, 0xde, 0xd8, 0x1e, 0x27, 0xb1, 0x3b, 0x4d, 0x9a, 0xfd, 0x5a, 0x69, 0xbe, 0xd6,
	0x7e, 0xf3, 0xa5, 0x6e, 0xd4, 0x5d, 0x53, 0x07, 0x24, 0x5a, 0x0a, 0x21, 0xdb, 0x06, 0x54, 0xaa,
	0x02, 0x1a, 0xc4, 0x81, 0x96, 0xd6, 0x9a, 0x78, 0x27, 0x9b, 0xc1, 0xf6, 0xae, 0x99, 0x1d, 0x3b,
	0xb8, 0x55, 0x85, 0x54, 0x09, 0x89, 0x1f, 0x07, 0xa4, 0x22, 0x71, 0xe0, 0x50, 0x15, 0x55, 0xf4,
	0x4f, 0xe0, 0xc0, 0x09, 0x89, 0x23, 0x47, 0xfe, 0x04, 0x38, 0xf0, 0x37, 0xf8, 0x02, 0xda, 0x9d,
	0x5d, 0x7b, 0x77, 0xed, 0x06, 0x97, 0x52, 0x29, 0xed, 0x69, 0x67, 0xf6, 0x7d, 0xde, 0x7b, 0xf3,
	0x66, 0x3e, 0x6f, 0xe6, 0xcd, 0x80, 0x13, 0x4d, 0x87, 0xe1, 0x7d, 0x6c, 0x6b, 0x2e, 0xc7, 0xf5,
	0x46, 0x05, 0xb7, 0x69, 0xc5, 0x25, 0x98, 0xd5, 0xf7, 0x6a, 0x2e, 0x61, 0x5d, 0x5a, 0x27, 0xae,
	0xde, 0x66, 0x0e, 0x77, 0xe0, 0x02, 0xe7, 0xb6, 0x1e, 0x80, 0xf5, 0xee, 0x46, 0x71, 0xcb, 0xa2,
	0x7c, 0xaf, 0xb3, 0xa3, 0xd7, 0x9d, 0x56, 0x85, 0xd8, 0x5d, 0xa7, 0xd7, 0x66, 0xce, 0xc7, 0xbd,
	0x8a, 0x0f, 0xae, 0x6b, 0x16, 0xb1, 0xb5, 0x2e, 0x6e, 0x52, 0x13, 0x73, 0x52, 0x19, 0x69, 0x08,
	0x93, 0x45, 0x2d, 0x62, 0xc2, 0x72, 0x2c, 0x47, 0x28, 0xef, 0x74, 0x76, 0xfd, 0x9e, 0xdf, 0xf1,
	0x5b, 0x01, 0x7c, 0xc5, 0x72, 0x1c, 0xab, 0x49, 0xfc, 0x31, 0x62, 0xdb, 0x76, 0x38, 0xe6, 0xd4,
	0xb1, 0x83, 0xf1, 0x15, 0x4b, 0x81, 0x74, 0x60, 0x63, 0x97, 0x92, 0xa6, 0x59, 0x6b, 0x61, 0xb7,
	0x11, 0x20, 0xfe, 0x37, 0x1a, 0x2a, 0x6e, 0xb7, 0x9b, 0xb4, 0xee, 0xdb, 0x09, 0x40, 0xab, 0xa3,
	0xa0, 0x7a, 0x93, 0x12, 0x9b, 0x07, 0x72, 0x75, 0x54, 0x4e, 0x6c, 0xb3, 0x66, 0x12, 0x6f, 0xae,
	0x02, 0xcc, 0xf1, 0x71, 0x98, 0x4e, 0x2b, 0x1c, 0xe9, 0x7f, 0x47, 0xc5, 0x16, 0xe6, 0x64, 0x1f,
	0xf7, 0x1e, 0x3e, 0x50, 0x6a, 0x12, 0x9b, 0xd3, 0x5d, 0x4a, 0x58, 0x68, 0x65, 0x6d, 0x14, 0xe4,
	0x30, 0x0b, 0xdb, 0xf4, 0x46, 0x34, 0x9c, 0x95, 0x51, 0x54, 0xc7, 0x25, 0x4c, 0x48, 0xd5, 0x3b,
	0x32, 0xf8, 0xcf, 0xbb, 0xfe, 0x6a, 0x6f, 0x0d, 0x27, 0xc2, 0x45, 0xe4, 0xa3, 0x0e, 0x71, 0x39,
	0x2c, 0x83, 0x1c, 0x35, 0x6b, 0x75, 0xc7, 0xe6, 0x98, 0xda, 0xae, 0x22, 0x95, 0xa4, 0x72, 0xd6,
	0x48, 0xf7, 0x8d, 0x14, 0x9b, 0x56, 0xaa, 0x08, 0x50, 0xf3, 0x7c, 0x20, 0x82, 0xa7, 0xc0, 0xbc,
	0x8d, 0x5b, 0x64, 0x88, 0x9d, 0x8e, 0x63, 0xe7, 0x3c, 0xe9, 0x00, 0x7d, 0x16, 0x2c, 0x9a, 0xc4,
	0xad, 0x33, 0xda, 0xf6, 0xdc, 0x0d, 0x95, 0x66, 0xe2, 0x4a, 0x47, 0x23, 0xa0, 0x81, 0xee, 0xf7,
	0x12, 0x80, 0x98, 0x73, 0x46, 0x77, 0x3a, 0x9c, 0xb8, 0xa1, 0xae, 0x92, 0x2a, 0xcd, 0x94, 0x73,
	0xd5, 0xd7, 0xf4, 0x38, 0x47, 0xf5, 0x87, 0xc6, 0xa6, 0x6f, 0x0d, 0x6c, 0x04, 0xa6, 0xb7, 0x6d,
	0xce, 0x7a, 0xc6, 0x0b, 0x7d, 0xe3, 0xf4, 0xb7, 0x92, 0x5e, 0x00, 0xea, 0x1a, 0x53, 0x95, 0xb5,
	0xea, 0xea, 0xf5, 0xab, 0x58, 0xbb, 0xf1, 0xbc, 0x76, 0xe6, 0x5a, 0x79, 0xf3, 0xec, 0x55, 0xed,
	0xda, 0x66, 0xd8, 0x3d, 0x79, 0xb3, 0x7a, 0xea, 0xd6, 0xda, 0xba, 0x18, 0xe9, 0x11, 0x9c, 0xb4,
	0x06, 0xcf, 0x00, 0x30, 0xe4, 0x9f, 0x32, 0x5b, 0x92, 0xca, 0xb9, 0x6a, 0x51, 0x17, 0x14, 0xd5,
	0x43, 0x8a, 0xea, 0xaf, 0x7b, 0x90, 0xcb, 0xd8, 0x6d, 0xa0, 0xec, 0x6e, 0xd8, 0x84, 0x26, 0x90,
	0x1d, 0x66, 0x12, 0xa6, 0xa4, 0xfd, 0xf9, 0x78, 0xab, 0x6f, 0x5c, 0x62, 0x17, 0xd1, 0x14, 0x5a,
	0x88, 0x90, 0xb5, 0x46, 0x4d, 0x94, 0xd7, 0x12, 0x3f, 0x52, 0xde, 0x2c, 0x23, 0x59, 0xf3, 0x3f,
	0xa0, 0xce, 0x08, 0xe6, 0xc4, 0xac, 0x61, 0x8e, 0x72, 0x5a, 0xa4, 0x23, 0x8c, 0xc3, 0x55, 0x20,
	0x37, 0x69, 0x8b, 0x72, 0x25, 0x53, 0x92, 0xca, 0xf3, 0x46, 0xa6, 0x6f, 0xc8, 0xeb, 0x33, 0xca,
	0x1f, 0x69, 0x24, 0x7e, 0x43, 0x08, 0x52, 0x6d, 0x6c, 0x11, 0x25, 0xeb, 0x89, 0x91, 0xdf, 0x86,
	0x0a, 0x48, 0x9b, 0xa4, 0x49, 0x38, 0x31, 0x15, 0x50, 0x92, 0xca, 0x19, 0x14, 0x76, 0x8b, 0x17,
	0xc0, 0xb1, 0xf1, 0x33, 0x0a, 0x0b, 0x60, 0xa6, 0x41, 0x7a, 0x82, 0x3c, 0xc8, 0x6b, 0xc2, 0x45,
	0x20, 0x77, 0x71, 0xb3, 0x43, 0x04, 0x49, 0x90, 0xe8, 0x9c, 0x9d, 0x7e, 0x49, 0x7a, 0x33, 0x95,
	0x91, 0x0b, 0xb3, 0xea, 0x0f, 0x32, 0x58, 0x14, 0x0b, 0x77, 0xde, 0x4f, 0xbc, 0x43, 0xcd, 0xc7,
	0x7b, 0x07, 0xf1, 0xf1, 0xe5, 0xf1, 0x7c, 0x8c, 0x87, 0xf5, 0xc4, 0xa9, 0x78, 0x0e, 0xc8, 0x2e,
	0xc7, 0x9c, 0x28, 0x72, 0x69, 0xa6, 0xbc, 0x50, 0x5d, 0x1a, 0x19, 0x94, 0x27, 0x34, 0xf2, 0x7d,
	0x63, 0xee, 0x8e, 0x94, 0x55, 0x24, 0x55, 0xbe, 0x2d, 0x4d, 0x17, 0x24, 0x24, 0x94, 0x1e, 0x87,
	0xc8, 0x57, 0xe2, 0x44, 0xbe, 0xd0, 0x37, 0xb6, 0xd8, 0x26, 0x9a, 0x42, 0x59, 0xb1, 0xa1, 0x7a,
	0x94, 0x05, 0xda, 0xb0, 0xfd, 0xb4, 0xd3, 0x57, 0xfd, 0x59, 0x06, 0x4b, 0x62, 0x85, 0xdf, 0x10,
	0xdb, 0xf9, 0xa1, 0x66, 0xee, 0x77, 0x07, 0x31, 0xf7, 0xdc, 0x78, 0xe6, 0x26, 0xe2, 0x7a, 0xe2,
	0xd4, 0x5d, 0x07, 0x73, 0xa4, 0x43, 0x87, 0x71, 0xc9, 0xd1, 0xb8, 0x0a, 0x28, 0x47, 0x3a, 0x74,
	0x10, 0xcf, 0x63, 0x10, 0x75, 0x3f, 0x4e, 0x54, 0xdc, 0x37, 0xae, 0xb3, 0x0f, 0xd0, 0x14, 0x02,
	0xc1, 0xb1, 0xec, 0xb1, 0x33, 0xa7, 0x45, 0x3b, 0x61, 0x9b, 0x74, 0x28, 0x9a, 0xd3, 0xa2, 0xbd,
	0xa7, 0x9e, 0xc5, 0xdf, 0xc8, 0xa0, 0x28, 0x56, 0xfb, 0xed, 0x48, 0x39, 0x71, 0xa8, 0xa9, 0xfc,
	0xe0, 0x20, 0x2a, 0x6f, 0x8d, 0xa7, 0xf2, 0xb8, 0xe0, 0x0e, 0x73, 0x55, 0xb0, 0x1b, 0xe7, 0xe8,
	0x3b, 0x7d, 0xe3, 0x32, 0xbb, 0x84, 0xa6, 0x50, 0x3e, 0x5a, 0xf4, 0x79, 0xdc, 0x2c, 0x68, 0xc9,
	0x3f, 0xcf, 0x48, 0x5d, 0xf0, 0xa7, 0x0c, 0xa0, 0x58, 0xbb, 0xf7, 0x5c, 0xc2, 0x0e, 0x35, 0x21,
	0xef, 0x1e, 0x44, 0xc8, 0x33, 0xe3, 0x09, 0x19, 0x0d, 0xea, 0xd9, 0xad, 0x09, 0x1e, 0x48, 0x71,
	0x1e, 0x7f, 0x25, 0xf5, 0x8d, 0x2f, 0x25, 0xf6, 0x99, 0x84, 0xa6, 0x50, 0xda, 0xbb, 0x99, 0x78,
	0x84, 0xcd, 0x68, 0x61, 0x2b, 0x46, 0xdd, 0xa5, 0x36, 0xa3, 0x2d, 0xcc, 0x7a, 0x35, 0xd2, 0xc2,
	0xb4, 0x59, 0xc3, 0xa6, 0xc9, 0x88, 0xeb, 0xa2, 0x63, 0xda, 0xf8, 0xff, 0x62, 0xb0, 0x68, 0x56,
	0x13, 0x5f, 0x19, 0x9b, 0x2d, 0x6a, 0xa3, 0x59, 0x4d, 0x7c, 0x9f, 0xc6, 0xad, 0xf9, 0x7e, 0x1a,
	0x2c, 0x0b, 0xb2, 0x6c, 0xdb, 0xe6, 0x05, 0xff, 0xc6, 0x39, 0x48, 0x83, 0xf7, 0x41, 0x3e, 0x7e,
	0x1d, 0x10, 0xa9, 0x90, 0xab, 0x3e, 0x97, 0x5c, 0xdb, 0xc8, 0x75, 0xe8, 0xe2, 0xf0, 0x56, 0xe9,
	0x47, 0xf8, 0x85, 0xbf, 0xca, 0xd1, 0x8b, 0xc6, 0x45, 0xd3, 0x4d, 0x66, 0xd8, 0xf4, 0x23, 0x64,
	0xd8, 0xcc, 0x3f, 0xc9, 0xb0, 0xd4, 0x04, 0x19, 0x76, 0x7f, 0x7c, 0x86, 0xc9, 0x7e, 0x86, 0xbd,
	0x3a, 0x3e, 0xc3, 0x46, 0x26, 0xed, 0x89, 0xa7, 0xd9, 0x69, 0x50, 0x30, 0x49, 0xb7, 0x16, 0xab,
	0x61, 0x66, 0xe3, 0x35, 0xcc, 0x82, 0x49, 0xba, 0xdb, 0x91, 0x32, 0x66, 0x03, 0x1c, 0xf9, 0xd0,
	0xa1, 0x76, 0x5c, 0x27, 0x1d, 0xd7, 0xc9, 0x7b, 0x88, 0x84, 0x92, 0xe7, 0xc7, 0x63, 0xfe, 0x50,
	0x29, 0x13, 0x55, 0xca, 0xa0, 0xbc, 0x49, 0xba, 0x5b, 0xa6, 0xc9, 0x1e, 0x52, 0x30, 0x65, 0x1f,
	0x25, 0x8b, 0xef, 0x0d, 0xb2, 0x18, 0xf8, 0x4e, 0x3e, 0x97, 0xfa, 0xc6, 0xa7, 0x12, 0xbb, 0xed,
	0x65, 0x71, 0x56, 0x3c, 0x85, 0x88, 0xea, 0x7e, 0xd8, 0xce, 0x84, 0x51, 0xa1, 0xac, 0x36, 0x68,
	0xa6, 0x83, 0xd9, 0x41, 0x19, 0x2d, 0x6c, 0xc5, 0x32, 0x3e, 0x17, 0x59, 0x7a, 0x34, 0xa7, 0x45,
	0x7b, 0x13, 0xe7, 0x6f, 0xee, 0xe0, 0xfc, 0x9d, 0x1b, 0xe6, 0xef, 0xbf, 0x93, 0xa5, 0xd5, 0x5f,
	0x52, 0x60, 0x71, 0xdb, 0xe6, 0x94, 0xf7, 0x10, 0xb1, 0xa8, 0xcb, 0x59, 0x4f, 0xd0, 0x0f, 0xde,
	0x0c, 0xcf, 0xaf, 0xe8, 0x83, 0x04, 0x3c, 0x39, 0xf1, 0xa3, 0x45, 0x71, 0xe5, 0x80, 0x54, 0x76,
	0xd5, 0x95, 0xdb, 0xbf, 0xfe, 0xfe, 0xf5, 0xf4, 0x31, 0xb8, 0x18, 0x3c, 0xe0, 0x45, 0x1f, 0xb7,
	0x5c, 0x68, 0x81, 0xf9, 0xd8, 0xed, 0x13, 0xae, 0x4d, 0x72, 0x39, 0x2d, 0x2e, 0x27, 0x51, 0x81,
	0x5c, 0x5d, 0xf6, 0xbd, 0x1d, 0x81, 0xf9, 0xd0, 0x5b, 0x3d, 0xb0, 0xdb, 0x00, 0x0b, 0xf1, 0xcb,
	0x02, 0xfc, 0xff, 0x44, 0x97, 0x89, 0xa2, 0x92, 0x84, 0x85, 0x00, 0x55, 0xf1, 0x7d, 0x41, 0x58,
	0x08, 0x7d, 0x59, 0xa1, 0xe9, 0x4f, 0xc0, 0xd1, 0x31, 0xe5, 0x1c, 0x5c, 0x9f, 0xbc, 0xe6, 0x2b,
	0x1e, 0x4f, 0x62, 0x63, 0x28, 0xf5, 0xb8, 0xef, 0x7b, 0x19, 0x2e, 0x85, 0xbe, 0x9d, 0x98, 0xa7,
	0x1a, 0xc8, 0x45, 0x8e, 0x6f, 0xa8, 0xfe, 0xfd, 0xd9, 0x5e, 0x1c, 0x39, 0x6c, 0x7d, 0xa9, 0xba,
	0xe4, 0x3b, 0xca, 0xc3, 0xf9, 0xd0, 0x91, 0x77, 0x06, 0xba, 0xd5, 0x1f, 0x25, 0xb0, 0x3c, 0xd8,
	0xb8, 0x12, 0x84, 0xba, 0x2b, 0x81, 0x42, 0x72, 0x6b, 0x83, 0x27, 0x26, 0xdc, 0xfc, 0x8a, 0xc5,
	0x24, 0x70, 0x08, 0x51, 0xb7, 0xfd, 0xc1, 0x6c, 0xc2, 0x57, 0xc6, 0x71, 0xa9, 0x72, 0x33, 0x71,
	0xd2, 0xe8, 0xf1, 0xfe, 0xad, 0x8a, 0x48, 0x7b, 0xd7, 0x78, 0xf1, 0xa7, 0xdf, 0x56, 0xa5, 0x2b,
	0x15, 0xcb, 0xd1, 0xf9, 0x1e, 0xe1, 0x7b, 0xd4, 0xb6, 0x5c, 0xdd, 0x26, 0x7c, 0xdf, 0x61, 0x8d,
	0x4a, 0xfc, 0x61, 0xb2, 0xbb, 0x51, 0x69, 0x37, 0xac, 0x0a, 0xe7, 0x76, 0x7b, 0x67, 0x67, 0xd6,
	0xdf, 0x7d, 0x36, 0xfe, 0x0a, 0x00, 0x00, 0xff, 0xff, 0x1a, 0x1c, 0x4c, 0x9d, 0x9c, 0x16, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// EntityRegistrySearchClient is the client API for EntityRegistrySearch service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EntityRegistrySearchClient interface {
	// Search for applications that match the conditions specified in the request.
	// Non-admin users will only match applications that they have rights on.
	SearchApplications(ctx context.Context, in *SearchApplicationsRequest, opts ...grpc.CallOption) (*Applications, error)
	// Search for OAuth clients that match the conditions specified in the request.
	// Non-admin users will only match OAuth clients that they have rights on.
	SearchClients(ctx context.Context, in *SearchClientsRequest, opts ...grpc.CallOption) (*Clients, error)
	// Search for gateways that match the conditions specified in the request.
	// Non-admin users will only match gateways that they have rights on.
	SearchGateways(ctx context.Context, in *SearchGatewaysRequest, opts ...grpc.CallOption) (*Gateways, error)
	// Search for organizations that match the conditions specified in the request.
	// Non-admin users will only match organizations that they have rights on.
	SearchOrganizations(ctx context.Context, in *SearchOrganizationsRequest, opts ...grpc.CallOption) (*Organizations, error)
	// Search for users that match the conditions specified in the request.
	// This is only available to admin users.
	SearchUsers(ctx context.Context, in *SearchUsersRequest, opts ...grpc.CallOption) (*Users, error)
}

type entityRegistrySearchClient struct {
	cc *grpc.ClientConn
}

func NewEntityRegistrySearchClient(cc *grpc.ClientConn) EntityRegistrySearchClient {
	return &entityRegistrySearchClient{cc}
}

func (c *entityRegistrySearchClient) SearchApplications(ctx context.Context, in *SearchApplicationsRequest, opts ...grpc.CallOption) (*Applications, error) {
	out := new(Applications)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.EntityRegistrySearch/SearchApplications", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityRegistrySearchClient) SearchClients(ctx context.Context, in *SearchClientsRequest, opts ...grpc.CallOption) (*Clients, error) {
	out := new(Clients)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.EntityRegistrySearch/SearchClients", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityRegistrySearchClient) SearchGateways(ctx context.Context, in *SearchGatewaysRequest, opts ...grpc.CallOption) (*Gateways, error) {
	out := new(Gateways)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.EntityRegistrySearch/SearchGateways", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityRegistrySearchClient) SearchOrganizations(ctx context.Context, in *SearchOrganizationsRequest, opts ...grpc.CallOption) (*Organizations, error) {
	out := new(Organizations)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.EntityRegistrySearch/SearchOrganizations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityRegistrySearchClient) SearchUsers(ctx context.Context, in *SearchUsersRequest, opts ...grpc.CallOption) (*Users, error) {
	out := new(Users)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.EntityRegistrySearch/SearchUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EntityRegistrySearchServer is the server API for EntityRegistrySearch service.
type EntityRegistrySearchServer interface {
	// Search for applications that match the conditions specified in the request.
	// Non-admin users will only match applications that they have rights on.
	SearchApplications(context.Context, *SearchApplicationsRequest) (*Applications, error)
	// Search for OAuth clients that match the conditions specified in the request.
	// Non-admin users will only match OAuth clients that they have rights on.
	SearchClients(context.Context, *SearchClientsRequest) (*Clients, error)
	// Search for gateways that match the conditions specified in the request.
	// Non-admin users will only match gateways that they have rights on.
	SearchGateways(context.Context, *SearchGatewaysRequest) (*Gateways, error)
	// Search for organizations that match the conditions specified in the request.
	// Non-admin users will only match organizations that they have rights on.
	SearchOrganizations(context.Context, *SearchOrganizationsRequest) (*Organizations, error)
	// Search for users that match the conditions specified in the request.
	// This is only available to admin users.
	SearchUsers(context.Context, *SearchUsersRequest) (*Users, error)
}

// UnimplementedEntityRegistrySearchServer can be embedded to have forward compatible implementations.
type UnimplementedEntityRegistrySearchServer struct {
}

func (*UnimplementedEntityRegistrySearchServer) SearchApplications(ctx context.Context, req *SearchApplicationsRequest) (*Applications, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchApplications not implemented")
}
func (*UnimplementedEntityRegistrySearchServer) SearchClients(ctx context.Context, req *SearchClientsRequest) (*Clients, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchClients not implemented")
}
func (*UnimplementedEntityRegistrySearchServer) SearchGateways(ctx context.Context, req *SearchGatewaysRequest) (*Gateways, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchGateways not implemented")
}
func (*UnimplementedEntityRegistrySearchServer) SearchOrganizations(ctx context.Context, req *SearchOrganizationsRequest) (*Organizations, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchOrganizations not implemented")
}
func (*UnimplementedEntityRegistrySearchServer) SearchUsers(ctx context.Context, req *SearchUsersRequest) (*Users, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchUsers not implemented")
}

func RegisterEntityRegistrySearchServer(s *grpc.Server, srv EntityRegistrySearchServer) {
	s.RegisterService(&_EntityRegistrySearch_serviceDesc, srv)
}

func _EntityRegistrySearch_SearchApplications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchApplicationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityRegistrySearchServer).SearchApplications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.EntityRegistrySearch/SearchApplications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityRegistrySearchServer).SearchApplications(ctx, req.(*SearchApplicationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityRegistrySearch_SearchClients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchClientsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityRegistrySearchServer).SearchClients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.EntityRegistrySearch/SearchClients",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityRegistrySearchServer).SearchClients(ctx, req.(*SearchClientsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityRegistrySearch_SearchGateways_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchGatewaysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityRegistrySearchServer).SearchGateways(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.EntityRegistrySearch/SearchGateways",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityRegistrySearchServer).SearchGateways(ctx, req.(*SearchGatewaysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityRegistrySearch_SearchOrganizations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchOrganizationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityRegistrySearchServer).SearchOrganizations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.EntityRegistrySearch/SearchOrganizations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityRegistrySearchServer).SearchOrganizations(ctx, req.(*SearchOrganizationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityRegistrySearch_SearchUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityRegistrySearchServer).SearchUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.EntityRegistrySearch/SearchUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityRegistrySearchServer).SearchUsers(ctx, req.(*SearchUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _EntityRegistrySearch_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.lorawan.v3.EntityRegistrySearch",
	HandlerType: (*EntityRegistrySearchServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchApplications",
			Handler:    _EntityRegistrySearch_SearchApplications_Handler,
		},
		{
			MethodName: "SearchClients",
			Handler:    _EntityRegistrySearch_SearchClients_Handler,
		},
		{
			MethodName: "SearchGateways",
			Handler:    _EntityRegistrySearch_SearchGateways_Handler,
		},
		{
			MethodName: "SearchOrganizations",
			Handler:    _EntityRegistrySearch_SearchOrganizations_Handler,
		},
		{
			MethodName: "SearchUsers",
			Handler:    _EntityRegistrySearch_SearchUsers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lorawan-stack/api/search_services.proto",
}

// EndDeviceRegistrySearchClient is the client API for EndDeviceRegistrySearch service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EndDeviceRegistrySearchClient interface {
	// Search for end devices in the given application that match the conditions specified in the request.
	SearchEndDevices(ctx context.Context, in *SearchEndDevicesRequest, opts ...grpc.CallOption) (*EndDevices, error)
}

type endDeviceRegistrySearchClient struct {
	cc *grpc.ClientConn
}

func NewEndDeviceRegistrySearchClient(cc *grpc.ClientConn) EndDeviceRegistrySearchClient {
	return &endDeviceRegistrySearchClient{cc}
}

func (c *endDeviceRegistrySearchClient) SearchEndDevices(ctx context.Context, in *SearchEndDevicesRequest, opts ...grpc.CallOption) (*EndDevices, error) {
	out := new(EndDevices)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.EndDeviceRegistrySearch/SearchEndDevices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EndDeviceRegistrySearchServer is the server API for EndDeviceRegistrySearch service.
type EndDeviceRegistrySearchServer interface {
	// Search for end devices in the given application that match the conditions specified in the request.
	SearchEndDevices(context.Context, *SearchEndDevicesRequest) (*EndDevices, error)
}

// UnimplementedEndDeviceRegistrySearchServer can be embedded to have forward compatible implementations.
type UnimplementedEndDeviceRegistrySearchServer struct {
}

func (*UnimplementedEndDeviceRegistrySearchServer) SearchEndDevices(ctx context.Context, req *SearchEndDevicesRequest) (*EndDevices, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchEndDevices not implemented")
}

func RegisterEndDeviceRegistrySearchServer(s *grpc.Server, srv EndDeviceRegistrySearchServer) {
	s.RegisterService(&_EndDeviceRegistrySearch_serviceDesc, srv)
}

func _EndDeviceRegistrySearch_SearchEndDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchEndDevicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndDeviceRegistrySearchServer).SearchEndDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.EndDeviceRegistrySearch/SearchEndDevices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndDeviceRegistrySearchServer).SearchEndDevices(ctx, req.(*SearchEndDevicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _EndDeviceRegistrySearch_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.lorawan.v3.EndDeviceRegistrySearch",
	HandlerType: (*EndDeviceRegistrySearchServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchEndDevices",
			Handler:    _EndDeviceRegistrySearch_SearchEndDevices_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lorawan-stack/api/search_services.proto",
}
