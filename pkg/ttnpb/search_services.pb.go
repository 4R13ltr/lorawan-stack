// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lorawan-stack/api/search_services.proto

package ttnpb

import (
	context "context"
	fmt "fmt"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// This message is used for finding applications in the EntityRegistrySearch service.
type SearchApplicationsRequest struct {
	// Find applications where the ID contains this substring.
	IDContains string `protobuf:"bytes,1,opt,name=id_contains,json=idContains,proto3" json:"id_contains,omitempty"`
	// Find applications where the name contains this substring.
	NameContains string `protobuf:"bytes,2,opt,name=name_contains,json=nameContains,proto3" json:"name_contains,omitempty"`
	// Find applications where the description contains this substring.
	DescriptionContains string `protobuf:"bytes,3,opt,name=description_contains,json=descriptionContains,proto3" json:"description_contains,omitempty"`
	// Find applications where the given attributes contain these substrings.
	AttributesContain map[string]string `protobuf:"bytes,4,rep,name=attributes_contain,json=attributesContain,proto3" json:"attributes_contain,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	FieldMask         *types.FieldMask  `protobuf:"bytes,6,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
	// Order the results by this field path (must be present in the field mask).
	// Default ordering is by ID. Prepend with a minus (-) to reverse the order.
	Order string `protobuf:"bytes,7,opt,name=order,proto3" json:"order,omitempty"`
	// Limit the number of results per page.
	Limit uint32 `protobuf:"varint,8,opt,name=limit,proto3" json:"limit,omitempty"`
	// Page number for pagination. 0 is interpreted as 1.
	Page uint32 `protobuf:"varint,9,opt,name=page,proto3" json:"page,omitempty"`
	// Only return recently deleted applications.
	Deleted              bool     `protobuf:"varint,10,opt,name=deleted,proto3" json:"deleted,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SearchApplicationsRequest) Reset()      { *m = SearchApplicationsRequest{} }
func (*SearchApplicationsRequest) ProtoMessage() {}
func (*SearchApplicationsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_584ecc2845ae2dc1, []int{0}
}
func (m *SearchApplicationsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SearchApplicationsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SearchApplicationsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SearchApplicationsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchApplicationsRequest.Merge(m, src)
}
func (m *SearchApplicationsRequest) XXX_Size() int {
	return m.Size()
}
func (m *SearchApplicationsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchApplicationsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SearchApplicationsRequest proto.InternalMessageInfo

func (m *SearchApplicationsRequest) GetIDContains() string {
	if m != nil {
		return m.IDContains
	}
	return ""
}

func (m *SearchApplicationsRequest) GetNameContains() string {
	if m != nil {
		return m.NameContains
	}
	return ""
}

func (m *SearchApplicationsRequest) GetDescriptionContains() string {
	if m != nil {
		return m.DescriptionContains
	}
	return ""
}

func (m *SearchApplicationsRequest) GetAttributesContain() map[string]string {
	if m != nil {
		return m.AttributesContain
	}
	return nil
}

func (m *SearchApplicationsRequest) GetFieldMask() *types.FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *SearchApplicationsRequest) GetOrder() string {
	if m != nil {
		return m.Order
	}
	return ""
}

func (m *SearchApplicationsRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *SearchApplicationsRequest) GetPage() uint32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *SearchApplicationsRequest) GetDeleted() bool {
	if m != nil {
		return m.Deleted
	}
	return false
}

// This message is used for finding OAuth clients in the EntityRegistrySearch service.
type SearchClientsRequest struct {
	// Find OAuth clients where the ID contains this substring.
	IDContains string `protobuf:"bytes,1,opt,name=id_contains,json=idContains,proto3" json:"id_contains,omitempty"`
	// Find OAuth clients where the name contains this substring.
	NameContains string `protobuf:"bytes,2,opt,name=name_contains,json=nameContains,proto3" json:"name_contains,omitempty"`
	// Find OAuth clients where the description contains this substring.
	DescriptionContains string `protobuf:"bytes,3,opt,name=description_contains,json=descriptionContains,proto3" json:"description_contains,omitempty"`
	// Find OAuth clients where the given attributes contain these substrings.
	AttributesContain map[string]string `protobuf:"bytes,4,rep,name=attributes_contain,json=attributesContain,proto3" json:"attributes_contain,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Find OAuth clients where the state is any of these states.
	State     []State          `protobuf:"varint,5,rep,packed,name=state,proto3,enum=ttn.lorawan.v3.State" json:"state,omitempty"`
	FieldMask *types.FieldMask `protobuf:"bytes,6,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
	// Order the results by this field path (must be present in the field mask).
	// Default ordering is by ID. Prepend with a minus (-) to reverse the order.
	Order string `protobuf:"bytes,7,opt,name=order,proto3" json:"order,omitempty"`
	// Limit the number of results per page.
	Limit uint32 `protobuf:"varint,8,opt,name=limit,proto3" json:"limit,omitempty"`
	// Page number for pagination. 0 is interpreted as 1.
	Page uint32 `protobuf:"varint,9,opt,name=page,proto3" json:"page,omitempty"`
	// Only return recently deleted OAuth clients.
	Deleted              bool     `protobuf:"varint,10,opt,name=deleted,proto3" json:"deleted,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SearchClientsRequest) Reset()      { *m = SearchClientsRequest{} }
func (*SearchClientsRequest) ProtoMessage() {}
func (*SearchClientsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_584ecc2845ae2dc1, []int{1}
}
func (m *SearchClientsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SearchClientsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SearchClientsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SearchClientsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchClientsRequest.Merge(m, src)
}
func (m *SearchClientsRequest) XXX_Size() int {
	return m.Size()
}
func (m *SearchClientsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchClientsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SearchClientsRequest proto.InternalMessageInfo

func (m *SearchClientsRequest) GetIDContains() string {
	if m != nil {
		return m.IDContains
	}
	return ""
}

func (m *SearchClientsRequest) GetNameContains() string {
	if m != nil {
		return m.NameContains
	}
	return ""
}

func (m *SearchClientsRequest) GetDescriptionContains() string {
	if m != nil {
		return m.DescriptionContains
	}
	return ""
}

func (m *SearchClientsRequest) GetAttributesContain() map[string]string {
	if m != nil {
		return m.AttributesContain
	}
	return nil
}

func (m *SearchClientsRequest) GetState() []State {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *SearchClientsRequest) GetFieldMask() *types.FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *SearchClientsRequest) GetOrder() string {
	if m != nil {
		return m.Order
	}
	return ""
}

func (m *SearchClientsRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *SearchClientsRequest) GetPage() uint32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *SearchClientsRequest) GetDeleted() bool {
	if m != nil {
		return m.Deleted
	}
	return false
}

// This message is used for finding gateways in the EntityRegistrySearch service.
type SearchGatewaysRequest struct {
	// Find gateways where the ID contains this substring.
	IDContains string `protobuf:"bytes,1,opt,name=id_contains,json=idContains,proto3" json:"id_contains,omitempty"`
	// Find gateways where the name contains this substring.
	NameContains string `protobuf:"bytes,2,opt,name=name_contains,json=nameContains,proto3" json:"name_contains,omitempty"`
	// Find gateways where the description contains this substring.
	DescriptionContains string `protobuf:"bytes,3,opt,name=description_contains,json=descriptionContains,proto3" json:"description_contains,omitempty"`
	// Find gateways where the given attributes contain these substrings.
	AttributesContain map[string]string `protobuf:"bytes,4,rep,name=attributes_contain,json=attributesContain,proto3" json:"attributes_contain,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Find gateways where the (hexadecimal) EUI contains this substring.
	EuiContains string           `protobuf:"bytes,5,opt,name=eui_contains,json=euiContains,proto3" json:"eui_contains,omitempty"`
	FieldMask   *types.FieldMask `protobuf:"bytes,6,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
	// Order the results by this field path (must be present in the field mask).
	// Default ordering is by ID. Prepend with a minus (-) to reverse the order.
	Order string `protobuf:"bytes,7,opt,name=order,proto3" json:"order,omitempty"`
	// Limit the number of results per page.
	Limit uint32 `protobuf:"varint,8,opt,name=limit,proto3" json:"limit,omitempty"`
	// Page number for pagination. 0 is interpreted as 1.
	Page uint32 `protobuf:"varint,9,opt,name=page,proto3" json:"page,omitempty"`
	// Only return recently deleted gateways.
	Deleted              bool     `protobuf:"varint,10,opt,name=deleted,proto3" json:"deleted,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SearchGatewaysRequest) Reset()      { *m = SearchGatewaysRequest{} }
func (*SearchGatewaysRequest) ProtoMessage() {}
func (*SearchGatewaysRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_584ecc2845ae2dc1, []int{2}
}
func (m *SearchGatewaysRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SearchGatewaysRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SearchGatewaysRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SearchGatewaysRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchGatewaysRequest.Merge(m, src)
}
func (m *SearchGatewaysRequest) XXX_Size() int {
	return m.Size()
}
func (m *SearchGatewaysRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchGatewaysRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SearchGatewaysRequest proto.InternalMessageInfo

func (m *SearchGatewaysRequest) GetIDContains() string {
	if m != nil {
		return m.IDContains
	}
	return ""
}

func (m *SearchGatewaysRequest) GetNameContains() string {
	if m != nil {
		return m.NameContains
	}
	return ""
}

func (m *SearchGatewaysRequest) GetDescriptionContains() string {
	if m != nil {
		return m.DescriptionContains
	}
	return ""
}

func (m *SearchGatewaysRequest) GetAttributesContain() map[string]string {
	if m != nil {
		return m.AttributesContain
	}
	return nil
}

func (m *SearchGatewaysRequest) GetEuiContains() string {
	if m != nil {
		return m.EuiContains
	}
	return ""
}

func (m *SearchGatewaysRequest) GetFieldMask() *types.FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *SearchGatewaysRequest) GetOrder() string {
	if m != nil {
		return m.Order
	}
	return ""
}

func (m *SearchGatewaysRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *SearchGatewaysRequest) GetPage() uint32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *SearchGatewaysRequest) GetDeleted() bool {
	if m != nil {
		return m.Deleted
	}
	return false
}

// This message is used for finding organizations in the EntityRegistrySearch service.
type SearchOrganizationsRequest struct {
	// Find organizations where the ID contains this substring.
	IDContains string `protobuf:"bytes,1,opt,name=id_contains,json=idContains,proto3" json:"id_contains,omitempty"`
	// Find organizations where the name contains this substring.
	NameContains string `protobuf:"bytes,2,opt,name=name_contains,json=nameContains,proto3" json:"name_contains,omitempty"`
	// Find organizations where the description contains this substring.
	DescriptionContains string `protobuf:"bytes,3,opt,name=description_contains,json=descriptionContains,proto3" json:"description_contains,omitempty"`
	// Find organizations where the given attributes contain these substrings.
	AttributesContain map[string]string `protobuf:"bytes,4,rep,name=attributes_contain,json=attributesContain,proto3" json:"attributes_contain,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	FieldMask         *types.FieldMask  `protobuf:"bytes,6,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
	// Order the results by this field path (must be present in the field mask).
	// Default ordering is by ID. Prepend with a minus (-) to reverse the order.
	Order string `protobuf:"bytes,7,opt,name=order,proto3" json:"order,omitempty"`
	// Limit the number of results per page.
	Limit uint32 `protobuf:"varint,8,opt,name=limit,proto3" json:"limit,omitempty"`
	// Page number for pagination. 0 is interpreted as 1.
	Page uint32 `protobuf:"varint,9,opt,name=page,proto3" json:"page,omitempty"`
	// Only return recently deleted organizations.
	Deleted              bool     `protobuf:"varint,10,opt,name=deleted,proto3" json:"deleted,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SearchOrganizationsRequest) Reset()      { *m = SearchOrganizationsRequest{} }
func (*SearchOrganizationsRequest) ProtoMessage() {}
func (*SearchOrganizationsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_584ecc2845ae2dc1, []int{3}
}
func (m *SearchOrganizationsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SearchOrganizationsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SearchOrganizationsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SearchOrganizationsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchOrganizationsRequest.Merge(m, src)
}
func (m *SearchOrganizationsRequest) XXX_Size() int {
	return m.Size()
}
func (m *SearchOrganizationsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchOrganizationsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SearchOrganizationsRequest proto.InternalMessageInfo

func (m *SearchOrganizationsRequest) GetIDContains() string {
	if m != nil {
		return m.IDContains
	}
	return ""
}

func (m *SearchOrganizationsRequest) GetNameContains() string {
	if m != nil {
		return m.NameContains
	}
	return ""
}

func (m *SearchOrganizationsRequest) GetDescriptionContains() string {
	if m != nil {
		return m.DescriptionContains
	}
	return ""
}

func (m *SearchOrganizationsRequest) GetAttributesContain() map[string]string {
	if m != nil {
		return m.AttributesContain
	}
	return nil
}

func (m *SearchOrganizationsRequest) GetFieldMask() *types.FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *SearchOrganizationsRequest) GetOrder() string {
	if m != nil {
		return m.Order
	}
	return ""
}

func (m *SearchOrganizationsRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *SearchOrganizationsRequest) GetPage() uint32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *SearchOrganizationsRequest) GetDeleted() bool {
	if m != nil {
		return m.Deleted
	}
	return false
}

// This message is used for finding users in the EntityRegistrySearch service.
type SearchUsersRequest struct {
	// Find users where the ID contains this substring.
	IDContains string `protobuf:"bytes,1,opt,name=id_contains,json=idContains,proto3" json:"id_contains,omitempty"`
	// Find users where the name contains this substring.
	NameContains string `protobuf:"bytes,2,opt,name=name_contains,json=nameContains,proto3" json:"name_contains,omitempty"`
	// Find users where the description contains this substring.
	DescriptionContains string `protobuf:"bytes,3,opt,name=description_contains,json=descriptionContains,proto3" json:"description_contains,omitempty"`
	// Find users where the given attributes contain these substrings.
	AttributesContain map[string]string `protobuf:"bytes,4,rep,name=attributes_contain,json=attributesContain,proto3" json:"attributes_contain,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Find users where the state is any of these states.
	State     []State          `protobuf:"varint,5,rep,packed,name=state,proto3,enum=ttn.lorawan.v3.State" json:"state,omitempty"`
	FieldMask *types.FieldMask `protobuf:"bytes,6,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
	// Order the results by this field path (must be present in the field mask).
	// Default ordering is by ID. Prepend with a minus (-) to reverse the order.
	Order string `protobuf:"bytes,7,opt,name=order,proto3" json:"order,omitempty"`
	// Limit the number of results per page.
	Limit uint32 `protobuf:"varint,8,opt,name=limit,proto3" json:"limit,omitempty"`
	// Page number for pagination. 0 is interpreted as 1.
	Page uint32 `protobuf:"varint,9,opt,name=page,proto3" json:"page,omitempty"`
	// Only return recently deleted users.
	Deleted              bool     `protobuf:"varint,10,opt,name=deleted,proto3" json:"deleted,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SearchUsersRequest) Reset()      { *m = SearchUsersRequest{} }
func (*SearchUsersRequest) ProtoMessage() {}
func (*SearchUsersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_584ecc2845ae2dc1, []int{4}
}
func (m *SearchUsersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SearchUsersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SearchUsersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SearchUsersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchUsersRequest.Merge(m, src)
}
func (m *SearchUsersRequest) XXX_Size() int {
	return m.Size()
}
func (m *SearchUsersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchUsersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SearchUsersRequest proto.InternalMessageInfo

func (m *SearchUsersRequest) GetIDContains() string {
	if m != nil {
		return m.IDContains
	}
	return ""
}

func (m *SearchUsersRequest) GetNameContains() string {
	if m != nil {
		return m.NameContains
	}
	return ""
}

func (m *SearchUsersRequest) GetDescriptionContains() string {
	if m != nil {
		return m.DescriptionContains
	}
	return ""
}

func (m *SearchUsersRequest) GetAttributesContain() map[string]string {
	if m != nil {
		return m.AttributesContain
	}
	return nil
}

func (m *SearchUsersRequest) GetState() []State {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *SearchUsersRequest) GetFieldMask() *types.FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *SearchUsersRequest) GetOrder() string {
	if m != nil {
		return m.Order
	}
	return ""
}

func (m *SearchUsersRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *SearchUsersRequest) GetPage() uint32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *SearchUsersRequest) GetDeleted() bool {
	if m != nil {
		return m.Deleted
	}
	return false
}

type SearchEndDevicesRequest struct {
	ApplicationIdentifiers `protobuf:"bytes,1,opt,name=application_ids,json=applicationIds,proto3,embedded=application_ids" json:"application_ids"`
	// Find end devices where the ID contains this substring.
	IDContains string `protobuf:"bytes,2,opt,name=id_contains,json=idContains,proto3" json:"id_contains,omitempty"`
	// Find end devices where the name contains this substring.
	NameContains string `protobuf:"bytes,3,opt,name=name_contains,json=nameContains,proto3" json:"name_contains,omitempty"`
	// Find end devices where the description contains this substring.
	DescriptionContains string `protobuf:"bytes,4,opt,name=description_contains,json=descriptionContains,proto3" json:"description_contains,omitempty"`
	// Find end devices where the given attributes contain these substrings.
	AttributesContain map[string]string `protobuf:"bytes,5,rep,name=attributes_contain,json=attributesContain,proto3" json:"attributes_contain,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Find end devices where the (hexadecimal) DevEUI contains this substring.
	DevEuiContains string `protobuf:"bytes,6,opt,name=dev_eui_contains,json=devEuiContains,proto3" json:"dev_eui_contains,omitempty"`
	// Find end devices where the (hexadecimal) JoinEUI contains this substring.
	JoinEuiContains string `protobuf:"bytes,7,opt,name=join_eui_contains,json=joinEuiContains,proto3" json:"join_eui_contains,omitempty"`
	// Find end devices where the (hexadecimal) DevAddr contains this substring.
	DevAddrContains string           `protobuf:"bytes,8,opt,name=dev_addr_contains,json=devAddrContains,proto3" json:"dev_addr_contains,omitempty"`
	FieldMask       *types.FieldMask `protobuf:"bytes,9,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
	// Order the results by this field path (must be present in the field mask).
	// Default ordering is by ID. Prepend with a minus (-) to reverse the order.
	Order string `protobuf:"bytes,10,opt,name=order,proto3" json:"order,omitempty"`
	// Limit the number of results per page.
	Limit uint32 `protobuf:"varint,11,opt,name=limit,proto3" json:"limit,omitempty"`
	// Page number for pagination. 0 is interpreted as 1.
	Page                 uint32   `protobuf:"varint,12,opt,name=page,proto3" json:"page,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SearchEndDevicesRequest) Reset()      { *m = SearchEndDevicesRequest{} }
func (*SearchEndDevicesRequest) ProtoMessage() {}
func (*SearchEndDevicesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_584ecc2845ae2dc1, []int{5}
}
func (m *SearchEndDevicesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SearchEndDevicesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SearchEndDevicesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SearchEndDevicesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchEndDevicesRequest.Merge(m, src)
}
func (m *SearchEndDevicesRequest) XXX_Size() int {
	return m.Size()
}
func (m *SearchEndDevicesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchEndDevicesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SearchEndDevicesRequest proto.InternalMessageInfo

func (m *SearchEndDevicesRequest) GetIDContains() string {
	if m != nil {
		return m.IDContains
	}
	return ""
}

func (m *SearchEndDevicesRequest) GetNameContains() string {
	if m != nil {
		return m.NameContains
	}
	return ""
}

func (m *SearchEndDevicesRequest) GetDescriptionContains() string {
	if m != nil {
		return m.DescriptionContains
	}
	return ""
}

func (m *SearchEndDevicesRequest) GetAttributesContain() map[string]string {
	if m != nil {
		return m.AttributesContain
	}
	return nil
}

func (m *SearchEndDevicesRequest) GetDevEuiContains() string {
	if m != nil {
		return m.DevEuiContains
	}
	return ""
}

func (m *SearchEndDevicesRequest) GetJoinEuiContains() string {
	if m != nil {
		return m.JoinEuiContains
	}
	return ""
}

func (m *SearchEndDevicesRequest) GetDevAddrContains() string {
	if m != nil {
		return m.DevAddrContains
	}
	return ""
}

func (m *SearchEndDevicesRequest) GetFieldMask() *types.FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *SearchEndDevicesRequest) GetOrder() string {
	if m != nil {
		return m.Order
	}
	return ""
}

func (m *SearchEndDevicesRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *SearchEndDevicesRequest) GetPage() uint32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func init() {
	proto.RegisterType((*SearchApplicationsRequest)(nil), "ttn.lorawan.v3.SearchApplicationsRequest")
	golang_proto.RegisterType((*SearchApplicationsRequest)(nil), "ttn.lorawan.v3.SearchApplicationsRequest")
	proto.RegisterMapType((map[string]string)(nil), "ttn.lorawan.v3.SearchApplicationsRequest.AttributesContainEntry")
	golang_proto.RegisterMapType((map[string]string)(nil), "ttn.lorawan.v3.SearchApplicationsRequest.AttributesContainEntry")
	proto.RegisterType((*SearchClientsRequest)(nil), "ttn.lorawan.v3.SearchClientsRequest")
	golang_proto.RegisterType((*SearchClientsRequest)(nil), "ttn.lorawan.v3.SearchClientsRequest")
	proto.RegisterMapType((map[string]string)(nil), "ttn.lorawan.v3.SearchClientsRequest.AttributesContainEntry")
	golang_proto.RegisterMapType((map[string]string)(nil), "ttn.lorawan.v3.SearchClientsRequest.AttributesContainEntry")
	proto.RegisterType((*SearchGatewaysRequest)(nil), "ttn.lorawan.v3.SearchGatewaysRequest")
	golang_proto.RegisterType((*SearchGatewaysRequest)(nil), "ttn.lorawan.v3.SearchGatewaysRequest")
	proto.RegisterMapType((map[string]string)(nil), "ttn.lorawan.v3.SearchGatewaysRequest.AttributesContainEntry")
	golang_proto.RegisterMapType((map[string]string)(nil), "ttn.lorawan.v3.SearchGatewaysRequest.AttributesContainEntry")
	proto.RegisterType((*SearchOrganizationsRequest)(nil), "ttn.lorawan.v3.SearchOrganizationsRequest")
	golang_proto.RegisterType((*SearchOrganizationsRequest)(nil), "ttn.lorawan.v3.SearchOrganizationsRequest")
	proto.RegisterMapType((map[string]string)(nil), "ttn.lorawan.v3.SearchOrganizationsRequest.AttributesContainEntry")
	golang_proto.RegisterMapType((map[string]string)(nil), "ttn.lorawan.v3.SearchOrganizationsRequest.AttributesContainEntry")
	proto.RegisterType((*SearchUsersRequest)(nil), "ttn.lorawan.v3.SearchUsersRequest")
	golang_proto.RegisterType((*SearchUsersRequest)(nil), "ttn.lorawan.v3.SearchUsersRequest")
	proto.RegisterMapType((map[string]string)(nil), "ttn.lorawan.v3.SearchUsersRequest.AttributesContainEntry")
	golang_proto.RegisterMapType((map[string]string)(nil), "ttn.lorawan.v3.SearchUsersRequest.AttributesContainEntry")
	proto.RegisterType((*SearchEndDevicesRequest)(nil), "ttn.lorawan.v3.SearchEndDevicesRequest")
	golang_proto.RegisterType((*SearchEndDevicesRequest)(nil), "ttn.lorawan.v3.SearchEndDevicesRequest")
	proto.RegisterMapType((map[string]string)(nil), "ttn.lorawan.v3.SearchEndDevicesRequest.AttributesContainEntry")
	golang_proto.RegisterMapType((map[string]string)(nil), "ttn.lorawan.v3.SearchEndDevicesRequest.AttributesContainEntry")
}

func init() {
	proto.RegisterFile("lorawan-stack/api/search_services.proto", fileDescriptor_584ecc2845ae2dc1)
}
func init() {
	golang_proto.RegisterFile("lorawan-stack/api/search_services.proto", fileDescriptor_584ecc2845ae2dc1)
}

var fileDescriptor_584ecc2845ae2dc1 = []byte{
	// 1249 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x58, 0xcf, 0x6f, 0x1b, 0xc5,
	0x17, 0xcf, 0xf8, 0x47, 0xe2, 0x8c, 0x93, 0xd8, 0x99, 0x26, 0xcd, 0x7e, 0x57, 0xe9, 0xc6, 0xda,
	0x6f, 0xa0, 0x6e, 0x54, 0xaf, 0xa9, 0x83, 0x10, 0x2d, 0x85, 0x10, 0x37, 0x29, 0x2a, 0x12, 0x42,
	0x5a, 0xc4, 0x85, 0xaa, 0x58, 0x13, 0xef, 0x64, 0x33, 0xd8, 0xd9, 0x35, 0xbb, 0x63, 0x07, 0x37,
	0xaa, 0x40, 0x3d, 0x72, 0x42, 0x70, 0xe3, 0x50, 0x15, 0x21, 0x10, 0x7f, 0x03, 0x17, 0x38, 0x56,
	0xe2, 0x12, 0xc1, 0x85, 0x53, 0x44, 0x1d, 0x0e, 0x3d, 0x21, 0x8e, 0xc8, 0x07, 0x84, 0xf6, 0x97,
	0xbd, 0xbb, 0xde, 0x1a, 0x2b, 0x6a, 0x84, 0xa2, 0xf6, 0x36, 0xb3, 0xef, 0xf3, 0xde, 0x9b, 0xf7,
	0xe6, 0xf3, 0xe6, 0xcd, 0x2c, 0x3c, 0x5f, 0xd7, 0x0d, 0xbc, 0x87, 0xb5, 0x82, 0xc9, 0x70, 0xb5,
	0x56, 0xc4, 0x0d, 0x5a, 0x34, 0x09, 0x36, 0xaa, 0x3b, 0x15, 0x93, 0x18, 0x2d, 0x5a, 0x25, 0xa6,
	0xd4, 0x30, 0x74, 0xa6, 0xa3, 0x19, 0xc6, 0x34, 0xc9, 0x05, 0x4b, 0xad, 0x55, 0x7e, 0x5d, 0xa5,
	0x6c, 0xa7, 0xb9, 0x25, 0x55, 0xf5, 0xdd, 0x22, 0xd1, 0x5a, 0x7a, 0xbb, 0x61, 0xe8, 0x1f, 0xb5,
	0x8b, 0x36, 0xb8, 0x5a, 0x50, 0x89, 0x56, 0x68, 0xe1, 0x3a, 0x55, 0x30, 0x23, 0xc5, 0x81, 0x81,
	0x63, 0x92, 0x2f, 0xf8, 0x4c, 0xa8, 0xba, 0xaa, 0x3b, 0xca, 0x5b, 0xcd, 0x6d, 0x7b, 0x66, 0x4f,
	0xec, 0x91, 0x0b, 0x5f, 0x54, 0x75, 0x5d, 0xad, 0x13, 0x7b, 0x8d, 0x58, 0xd3, 0x74, 0x86, 0x19,
	0xd5, 0x35, 0x77, 0x7d, 0x7c, 0xce, 0x95, 0xf6, 0x6c, 0x6c, 0x53, 0x52, 0x57, 0x2a, 0xbb, 0xd8,
	0xac, 0xb9, 0x88, 0xff, 0x0f, 0x86, 0x8a, 0x1b, 0x8d, 0x3a, 0xad, 0xda, 0x76, 0x5c, 0x90, 0x30,
	0x08, 0xaa, 0xd6, 0x29, 0xd1, 0x98, 0x2b, 0x17, 0x07, 0xe5, 0x44, 0x53, 0x2a, 0x0a, 0xb1, 0x72,
	0xe5, 0x62, 0xce, 0x45, 0x61, 0x9a, 0xbb, 0xde, 0x4a, 0x97, 0x06, 0xc5, 0x2a, 0x66, 0x64, 0x0f,
	0xb7, 0x1f, 0xbf, 0x50, 0xaa, 0x10, 0x8d, 0xd1, 0x6d, 0x4a, 0x0c, 0xcf, 0xca, 0xf2, 0x20, 0x48,
	0x37, 0x54, 0xac, 0xd1, 0xdb, 0xfe, 0x70, 0x16, 0x07, 0x51, 0x4d, 0x93, 0x18, 0x8e, 0x54, 0x3c,
	0x48, 0xc0, 0xff, 0xbd, 0x63, 0xef, 0xf6, 0x7a, 0x3f, 0x11, 0xa6, 0x4c, 0x3e, 0x6c, 0x12, 0x93,
	0xa1, 0x97, 0x60, 0x9a, 0x2a, 0x95, 0xaa, 0xae, 0x31, 0x4c, 0x35, 0x93, 0x03, 0x39, 0x90, 0x9f,
	0x2c, 0xcf, 0x77, 0xcb, 0x09, 0x23, 0xc6, 0x95, 0x3a, 0x87, 0x4b, 0xf0, 0xc6, 0xc6, 0x35, 0x57,
	0x28, 0x43, 0xaa, 0x78, 0x63, 0x74, 0x11, 0x4e, 0x6b, 0x78, 0x97, 0xf4, 0x35, 0x63, 0xb6, 0xe6,
	0x84, 0xab, 0x29, 0x4f, 0x59, 0xd2, 0x1e, 0xfa, 0x0a, 0x9c, 0x53, 0x88, 0x59, 0x35, 0x68, 0xc3,
	0x72, 0xde, 0x57, 0x8a, 0x07, 0x95, 0xce, 0xf8, 0x40, 0x3d, 0xdd, 0x6f, 0x00, 0x44, 0x98, 0x31,
	0x83, 0x6e, 0x35, 0x19, 0x31, 0x3d, 0x5d, 0x2e, 0x91, 0x8b, 0xe7, 0xd3, 0xa5, 0xd7, 0xa5, 0x20,
	0x63, 0xa5, 0xc7, 0x46, 0x2a, 0xad, 0xf7, 0x6c, 0xb8, 0xa6, 0x37, 0x35, 0x66, 0xb4, 0xcb, 0x2f,
	0x76, 0xcb, 0x97, 0xbe, 0x04, 0x52, 0x16, 0x8a, 0xcb, 0x86, 0xc8, 0x2d, 0x97, 0x84, 0xf7, 0x6f,
	0xe2, 0xc2, 0xed, 0x17, 0x0a, 0x97, 0x6f, 0xe5, 0xd7, 0xae, 0xdc, 0x2c, 0xdc, 0x5a, 0xf3, 0xa6,
	0x17, 0xf6, 0x4b, 0x17, 0xef, 0x2c, 0xaf, 0x38, 0x2b, 0x9d, 0xc5, 0x61, 0x6b, 0xe8, 0x32, 0x84,
	0x7d, 0x36, 0x72, 0xe3, 0x39, 0x90, 0x4f, 0x97, 0x78, 0xc9, 0x21, 0xac, 0xe4, 0x11, 0x56, 0xba,
	0x6e, 0x41, 0xde, 0xc2, 0x66, 0x4d, 0x9e, 0xdc, 0xf6, 0x86, 0x68, 0x0e, 0x26, 0x75, 0x43, 0x21,
	0x06, 0x37, 0x61, 0xe5, 0x43, 0x76, 0x26, 0x48, 0x80, 0xc9, 0x3a, 0xdd, 0xa5, 0x8c, 0x4b, 0xe5,
	0x40, 0x7e, 0xba, 0x9c, 0xea, 0x96, 0x93, 0x2b, 0x71, 0xee, 0xd1, 0x84, 0xec, 0x7c, 0x46, 0x08,
	0x26, 0x1a, 0x58, 0x25, 0xdc, 0xa4, 0x25, 0x96, 0xed, 0x31, 0xe2, 0xe0, 0x84, 0x42, 0xea, 0x84,
	0x11, 0x85, 0x83, 0x39, 0x90, 0x4f, 0xc9, 0xde, 0x94, 0xdf, 0x80, 0x67, 0xa3, 0x33, 0x80, 0xb2,
	0x30, 0x5e, 0x23, 0x6d, 0x67, 0xeb, 0x65, 0x6b, 0x68, 0xad, 0xa7, 0x85, 0xeb, 0x4d, 0xe2, 0x6c,
	0xaa, 0xec, 0x4c, 0xae, 0xc4, 0x5e, 0x06, 0x6f, 0x26, 0x52, 0xc9, 0xec, 0xb8, 0xf8, 0x77, 0x02,
	0xce, 0x39, 0x89, 0xbe, 0x66, 0x97, 0xcd, 0x29, 0x62, 0xd3, 0xfd, 0x61, 0x6c, 0x7a, 0x25, 0x9a,
	0x4d, 0xc1, 0x20, 0x4f, 0x9c, 0x48, 0x57, 0x61, 0xd2, 0x64, 0x98, 0x11, 0x2e, 0x99, 0x8b, 0xe7,
	0x67, 0x4a, 0xf3, 0x03, 0x8b, 0xb2, 0x84, 0xe5, 0x4c, 0xb7, 0x3c, 0xf5, 0x39, 0x98, 0xe4, 0x80,
	0x98, 0xbc, 0x0b, 0x62, 0x59, 0x20, 0x3b, 0x4a, 0x4f, 0x05, 0x0d, 0xc5, 0x3f, 0x12, 0x70, 0xde,
	0xd9, 0x9b, 0x37, 0x9c, 0x43, 0xf5, 0x14, 0x31, 0xf0, 0xab, 0x61, 0x0c, 0xbc, 0x1a, 0xcd, 0xc0,
	0x50, 0x94, 0x27, 0x4e, 0xc1, 0x15, 0x38, 0x45, 0x9a, 0xb4, 0x1f, 0x57, 0xd2, 0x1f, 0x57, 0x56,
	0x4e, 0x93, 0x26, 0xed, 0xc5, 0xf3, 0x54, 0x10, 0xee, 0xe7, 0x04, 0xe4, 0x9d, 0xad, 0x78, 0xdb,
	0xd7, 0x7f, 0x4f, 0x11, 0xeb, 0xbe, 0x1d, 0xc6, 0xba, 0xf5, 0x68, 0xd6, 0x45, 0x85, 0xfa, 0xac,
	0x8d, 0x3e, 0xb9, 0x36, 0xda, 0x4d, 0x40, 0xe4, 0x64, 0xfa, 0x5d, 0x93, 0x18, 0xa7, 0x88, 0x4c,
	0xf7, 0x86, 0x91, 0xe9, 0x72, 0x34, 0x99, 0xfc, 0x21, 0x3e, 0x6b, 0xa1, 0xff, 0xfd, 0x89, 0xf6,
	0xc3, 0x38, 0x5c, 0x70, 0x76, 0x66, 0x53, 0x53, 0x36, 0xec, 0x97, 0x4d, 0x8f, 0x81, 0x18, 0x66,
	0x7c, 0x8f, 0xa6, 0x0a, 0x55, 0x1c, 0x16, 0xa6, 0x4b, 0xcf, 0x87, 0x13, 0xe9, 0xbb, 0x68, 0xdf,
	0xe8, 0xbf, 0x5e, 0xca, 0xd9, 0x6e, 0x39, 0xf9, 0xa9, 0x95, 0xd2, 0x07, 0x87, 0x4b, 0x63, 0x07,
	0x87, 0x4b, 0x40, 0x9e, 0xc1, 0x7e, 0xa4, 0x19, 0x26, 0x79, 0xec, 0xd8, 0x24, 0x8f, 0x1f, 0x87,
	0xe4, 0x89, 0x11, 0x48, 0xfe, 0x75, 0x34, 0xc9, 0x93, 0x36, 0xc9, 0x5f, 0x8b, 0x26, 0xf9, 0x40,
	0x2a, 0x4f, 0x9c, 0xe9, 0x97, 0x60, 0x56, 0x21, 0xad, 0x4a, 0xa0, 0x5b, 0x8f, 0x07, 0xbb, 0xf5,
	0x8c, 0x42, 0x5a, 0x9b, 0xbe, 0x86, 0xbd, 0x0a, 0x67, 0x3f, 0xd0, 0xa9, 0x16, 0xd4, 0x99, 0x08,
	0xea, 0x64, 0x2c, 0x84, 0x5f, 0xe9, 0x3a, 0x9c, 0xb5, 0xfc, 0x60, 0x45, 0x31, 0xfa, 0x4a, 0x29,
	0x5b, 0x89, 0x77, 0x94, 0x52, 0x9d, 0xc3, 0xa5, 0xcc, 0x06, 0x69, 0xad, 0x2b, 0x8a, 0xd1, 0xdb,
	0xba, 0x8c, 0x12, 0xfc, 0x10, 0xaa, 0xad, 0xc9, 0x63, 0xd5, 0x16, 0x8c, 0xac, 0xad, 0xf4, 0xf0,
	0xda, 0x9a, 0xea, 0xd7, 0xd6, 0x93, 0xa9, 0xa0, 0xd2, 0x4f, 0x09, 0x38, 0xb7, 0xa9, 0x31, 0xca,
	0xda, 0x32, 0x51, 0xa9, 0xc9, 0x8c, 0xb6, 0x43, 0x02, 0xb4, 0xef, 0x1d, 0xeb, 0xfe, 0x67, 0x28,
	0xba, 0x30, 0xf2, 0x53, 0x95, 0x5f, 0x1c, 0x52, 0x66, 0xa6, 0xb8, 0x78, 0xf7, 0x97, 0xdf, 0xbf,
	0x88, 0x9d, 0x45, 0x73, 0xee, 0x4f, 0x1c, 0xff, 0x0f, 0x0e, 0x13, 0xa9, 0x70, 0x3a, 0xf0, 0x6a,
	0x41, 0xcb, 0xa3, 0x3c, 0x6a, 0xf8, 0x85, 0x30, 0xca, 0x95, 0x8b, 0x0b, 0xb6, 0xb7, 0x59, 0x94,
	0xf1, 0xbc, 0x55, 0x5d, 0xbb, 0x35, 0x38, 0x13, 0xbc, 0x9c, 0xa2, 0xe7, 0x46, 0xba, 0xbc, 0xf2,
	0x5c, 0x18, 0xe6, 0x01, 0x44, 0xce, 0xf6, 0x85, 0x50, 0xd6, 0xf3, 0xa5, 0x7a, 0xa6, 0x3f, 0x86,
	0x67, 0x22, 0xee, 0x24, 0x68, 0x65, 0xf4, 0x8b, 0x0b, 0x7f, 0x2e, 0x8c, 0x0d, 0xa0, 0xc4, 0x73,
	0xb6, 0xef, 0x05, 0x34, 0xef, 0xf9, 0xd6, 0x03, 0x9e, 0x2a, 0x30, 0xed, 0xeb, 0x63, 0x48, 0xfc,
	0xf7, 0x26, 0xc7, 0x0f, 0x74, 0x1d, 0x5b, 0x2a, 0xce, 0xdb, 0x8e, 0x32, 0x68, 0xda, 0x73, 0xd4,
	0xb4, 0x3e, 0x97, 0xbe, 0x07, 0x70, 0xa1, 0x77, 0x7c, 0x84, 0x08, 0x75, 0x0f, 0xc0, 0x6c, 0xf8,
	0x80, 0x41, 0xe7, 0x47, 0x3c, 0x82, 0x78, 0x3e, 0x0c, 0xec, 0x43, 0xc4, 0x4d, 0x7b, 0x31, 0x6b,
	0xe8, 0xd5, 0x28, 0x2e, 0x15, 0xf7, 0x43, 0x5d, 0x40, 0x0a, 0xce, 0xef, 0x14, 0x9d, 0x3f, 0x62,
	0x66, 0x19, 0xff, 0xfa, 0x50, 0x18, 0xfb, 0xeb, 0xa1, 0x00, 0x3e, 0xe9, 0x08, 0xe0, 0xbb, 0x8e,
	0x00, 0x1e, 0x74, 0x04, 0x70, 0xd0, 0x11, 0xc0, 0x6f, 0x1d, 0x01, 0x3c, 0xea, 0x08, 0x63, 0x7f,
	0x76, 0x04, 0xf0, 0xd9, 0x91, 0x30, 0x76, 0xff, 0x48, 0x18, 0xfb, 0xf1, 0x48, 0x00, 0xef, 0x15,
	0x55, 0x5d, 0x62, 0x3b, 0x84, 0xed, 0x50, 0x4d, 0x35, 0x25, 0x8d, 0xb0, 0x3d, 0xdd, 0xa8, 0x15,
	0x83, 0x3f, 0xb2, 0x5a, 0xab, 0xc5, 0x46, 0x4d, 0x2d, 0x32, 0xa6, 0x35, 0xb6, 0xb6, 0xc6, 0xed,
	0xc3, 0x61, 0xf5, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x80, 0x87, 0xfb, 0x74, 0xcc, 0x14, 0x00,
	0x00,
}

func (this *SearchApplicationsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SearchApplicationsRequest)
	if !ok {
		that2, ok := that.(SearchApplicationsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.IDContains != that1.IDContains {
		return false
	}
	if this.NameContains != that1.NameContains {
		return false
	}
	if this.DescriptionContains != that1.DescriptionContains {
		return false
	}
	if len(this.AttributesContain) != len(that1.AttributesContain) {
		return false
	}
	for i := range this.AttributesContain {
		if this.AttributesContain[i] != that1.AttributesContain[i] {
			return false
		}
	}
	if !this.FieldMask.Equal(that1.FieldMask) {
		return false
	}
	if this.Order != that1.Order {
		return false
	}
	if this.Limit != that1.Limit {
		return false
	}
	if this.Page != that1.Page {
		return false
	}
	if this.Deleted != that1.Deleted {
		return false
	}
	return true
}
func (this *SearchClientsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SearchClientsRequest)
	if !ok {
		that2, ok := that.(SearchClientsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.IDContains != that1.IDContains {
		return false
	}
	if this.NameContains != that1.NameContains {
		return false
	}
	if this.DescriptionContains != that1.DescriptionContains {
		return false
	}
	if len(this.AttributesContain) != len(that1.AttributesContain) {
		return false
	}
	for i := range this.AttributesContain {
		if this.AttributesContain[i] != that1.AttributesContain[i] {
			return false
		}
	}
	if len(this.State) != len(that1.State) {
		return false
	}
	for i := range this.State {
		if this.State[i] != that1.State[i] {
			return false
		}
	}
	if !this.FieldMask.Equal(that1.FieldMask) {
		return false
	}
	if this.Order != that1.Order {
		return false
	}
	if this.Limit != that1.Limit {
		return false
	}
	if this.Page != that1.Page {
		return false
	}
	if this.Deleted != that1.Deleted {
		return false
	}
	return true
}
func (this *SearchGatewaysRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SearchGatewaysRequest)
	if !ok {
		that2, ok := that.(SearchGatewaysRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.IDContains != that1.IDContains {
		return false
	}
	if this.NameContains != that1.NameContains {
		return false
	}
	if this.DescriptionContains != that1.DescriptionContains {
		return false
	}
	if len(this.AttributesContain) != len(that1.AttributesContain) {
		return false
	}
	for i := range this.AttributesContain {
		if this.AttributesContain[i] != that1.AttributesContain[i] {
			return false
		}
	}
	if this.EuiContains != that1.EuiContains {
		return false
	}
	if !this.FieldMask.Equal(that1.FieldMask) {
		return false
	}
	if this.Order != that1.Order {
		return false
	}
	if this.Limit != that1.Limit {
		return false
	}
	if this.Page != that1.Page {
		return false
	}
	if this.Deleted != that1.Deleted {
		return false
	}
	return true
}
func (this *SearchOrganizationsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SearchOrganizationsRequest)
	if !ok {
		that2, ok := that.(SearchOrganizationsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.IDContains != that1.IDContains {
		return false
	}
	if this.NameContains != that1.NameContains {
		return false
	}
	if this.DescriptionContains != that1.DescriptionContains {
		return false
	}
	if len(this.AttributesContain) != len(that1.AttributesContain) {
		return false
	}
	for i := range this.AttributesContain {
		if this.AttributesContain[i] != that1.AttributesContain[i] {
			return false
		}
	}
	if !this.FieldMask.Equal(that1.FieldMask) {
		return false
	}
	if this.Order != that1.Order {
		return false
	}
	if this.Limit != that1.Limit {
		return false
	}
	if this.Page != that1.Page {
		return false
	}
	if this.Deleted != that1.Deleted {
		return false
	}
	return true
}
func (this *SearchUsersRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SearchUsersRequest)
	if !ok {
		that2, ok := that.(SearchUsersRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.IDContains != that1.IDContains {
		return false
	}
	if this.NameContains != that1.NameContains {
		return false
	}
	if this.DescriptionContains != that1.DescriptionContains {
		return false
	}
	if len(this.AttributesContain) != len(that1.AttributesContain) {
		return false
	}
	for i := range this.AttributesContain {
		if this.AttributesContain[i] != that1.AttributesContain[i] {
			return false
		}
	}
	if len(this.State) != len(that1.State) {
		return false
	}
	for i := range this.State {
		if this.State[i] != that1.State[i] {
			return false
		}
	}
	if !this.FieldMask.Equal(that1.FieldMask) {
		return false
	}
	if this.Order != that1.Order {
		return false
	}
	if this.Limit != that1.Limit {
		return false
	}
	if this.Page != that1.Page {
		return false
	}
	if this.Deleted != that1.Deleted {
		return false
	}
	return true
}
func (this *SearchEndDevicesRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SearchEndDevicesRequest)
	if !ok {
		that2, ok := that.(SearchEndDevicesRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApplicationIdentifiers.Equal(&that1.ApplicationIdentifiers) {
		return false
	}
	if this.IDContains != that1.IDContains {
		return false
	}
	if this.NameContains != that1.NameContains {
		return false
	}
	if this.DescriptionContains != that1.DescriptionContains {
		return false
	}
	if len(this.AttributesContain) != len(that1.AttributesContain) {
		return false
	}
	for i := range this.AttributesContain {
		if this.AttributesContain[i] != that1.AttributesContain[i] {
			return false
		}
	}
	if this.DevEuiContains != that1.DevEuiContains {
		return false
	}
	if this.JoinEuiContains != that1.JoinEuiContains {
		return false
	}
	if this.DevAddrContains != that1.DevAddrContains {
		return false
	}
	if !this.FieldMask.Equal(that1.FieldMask) {
		return false
	}
	if this.Order != that1.Order {
		return false
	}
	if this.Limit != that1.Limit {
		return false
	}
	if this.Page != that1.Page {
		return false
	}
	return true
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// EntityRegistrySearchClient is the client API for EntityRegistrySearch service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EntityRegistrySearchClient interface {
	// Search for applications that match the conditions specified in the request.
	// Non-admin users will only match applications that they have rights on.
	SearchApplications(ctx context.Context, in *SearchApplicationsRequest, opts ...grpc.CallOption) (*Applications, error)
	// Search for OAuth clients that match the conditions specified in the request.
	// Non-admin users will only match OAuth clients that they have rights on.
	SearchClients(ctx context.Context, in *SearchClientsRequest, opts ...grpc.CallOption) (*Clients, error)
	// Search for gateways that match the conditions specified in the request.
	// Non-admin users will only match gateways that they have rights on.
	SearchGateways(ctx context.Context, in *SearchGatewaysRequest, opts ...grpc.CallOption) (*Gateways, error)
	// Search for organizations that match the conditions specified in the request.
	// Non-admin users will only match organizations that they have rights on.
	SearchOrganizations(ctx context.Context, in *SearchOrganizationsRequest, opts ...grpc.CallOption) (*Organizations, error)
	// Search for users that match the conditions specified in the request.
	// This is only available to admin users.
	SearchUsers(ctx context.Context, in *SearchUsersRequest, opts ...grpc.CallOption) (*Users, error)
}

type entityRegistrySearchClient struct {
	cc *grpc.ClientConn
}

func NewEntityRegistrySearchClient(cc *grpc.ClientConn) EntityRegistrySearchClient {
	return &entityRegistrySearchClient{cc}
}

func (c *entityRegistrySearchClient) SearchApplications(ctx context.Context, in *SearchApplicationsRequest, opts ...grpc.CallOption) (*Applications, error) {
	out := new(Applications)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.EntityRegistrySearch/SearchApplications", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityRegistrySearchClient) SearchClients(ctx context.Context, in *SearchClientsRequest, opts ...grpc.CallOption) (*Clients, error) {
	out := new(Clients)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.EntityRegistrySearch/SearchClients", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityRegistrySearchClient) SearchGateways(ctx context.Context, in *SearchGatewaysRequest, opts ...grpc.CallOption) (*Gateways, error) {
	out := new(Gateways)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.EntityRegistrySearch/SearchGateways", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityRegistrySearchClient) SearchOrganizations(ctx context.Context, in *SearchOrganizationsRequest, opts ...grpc.CallOption) (*Organizations, error) {
	out := new(Organizations)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.EntityRegistrySearch/SearchOrganizations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityRegistrySearchClient) SearchUsers(ctx context.Context, in *SearchUsersRequest, opts ...grpc.CallOption) (*Users, error) {
	out := new(Users)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.EntityRegistrySearch/SearchUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EntityRegistrySearchServer is the server API for EntityRegistrySearch service.
type EntityRegistrySearchServer interface {
	// Search for applications that match the conditions specified in the request.
	// Non-admin users will only match applications that they have rights on.
	SearchApplications(context.Context, *SearchApplicationsRequest) (*Applications, error)
	// Search for OAuth clients that match the conditions specified in the request.
	// Non-admin users will only match OAuth clients that they have rights on.
	SearchClients(context.Context, *SearchClientsRequest) (*Clients, error)
	// Search for gateways that match the conditions specified in the request.
	// Non-admin users will only match gateways that they have rights on.
	SearchGateways(context.Context, *SearchGatewaysRequest) (*Gateways, error)
	// Search for organizations that match the conditions specified in the request.
	// Non-admin users will only match organizations that they have rights on.
	SearchOrganizations(context.Context, *SearchOrganizationsRequest) (*Organizations, error)
	// Search for users that match the conditions specified in the request.
	// This is only available to admin users.
	SearchUsers(context.Context, *SearchUsersRequest) (*Users, error)
}

// UnimplementedEntityRegistrySearchServer can be embedded to have forward compatible implementations.
type UnimplementedEntityRegistrySearchServer struct {
}

func (*UnimplementedEntityRegistrySearchServer) SearchApplications(ctx context.Context, req *SearchApplicationsRequest) (*Applications, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchApplications not implemented")
}
func (*UnimplementedEntityRegistrySearchServer) SearchClients(ctx context.Context, req *SearchClientsRequest) (*Clients, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchClients not implemented")
}
func (*UnimplementedEntityRegistrySearchServer) SearchGateways(ctx context.Context, req *SearchGatewaysRequest) (*Gateways, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchGateways not implemented")
}
func (*UnimplementedEntityRegistrySearchServer) SearchOrganizations(ctx context.Context, req *SearchOrganizationsRequest) (*Organizations, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchOrganizations not implemented")
}
func (*UnimplementedEntityRegistrySearchServer) SearchUsers(ctx context.Context, req *SearchUsersRequest) (*Users, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchUsers not implemented")
}

func RegisterEntityRegistrySearchServer(s *grpc.Server, srv EntityRegistrySearchServer) {
	s.RegisterService(&_EntityRegistrySearch_serviceDesc, srv)
}

func _EntityRegistrySearch_SearchApplications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchApplicationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityRegistrySearchServer).SearchApplications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.EntityRegistrySearch/SearchApplications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityRegistrySearchServer).SearchApplications(ctx, req.(*SearchApplicationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityRegistrySearch_SearchClients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchClientsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityRegistrySearchServer).SearchClients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.EntityRegistrySearch/SearchClients",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityRegistrySearchServer).SearchClients(ctx, req.(*SearchClientsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityRegistrySearch_SearchGateways_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchGatewaysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityRegistrySearchServer).SearchGateways(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.EntityRegistrySearch/SearchGateways",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityRegistrySearchServer).SearchGateways(ctx, req.(*SearchGatewaysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityRegistrySearch_SearchOrganizations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchOrganizationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityRegistrySearchServer).SearchOrganizations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.EntityRegistrySearch/SearchOrganizations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityRegistrySearchServer).SearchOrganizations(ctx, req.(*SearchOrganizationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityRegistrySearch_SearchUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityRegistrySearchServer).SearchUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.EntityRegistrySearch/SearchUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityRegistrySearchServer).SearchUsers(ctx, req.(*SearchUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _EntityRegistrySearch_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.lorawan.v3.EntityRegistrySearch",
	HandlerType: (*EntityRegistrySearchServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchApplications",
			Handler:    _EntityRegistrySearch_SearchApplications_Handler,
		},
		{
			MethodName: "SearchClients",
			Handler:    _EntityRegistrySearch_SearchClients_Handler,
		},
		{
			MethodName: "SearchGateways",
			Handler:    _EntityRegistrySearch_SearchGateways_Handler,
		},
		{
			MethodName: "SearchOrganizations",
			Handler:    _EntityRegistrySearch_SearchOrganizations_Handler,
		},
		{
			MethodName: "SearchUsers",
			Handler:    _EntityRegistrySearch_SearchUsers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lorawan-stack/api/search_services.proto",
}

// EndDeviceRegistrySearchClient is the client API for EndDeviceRegistrySearch service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EndDeviceRegistrySearchClient interface {
	// Search for end devices in the given application that match the conditions specified in the request.
	SearchEndDevices(ctx context.Context, in *SearchEndDevicesRequest, opts ...grpc.CallOption) (*EndDevices, error)
}

type endDeviceRegistrySearchClient struct {
	cc *grpc.ClientConn
}

func NewEndDeviceRegistrySearchClient(cc *grpc.ClientConn) EndDeviceRegistrySearchClient {
	return &endDeviceRegistrySearchClient{cc}
}

func (c *endDeviceRegistrySearchClient) SearchEndDevices(ctx context.Context, in *SearchEndDevicesRequest, opts ...grpc.CallOption) (*EndDevices, error) {
	out := new(EndDevices)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.EndDeviceRegistrySearch/SearchEndDevices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EndDeviceRegistrySearchServer is the server API for EndDeviceRegistrySearch service.
type EndDeviceRegistrySearchServer interface {
	// Search for end devices in the given application that match the conditions specified in the request.
	SearchEndDevices(context.Context, *SearchEndDevicesRequest) (*EndDevices, error)
}

// UnimplementedEndDeviceRegistrySearchServer can be embedded to have forward compatible implementations.
type UnimplementedEndDeviceRegistrySearchServer struct {
}

func (*UnimplementedEndDeviceRegistrySearchServer) SearchEndDevices(ctx context.Context, req *SearchEndDevicesRequest) (*EndDevices, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchEndDevices not implemented")
}

func RegisterEndDeviceRegistrySearchServer(s *grpc.Server, srv EndDeviceRegistrySearchServer) {
	s.RegisterService(&_EndDeviceRegistrySearch_serviceDesc, srv)
}

func _EndDeviceRegistrySearch_SearchEndDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchEndDevicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndDeviceRegistrySearchServer).SearchEndDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.EndDeviceRegistrySearch/SearchEndDevices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndDeviceRegistrySearchServer).SearchEndDevices(ctx, req.(*SearchEndDevicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _EndDeviceRegistrySearch_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.lorawan.v3.EndDeviceRegistrySearch",
	HandlerType: (*EndDeviceRegistrySearchServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchEndDevices",
			Handler:    _EndDeviceRegistrySearch_SearchEndDevices_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lorawan-stack/api/search_services.proto",
}

func (m *SearchApplicationsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchApplicationsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SearchApplicationsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Deleted {
		i--
		if m.Deleted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if m.Page != 0 {
		i = encodeVarintSearchServices(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x48
	}
	if m.Limit != 0 {
		i = encodeVarintSearchServices(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Order) > 0 {
		i -= len(m.Order)
		copy(dAtA[i:], m.Order)
		i = encodeVarintSearchServices(dAtA, i, uint64(len(m.Order)))
		i--
		dAtA[i] = 0x3a
	}
	if m.FieldMask != nil {
		{
			size, err := m.FieldMask.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSearchServices(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.AttributesContain) > 0 {
		for k := range m.AttributesContain {
			v := m.AttributesContain[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintSearchServices(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintSearchServices(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintSearchServices(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.DescriptionContains) > 0 {
		i -= len(m.DescriptionContains)
		copy(dAtA[i:], m.DescriptionContains)
		i = encodeVarintSearchServices(dAtA, i, uint64(len(m.DescriptionContains)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.NameContains) > 0 {
		i -= len(m.NameContains)
		copy(dAtA[i:], m.NameContains)
		i = encodeVarintSearchServices(dAtA, i, uint64(len(m.NameContains)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.IDContains) > 0 {
		i -= len(m.IDContains)
		copy(dAtA[i:], m.IDContains)
		i = encodeVarintSearchServices(dAtA, i, uint64(len(m.IDContains)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SearchClientsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchClientsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SearchClientsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Deleted {
		i--
		if m.Deleted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if m.Page != 0 {
		i = encodeVarintSearchServices(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x48
	}
	if m.Limit != 0 {
		i = encodeVarintSearchServices(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Order) > 0 {
		i -= len(m.Order)
		copy(dAtA[i:], m.Order)
		i = encodeVarintSearchServices(dAtA, i, uint64(len(m.Order)))
		i--
		dAtA[i] = 0x3a
	}
	if m.FieldMask != nil {
		{
			size, err := m.FieldMask.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSearchServices(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.State) > 0 {
		dAtA4 := make([]byte, len(m.State)*10)
		var j3 int
		for _, num := range m.State {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintSearchServices(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.AttributesContain) > 0 {
		for k := range m.AttributesContain {
			v := m.AttributesContain[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintSearchServices(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintSearchServices(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintSearchServices(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.DescriptionContains) > 0 {
		i -= len(m.DescriptionContains)
		copy(dAtA[i:], m.DescriptionContains)
		i = encodeVarintSearchServices(dAtA, i, uint64(len(m.DescriptionContains)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.NameContains) > 0 {
		i -= len(m.NameContains)
		copy(dAtA[i:], m.NameContains)
		i = encodeVarintSearchServices(dAtA, i, uint64(len(m.NameContains)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.IDContains) > 0 {
		i -= len(m.IDContains)
		copy(dAtA[i:], m.IDContains)
		i = encodeVarintSearchServices(dAtA, i, uint64(len(m.IDContains)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SearchGatewaysRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchGatewaysRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SearchGatewaysRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Deleted {
		i--
		if m.Deleted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if m.Page != 0 {
		i = encodeVarintSearchServices(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x48
	}
	if m.Limit != 0 {
		i = encodeVarintSearchServices(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Order) > 0 {
		i -= len(m.Order)
		copy(dAtA[i:], m.Order)
		i = encodeVarintSearchServices(dAtA, i, uint64(len(m.Order)))
		i--
		dAtA[i] = 0x3a
	}
	if m.FieldMask != nil {
		{
			size, err := m.FieldMask.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSearchServices(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.EuiContains) > 0 {
		i -= len(m.EuiContains)
		copy(dAtA[i:], m.EuiContains)
		i = encodeVarintSearchServices(dAtA, i, uint64(len(m.EuiContains)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.AttributesContain) > 0 {
		for k := range m.AttributesContain {
			v := m.AttributesContain[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintSearchServices(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintSearchServices(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintSearchServices(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.DescriptionContains) > 0 {
		i -= len(m.DescriptionContains)
		copy(dAtA[i:], m.DescriptionContains)
		i = encodeVarintSearchServices(dAtA, i, uint64(len(m.DescriptionContains)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.NameContains) > 0 {
		i -= len(m.NameContains)
		copy(dAtA[i:], m.NameContains)
		i = encodeVarintSearchServices(dAtA, i, uint64(len(m.NameContains)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.IDContains) > 0 {
		i -= len(m.IDContains)
		copy(dAtA[i:], m.IDContains)
		i = encodeVarintSearchServices(dAtA, i, uint64(len(m.IDContains)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SearchOrganizationsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchOrganizationsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SearchOrganizationsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Deleted {
		i--
		if m.Deleted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if m.Page != 0 {
		i = encodeVarintSearchServices(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x48
	}
	if m.Limit != 0 {
		i = encodeVarintSearchServices(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Order) > 0 {
		i -= len(m.Order)
		copy(dAtA[i:], m.Order)
		i = encodeVarintSearchServices(dAtA, i, uint64(len(m.Order)))
		i--
		dAtA[i] = 0x3a
	}
	if m.FieldMask != nil {
		{
			size, err := m.FieldMask.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSearchServices(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.AttributesContain) > 0 {
		for k := range m.AttributesContain {
			v := m.AttributesContain[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintSearchServices(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintSearchServices(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintSearchServices(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.DescriptionContains) > 0 {
		i -= len(m.DescriptionContains)
		copy(dAtA[i:], m.DescriptionContains)
		i = encodeVarintSearchServices(dAtA, i, uint64(len(m.DescriptionContains)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.NameContains) > 0 {
		i -= len(m.NameContains)
		copy(dAtA[i:], m.NameContains)
		i = encodeVarintSearchServices(dAtA, i, uint64(len(m.NameContains)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.IDContains) > 0 {
		i -= len(m.IDContains)
		copy(dAtA[i:], m.IDContains)
		i = encodeVarintSearchServices(dAtA, i, uint64(len(m.IDContains)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SearchUsersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchUsersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SearchUsersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Deleted {
		i--
		if m.Deleted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if m.Page != 0 {
		i = encodeVarintSearchServices(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x48
	}
	if m.Limit != 0 {
		i = encodeVarintSearchServices(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Order) > 0 {
		i -= len(m.Order)
		copy(dAtA[i:], m.Order)
		i = encodeVarintSearchServices(dAtA, i, uint64(len(m.Order)))
		i--
		dAtA[i] = 0x3a
	}
	if m.FieldMask != nil {
		{
			size, err := m.FieldMask.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSearchServices(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.State) > 0 {
		dAtA9 := make([]byte, len(m.State)*10)
		var j8 int
		for _, num := range m.State {
			for num >= 1<<7 {
				dAtA9[j8] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j8++
			}
			dAtA9[j8] = uint8(num)
			j8++
		}
		i -= j8
		copy(dAtA[i:], dAtA9[:j8])
		i = encodeVarintSearchServices(dAtA, i, uint64(j8))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.AttributesContain) > 0 {
		for k := range m.AttributesContain {
			v := m.AttributesContain[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintSearchServices(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintSearchServices(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintSearchServices(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.DescriptionContains) > 0 {
		i -= len(m.DescriptionContains)
		copy(dAtA[i:], m.DescriptionContains)
		i = encodeVarintSearchServices(dAtA, i, uint64(len(m.DescriptionContains)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.NameContains) > 0 {
		i -= len(m.NameContains)
		copy(dAtA[i:], m.NameContains)
		i = encodeVarintSearchServices(dAtA, i, uint64(len(m.NameContains)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.IDContains) > 0 {
		i -= len(m.IDContains)
		copy(dAtA[i:], m.IDContains)
		i = encodeVarintSearchServices(dAtA, i, uint64(len(m.IDContains)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SearchEndDevicesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchEndDevicesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SearchEndDevicesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Page != 0 {
		i = encodeVarintSearchServices(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x60
	}
	if m.Limit != 0 {
		i = encodeVarintSearchServices(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x58
	}
	if len(m.Order) > 0 {
		i -= len(m.Order)
		copy(dAtA[i:], m.Order)
		i = encodeVarintSearchServices(dAtA, i, uint64(len(m.Order)))
		i--
		dAtA[i] = 0x52
	}
	if m.FieldMask != nil {
		{
			size, err := m.FieldMask.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSearchServices(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if len(m.DevAddrContains) > 0 {
		i -= len(m.DevAddrContains)
		copy(dAtA[i:], m.DevAddrContains)
		i = encodeVarintSearchServices(dAtA, i, uint64(len(m.DevAddrContains)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.JoinEuiContains) > 0 {
		i -= len(m.JoinEuiContains)
		copy(dAtA[i:], m.JoinEuiContains)
		i = encodeVarintSearchServices(dAtA, i, uint64(len(m.JoinEuiContains)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.DevEuiContains) > 0 {
		i -= len(m.DevEuiContains)
		copy(dAtA[i:], m.DevEuiContains)
		i = encodeVarintSearchServices(dAtA, i, uint64(len(m.DevEuiContains)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.AttributesContain) > 0 {
		for k := range m.AttributesContain {
			v := m.AttributesContain[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintSearchServices(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintSearchServices(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintSearchServices(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.DescriptionContains) > 0 {
		i -= len(m.DescriptionContains)
		copy(dAtA[i:], m.DescriptionContains)
		i = encodeVarintSearchServices(dAtA, i, uint64(len(m.DescriptionContains)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.NameContains) > 0 {
		i -= len(m.NameContains)
		copy(dAtA[i:], m.NameContains)
		i = encodeVarintSearchServices(dAtA, i, uint64(len(m.NameContains)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.IDContains) > 0 {
		i -= len(m.IDContains)
		copy(dAtA[i:], m.IDContains)
		i = encodeVarintSearchServices(dAtA, i, uint64(len(m.IDContains)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.ApplicationIdentifiers.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintSearchServices(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintSearchServices(dAtA []byte, offset int, v uint64) int {
	offset -= sovSearchServices(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedSearchApplicationsRequest(r randySearchServices, easy bool) *SearchApplicationsRequest {
	this := &SearchApplicationsRequest{}
	this.IDContains = string(randStringSearchServices(r))
	this.NameContains = string(randStringSearchServices(r))
	this.DescriptionContains = string(randStringSearchServices(r))
	if r.Intn(5) != 0 {
		v1 := r.Intn(10)
		this.AttributesContain = make(map[string]string)
		for i := 0; i < v1; i++ {
			this.AttributesContain[randStringSearchServices(r)] = randStringSearchServices(r)
		}
	}
	if r.Intn(5) != 0 {
		this.FieldMask = types.NewPopulatedFieldMask(r, easy)
	}
	this.Order = string(randStringSearchServices(r))
	this.Limit = uint32(r.Uint32())
	this.Page = uint32(r.Uint32())
	this.Deleted = bool(bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSearchClientsRequest(r randySearchServices, easy bool) *SearchClientsRequest {
	this := &SearchClientsRequest{}
	this.IDContains = string(randStringSearchServices(r))
	this.NameContains = string(randStringSearchServices(r))
	this.DescriptionContains = string(randStringSearchServices(r))
	if r.Intn(5) != 0 {
		v2 := r.Intn(10)
		this.AttributesContain = make(map[string]string)
		for i := 0; i < v2; i++ {
			this.AttributesContain[randStringSearchServices(r)] = randStringSearchServices(r)
		}
	}
	v3 := r.Intn(10)
	this.State = make([]State, v3)
	for i := 0; i < v3; i++ {
		this.State[i] = State([]int32{0, 1, 2, 3, 4}[r.Intn(5)])
	}
	if r.Intn(5) != 0 {
		this.FieldMask = types.NewPopulatedFieldMask(r, easy)
	}
	this.Order = string(randStringSearchServices(r))
	this.Limit = uint32(r.Uint32())
	this.Page = uint32(r.Uint32())
	this.Deleted = bool(bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSearchGatewaysRequest(r randySearchServices, easy bool) *SearchGatewaysRequest {
	this := &SearchGatewaysRequest{}
	this.IDContains = string(randStringSearchServices(r))
	this.NameContains = string(randStringSearchServices(r))
	this.DescriptionContains = string(randStringSearchServices(r))
	if r.Intn(5) != 0 {
		v4 := r.Intn(10)
		this.AttributesContain = make(map[string]string)
		for i := 0; i < v4; i++ {
			this.AttributesContain[randStringSearchServices(r)] = randStringSearchServices(r)
		}
	}
	this.EuiContains = string(randStringSearchServices(r))
	if r.Intn(5) != 0 {
		this.FieldMask = types.NewPopulatedFieldMask(r, easy)
	}
	this.Order = string(randStringSearchServices(r))
	this.Limit = uint32(r.Uint32())
	this.Page = uint32(r.Uint32())
	this.Deleted = bool(bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSearchOrganizationsRequest(r randySearchServices, easy bool) *SearchOrganizationsRequest {
	this := &SearchOrganizationsRequest{}
	this.IDContains = string(randStringSearchServices(r))
	this.NameContains = string(randStringSearchServices(r))
	this.DescriptionContains = string(randStringSearchServices(r))
	if r.Intn(5) != 0 {
		v5 := r.Intn(10)
		this.AttributesContain = make(map[string]string)
		for i := 0; i < v5; i++ {
			this.AttributesContain[randStringSearchServices(r)] = randStringSearchServices(r)
		}
	}
	if r.Intn(5) != 0 {
		this.FieldMask = types.NewPopulatedFieldMask(r, easy)
	}
	this.Order = string(randStringSearchServices(r))
	this.Limit = uint32(r.Uint32())
	this.Page = uint32(r.Uint32())
	this.Deleted = bool(bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSearchUsersRequest(r randySearchServices, easy bool) *SearchUsersRequest {
	this := &SearchUsersRequest{}
	this.IDContains = string(randStringSearchServices(r))
	this.NameContains = string(randStringSearchServices(r))
	this.DescriptionContains = string(randStringSearchServices(r))
	if r.Intn(5) != 0 {
		v6 := r.Intn(10)
		this.AttributesContain = make(map[string]string)
		for i := 0; i < v6; i++ {
			this.AttributesContain[randStringSearchServices(r)] = randStringSearchServices(r)
		}
	}
	v7 := r.Intn(10)
	this.State = make([]State, v7)
	for i := 0; i < v7; i++ {
		this.State[i] = State([]int32{0, 1, 2, 3, 4}[r.Intn(5)])
	}
	if r.Intn(5) != 0 {
		this.FieldMask = types.NewPopulatedFieldMask(r, easy)
	}
	this.Order = string(randStringSearchServices(r))
	this.Limit = uint32(r.Uint32())
	this.Page = uint32(r.Uint32())
	this.Deleted = bool(bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSearchEndDevicesRequest(r randySearchServices, easy bool) *SearchEndDevicesRequest {
	this := &SearchEndDevicesRequest{}
	v8 := NewPopulatedApplicationIdentifiers(r, easy)
	this.ApplicationIdentifiers = *v8
	this.IDContains = string(randStringSearchServices(r))
	this.NameContains = string(randStringSearchServices(r))
	this.DescriptionContains = string(randStringSearchServices(r))
	if r.Intn(5) != 0 {
		v9 := r.Intn(10)
		this.AttributesContain = make(map[string]string)
		for i := 0; i < v9; i++ {
			this.AttributesContain[randStringSearchServices(r)] = randStringSearchServices(r)
		}
	}
	this.DevEuiContains = string(randStringSearchServices(r))
	this.JoinEuiContains = string(randStringSearchServices(r))
	this.DevAddrContains = string(randStringSearchServices(r))
	if r.Intn(5) != 0 {
		this.FieldMask = types.NewPopulatedFieldMask(r, easy)
	}
	this.Order = string(randStringSearchServices(r))
	this.Limit = uint32(r.Uint32())
	this.Page = uint32(r.Uint32())
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randySearchServices interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneSearchServices(r randySearchServices) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringSearchServices(r randySearchServices) string {
	v10 := r.Intn(100)
	tmps := make([]rune, v10)
	for i := 0; i < v10; i++ {
		tmps[i] = randUTF8RuneSearchServices(r)
	}
	return string(tmps)
}
func randUnrecognizedSearchServices(r randySearchServices, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldSearchServices(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldSearchServices(dAtA []byte, r randySearchServices, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateSearchServices(dAtA, uint64(key))
		v11 := r.Int63()
		if r.Intn(2) == 0 {
			v11 *= -1
		}
		dAtA = encodeVarintPopulateSearchServices(dAtA, uint64(v11))
	case 1:
		dAtA = encodeVarintPopulateSearchServices(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateSearchServices(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateSearchServices(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateSearchServices(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateSearchServices(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *SearchApplicationsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IDContains)
	if l > 0 {
		n += 1 + l + sovSearchServices(uint64(l))
	}
	l = len(m.NameContains)
	if l > 0 {
		n += 1 + l + sovSearchServices(uint64(l))
	}
	l = len(m.DescriptionContains)
	if l > 0 {
		n += 1 + l + sovSearchServices(uint64(l))
	}
	if len(m.AttributesContain) > 0 {
		for k, v := range m.AttributesContain {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovSearchServices(uint64(len(k))) + 1 + len(v) + sovSearchServices(uint64(len(v)))
			n += mapEntrySize + 1 + sovSearchServices(uint64(mapEntrySize))
		}
	}
	if m.FieldMask != nil {
		l = m.FieldMask.Size()
		n += 1 + l + sovSearchServices(uint64(l))
	}
	l = len(m.Order)
	if l > 0 {
		n += 1 + l + sovSearchServices(uint64(l))
	}
	if m.Limit != 0 {
		n += 1 + sovSearchServices(uint64(m.Limit))
	}
	if m.Page != 0 {
		n += 1 + sovSearchServices(uint64(m.Page))
	}
	if m.Deleted {
		n += 2
	}
	return n
}

func (m *SearchClientsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IDContains)
	if l > 0 {
		n += 1 + l + sovSearchServices(uint64(l))
	}
	l = len(m.NameContains)
	if l > 0 {
		n += 1 + l + sovSearchServices(uint64(l))
	}
	l = len(m.DescriptionContains)
	if l > 0 {
		n += 1 + l + sovSearchServices(uint64(l))
	}
	if len(m.AttributesContain) > 0 {
		for k, v := range m.AttributesContain {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovSearchServices(uint64(len(k))) + 1 + len(v) + sovSearchServices(uint64(len(v)))
			n += mapEntrySize + 1 + sovSearchServices(uint64(mapEntrySize))
		}
	}
	if len(m.State) > 0 {
		l = 0
		for _, e := range m.State {
			l += sovSearchServices(uint64(e))
		}
		n += 1 + sovSearchServices(uint64(l)) + l
	}
	if m.FieldMask != nil {
		l = m.FieldMask.Size()
		n += 1 + l + sovSearchServices(uint64(l))
	}
	l = len(m.Order)
	if l > 0 {
		n += 1 + l + sovSearchServices(uint64(l))
	}
	if m.Limit != 0 {
		n += 1 + sovSearchServices(uint64(m.Limit))
	}
	if m.Page != 0 {
		n += 1 + sovSearchServices(uint64(m.Page))
	}
	if m.Deleted {
		n += 2
	}
	return n
}

func (m *SearchGatewaysRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IDContains)
	if l > 0 {
		n += 1 + l + sovSearchServices(uint64(l))
	}
	l = len(m.NameContains)
	if l > 0 {
		n += 1 + l + sovSearchServices(uint64(l))
	}
	l = len(m.DescriptionContains)
	if l > 0 {
		n += 1 + l + sovSearchServices(uint64(l))
	}
	if len(m.AttributesContain) > 0 {
		for k, v := range m.AttributesContain {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovSearchServices(uint64(len(k))) + 1 + len(v) + sovSearchServices(uint64(len(v)))
			n += mapEntrySize + 1 + sovSearchServices(uint64(mapEntrySize))
		}
	}
	l = len(m.EuiContains)
	if l > 0 {
		n += 1 + l + sovSearchServices(uint64(l))
	}
	if m.FieldMask != nil {
		l = m.FieldMask.Size()
		n += 1 + l + sovSearchServices(uint64(l))
	}
	l = len(m.Order)
	if l > 0 {
		n += 1 + l + sovSearchServices(uint64(l))
	}
	if m.Limit != 0 {
		n += 1 + sovSearchServices(uint64(m.Limit))
	}
	if m.Page != 0 {
		n += 1 + sovSearchServices(uint64(m.Page))
	}
	if m.Deleted {
		n += 2
	}
	return n
}

func (m *SearchOrganizationsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IDContains)
	if l > 0 {
		n += 1 + l + sovSearchServices(uint64(l))
	}
	l = len(m.NameContains)
	if l > 0 {
		n += 1 + l + sovSearchServices(uint64(l))
	}
	l = len(m.DescriptionContains)
	if l > 0 {
		n += 1 + l + sovSearchServices(uint64(l))
	}
	if len(m.AttributesContain) > 0 {
		for k, v := range m.AttributesContain {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovSearchServices(uint64(len(k))) + 1 + len(v) + sovSearchServices(uint64(len(v)))
			n += mapEntrySize + 1 + sovSearchServices(uint64(mapEntrySize))
		}
	}
	if m.FieldMask != nil {
		l = m.FieldMask.Size()
		n += 1 + l + sovSearchServices(uint64(l))
	}
	l = len(m.Order)
	if l > 0 {
		n += 1 + l + sovSearchServices(uint64(l))
	}
	if m.Limit != 0 {
		n += 1 + sovSearchServices(uint64(m.Limit))
	}
	if m.Page != 0 {
		n += 1 + sovSearchServices(uint64(m.Page))
	}
	if m.Deleted {
		n += 2
	}
	return n
}

func (m *SearchUsersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IDContains)
	if l > 0 {
		n += 1 + l + sovSearchServices(uint64(l))
	}
	l = len(m.NameContains)
	if l > 0 {
		n += 1 + l + sovSearchServices(uint64(l))
	}
	l = len(m.DescriptionContains)
	if l > 0 {
		n += 1 + l + sovSearchServices(uint64(l))
	}
	if len(m.AttributesContain) > 0 {
		for k, v := range m.AttributesContain {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovSearchServices(uint64(len(k))) + 1 + len(v) + sovSearchServices(uint64(len(v)))
			n += mapEntrySize + 1 + sovSearchServices(uint64(mapEntrySize))
		}
	}
	if len(m.State) > 0 {
		l = 0
		for _, e := range m.State {
			l += sovSearchServices(uint64(e))
		}
		n += 1 + sovSearchServices(uint64(l)) + l
	}
	if m.FieldMask != nil {
		l = m.FieldMask.Size()
		n += 1 + l + sovSearchServices(uint64(l))
	}
	l = len(m.Order)
	if l > 0 {
		n += 1 + l + sovSearchServices(uint64(l))
	}
	if m.Limit != 0 {
		n += 1 + sovSearchServices(uint64(m.Limit))
	}
	if m.Page != 0 {
		n += 1 + sovSearchServices(uint64(m.Page))
	}
	if m.Deleted {
		n += 2
	}
	return n
}

func (m *SearchEndDevicesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ApplicationIdentifiers.Size()
	n += 1 + l + sovSearchServices(uint64(l))
	l = len(m.IDContains)
	if l > 0 {
		n += 1 + l + sovSearchServices(uint64(l))
	}
	l = len(m.NameContains)
	if l > 0 {
		n += 1 + l + sovSearchServices(uint64(l))
	}
	l = len(m.DescriptionContains)
	if l > 0 {
		n += 1 + l + sovSearchServices(uint64(l))
	}
	if len(m.AttributesContain) > 0 {
		for k, v := range m.AttributesContain {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovSearchServices(uint64(len(k))) + 1 + len(v) + sovSearchServices(uint64(len(v)))
			n += mapEntrySize + 1 + sovSearchServices(uint64(mapEntrySize))
		}
	}
	l = len(m.DevEuiContains)
	if l > 0 {
		n += 1 + l + sovSearchServices(uint64(l))
	}
	l = len(m.JoinEuiContains)
	if l > 0 {
		n += 1 + l + sovSearchServices(uint64(l))
	}
	l = len(m.DevAddrContains)
	if l > 0 {
		n += 1 + l + sovSearchServices(uint64(l))
	}
	if m.FieldMask != nil {
		l = m.FieldMask.Size()
		n += 1 + l + sovSearchServices(uint64(l))
	}
	l = len(m.Order)
	if l > 0 {
		n += 1 + l + sovSearchServices(uint64(l))
	}
	if m.Limit != 0 {
		n += 1 + sovSearchServices(uint64(m.Limit))
	}
	if m.Page != 0 {
		n += 1 + sovSearchServices(uint64(m.Page))
	}
	return n
}

func sovSearchServices(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSearchServices(x uint64) (n int) {
	return sovSearchServices(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *SearchApplicationsRequest) String() string {
	if this == nil {
		return "nil"
	}
	keysForAttributesContain := make([]string, 0, len(this.AttributesContain))
	for k := range this.AttributesContain {
		keysForAttributesContain = append(keysForAttributesContain, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForAttributesContain)
	mapStringForAttributesContain := "map[string]string{"
	for _, k := range keysForAttributesContain {
		mapStringForAttributesContain += fmt.Sprintf("%v: %v,", k, this.AttributesContain[k])
	}
	mapStringForAttributesContain += "}"
	s := strings.Join([]string{`&SearchApplicationsRequest{`,
		`IDContains:` + fmt.Sprintf("%v", this.IDContains) + `,`,
		`NameContains:` + fmt.Sprintf("%v", this.NameContains) + `,`,
		`DescriptionContains:` + fmt.Sprintf("%v", this.DescriptionContains) + `,`,
		`AttributesContain:` + mapStringForAttributesContain + `,`,
		`FieldMask:` + strings.Replace(fmt.Sprintf("%v", this.FieldMask), "FieldMask", "types.FieldMask", 1) + `,`,
		`Order:` + fmt.Sprintf("%v", this.Order) + `,`,
		`Limit:` + fmt.Sprintf("%v", this.Limit) + `,`,
		`Page:` + fmt.Sprintf("%v", this.Page) + `,`,
		`Deleted:` + fmt.Sprintf("%v", this.Deleted) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SearchClientsRequest) String() string {
	if this == nil {
		return "nil"
	}
	keysForAttributesContain := make([]string, 0, len(this.AttributesContain))
	for k := range this.AttributesContain {
		keysForAttributesContain = append(keysForAttributesContain, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForAttributesContain)
	mapStringForAttributesContain := "map[string]string{"
	for _, k := range keysForAttributesContain {
		mapStringForAttributesContain += fmt.Sprintf("%v: %v,", k, this.AttributesContain[k])
	}
	mapStringForAttributesContain += "}"
	s := strings.Join([]string{`&SearchClientsRequest{`,
		`IDContains:` + fmt.Sprintf("%v", this.IDContains) + `,`,
		`NameContains:` + fmt.Sprintf("%v", this.NameContains) + `,`,
		`DescriptionContains:` + fmt.Sprintf("%v", this.DescriptionContains) + `,`,
		`AttributesContain:` + mapStringForAttributesContain + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`FieldMask:` + strings.Replace(fmt.Sprintf("%v", this.FieldMask), "FieldMask", "types.FieldMask", 1) + `,`,
		`Order:` + fmt.Sprintf("%v", this.Order) + `,`,
		`Limit:` + fmt.Sprintf("%v", this.Limit) + `,`,
		`Page:` + fmt.Sprintf("%v", this.Page) + `,`,
		`Deleted:` + fmt.Sprintf("%v", this.Deleted) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SearchGatewaysRequest) String() string {
	if this == nil {
		return "nil"
	}
	keysForAttributesContain := make([]string, 0, len(this.AttributesContain))
	for k := range this.AttributesContain {
		keysForAttributesContain = append(keysForAttributesContain, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForAttributesContain)
	mapStringForAttributesContain := "map[string]string{"
	for _, k := range keysForAttributesContain {
		mapStringForAttributesContain += fmt.Sprintf("%v: %v,", k, this.AttributesContain[k])
	}
	mapStringForAttributesContain += "}"
	s := strings.Join([]string{`&SearchGatewaysRequest{`,
		`IDContains:` + fmt.Sprintf("%v", this.IDContains) + `,`,
		`NameContains:` + fmt.Sprintf("%v", this.NameContains) + `,`,
		`DescriptionContains:` + fmt.Sprintf("%v", this.DescriptionContains) + `,`,
		`AttributesContain:` + mapStringForAttributesContain + `,`,
		`EuiContains:` + fmt.Sprintf("%v", this.EuiContains) + `,`,
		`FieldMask:` + strings.Replace(fmt.Sprintf("%v", this.FieldMask), "FieldMask", "types.FieldMask", 1) + `,`,
		`Order:` + fmt.Sprintf("%v", this.Order) + `,`,
		`Limit:` + fmt.Sprintf("%v", this.Limit) + `,`,
		`Page:` + fmt.Sprintf("%v", this.Page) + `,`,
		`Deleted:` + fmt.Sprintf("%v", this.Deleted) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SearchOrganizationsRequest) String() string {
	if this == nil {
		return "nil"
	}
	keysForAttributesContain := make([]string, 0, len(this.AttributesContain))
	for k := range this.AttributesContain {
		keysForAttributesContain = append(keysForAttributesContain, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForAttributesContain)
	mapStringForAttributesContain := "map[string]string{"
	for _, k := range keysForAttributesContain {
		mapStringForAttributesContain += fmt.Sprintf("%v: %v,", k, this.AttributesContain[k])
	}
	mapStringForAttributesContain += "}"
	s := strings.Join([]string{`&SearchOrganizationsRequest{`,
		`IDContains:` + fmt.Sprintf("%v", this.IDContains) + `,`,
		`NameContains:` + fmt.Sprintf("%v", this.NameContains) + `,`,
		`DescriptionContains:` + fmt.Sprintf("%v", this.DescriptionContains) + `,`,
		`AttributesContain:` + mapStringForAttributesContain + `,`,
		`FieldMask:` + strings.Replace(fmt.Sprintf("%v", this.FieldMask), "FieldMask", "types.FieldMask", 1) + `,`,
		`Order:` + fmt.Sprintf("%v", this.Order) + `,`,
		`Limit:` + fmt.Sprintf("%v", this.Limit) + `,`,
		`Page:` + fmt.Sprintf("%v", this.Page) + `,`,
		`Deleted:` + fmt.Sprintf("%v", this.Deleted) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SearchUsersRequest) String() string {
	if this == nil {
		return "nil"
	}
	keysForAttributesContain := make([]string, 0, len(this.AttributesContain))
	for k := range this.AttributesContain {
		keysForAttributesContain = append(keysForAttributesContain, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForAttributesContain)
	mapStringForAttributesContain := "map[string]string{"
	for _, k := range keysForAttributesContain {
		mapStringForAttributesContain += fmt.Sprintf("%v: %v,", k, this.AttributesContain[k])
	}
	mapStringForAttributesContain += "}"
	s := strings.Join([]string{`&SearchUsersRequest{`,
		`IDContains:` + fmt.Sprintf("%v", this.IDContains) + `,`,
		`NameContains:` + fmt.Sprintf("%v", this.NameContains) + `,`,
		`DescriptionContains:` + fmt.Sprintf("%v", this.DescriptionContains) + `,`,
		`AttributesContain:` + mapStringForAttributesContain + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`FieldMask:` + strings.Replace(fmt.Sprintf("%v", this.FieldMask), "FieldMask", "types.FieldMask", 1) + `,`,
		`Order:` + fmt.Sprintf("%v", this.Order) + `,`,
		`Limit:` + fmt.Sprintf("%v", this.Limit) + `,`,
		`Page:` + fmt.Sprintf("%v", this.Page) + `,`,
		`Deleted:` + fmt.Sprintf("%v", this.Deleted) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SearchEndDevicesRequest) String() string {
	if this == nil {
		return "nil"
	}
	keysForAttributesContain := make([]string, 0, len(this.AttributesContain))
	for k := range this.AttributesContain {
		keysForAttributesContain = append(keysForAttributesContain, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForAttributesContain)
	mapStringForAttributesContain := "map[string]string{"
	for _, k := range keysForAttributesContain {
		mapStringForAttributesContain += fmt.Sprintf("%v: %v,", k, this.AttributesContain[k])
	}
	mapStringForAttributesContain += "}"
	s := strings.Join([]string{`&SearchEndDevicesRequest{`,
		`ApplicationIdentifiers:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ApplicationIdentifiers), "ApplicationIdentifiers", "ApplicationIdentifiers", 1), `&`, ``, 1) + `,`,
		`IDContains:` + fmt.Sprintf("%v", this.IDContains) + `,`,
		`NameContains:` + fmt.Sprintf("%v", this.NameContains) + `,`,
		`DescriptionContains:` + fmt.Sprintf("%v", this.DescriptionContains) + `,`,
		`AttributesContain:` + mapStringForAttributesContain + `,`,
		`DevEuiContains:` + fmt.Sprintf("%v", this.DevEuiContains) + `,`,
		`JoinEuiContains:` + fmt.Sprintf("%v", this.JoinEuiContains) + `,`,
		`DevAddrContains:` + fmt.Sprintf("%v", this.DevAddrContains) + `,`,
		`FieldMask:` + strings.Replace(fmt.Sprintf("%v", this.FieldMask), "FieldMask", "types.FieldMask", 1) + `,`,
		`Order:` + fmt.Sprintf("%v", this.Order) + `,`,
		`Limit:` + fmt.Sprintf("%v", this.Limit) + `,`,
		`Page:` + fmt.Sprintf("%v", this.Page) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringSearchServices(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *SearchApplicationsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSearchServices
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchApplicationsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchApplicationsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IDContains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearchServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSearchServices
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSearchServices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IDContains = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NameContains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearchServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSearchServices
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSearchServices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NameContains = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DescriptionContains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearchServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSearchServices
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSearchServices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DescriptionContains = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttributesContain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearchServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearchServices
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSearchServices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AttributesContain == nil {
				m.AttributesContain = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSearchServices
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSearchServices
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthSearchServices
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthSearchServices
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSearchServices
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthSearchServices
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthSearchServices
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipSearchServices(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthSearchServices
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.AttributesContain[mapkey] = mapvalue
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldMask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearchServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearchServices
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSearchServices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FieldMask == nil {
				m.FieldMask = &types.FieldMask{}
			}
			if err := m.FieldMask.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearchServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSearchServices
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSearchServices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Order = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearchServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearchServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deleted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearchServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Deleted = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSearchServices(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSearchServices
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSearchServices
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchClientsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSearchServices
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchClientsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchClientsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IDContains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearchServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSearchServices
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSearchServices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IDContains = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NameContains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearchServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSearchServices
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSearchServices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NameContains = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DescriptionContains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearchServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSearchServices
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSearchServices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DescriptionContains = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttributesContain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearchServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearchServices
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSearchServices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AttributesContain == nil {
				m.AttributesContain = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSearchServices
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSearchServices
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthSearchServices
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthSearchServices
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSearchServices
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthSearchServices
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthSearchServices
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipSearchServices(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthSearchServices
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.AttributesContain[mapkey] = mapvalue
			iNdEx = postIndex
		case 5:
			if wireType == 0 {
				var v State
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSearchServices
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= State(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.State = append(m.State, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSearchServices
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSearchServices
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthSearchServices
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.State) == 0 {
					m.State = make([]State, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v State
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSearchServices
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= State(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.State = append(m.State, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldMask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearchServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearchServices
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSearchServices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FieldMask == nil {
				m.FieldMask = &types.FieldMask{}
			}
			if err := m.FieldMask.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearchServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSearchServices
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSearchServices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Order = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearchServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearchServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deleted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearchServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Deleted = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSearchServices(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSearchServices
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSearchServices
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchGatewaysRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSearchServices
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchGatewaysRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchGatewaysRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IDContains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearchServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSearchServices
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSearchServices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IDContains = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NameContains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearchServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSearchServices
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSearchServices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NameContains = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DescriptionContains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearchServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSearchServices
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSearchServices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DescriptionContains = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttributesContain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearchServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearchServices
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSearchServices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AttributesContain == nil {
				m.AttributesContain = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSearchServices
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSearchServices
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthSearchServices
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthSearchServices
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSearchServices
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthSearchServices
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthSearchServices
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipSearchServices(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthSearchServices
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.AttributesContain[mapkey] = mapvalue
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EuiContains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearchServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSearchServices
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSearchServices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EuiContains = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldMask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearchServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearchServices
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSearchServices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FieldMask == nil {
				m.FieldMask = &types.FieldMask{}
			}
			if err := m.FieldMask.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearchServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSearchServices
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSearchServices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Order = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearchServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearchServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deleted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearchServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Deleted = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSearchServices(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSearchServices
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSearchServices
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchOrganizationsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSearchServices
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchOrganizationsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchOrganizationsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IDContains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearchServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSearchServices
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSearchServices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IDContains = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NameContains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearchServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSearchServices
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSearchServices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NameContains = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DescriptionContains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearchServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSearchServices
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSearchServices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DescriptionContains = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttributesContain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearchServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearchServices
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSearchServices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AttributesContain == nil {
				m.AttributesContain = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSearchServices
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSearchServices
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthSearchServices
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthSearchServices
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSearchServices
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthSearchServices
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthSearchServices
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipSearchServices(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthSearchServices
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.AttributesContain[mapkey] = mapvalue
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldMask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearchServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearchServices
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSearchServices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FieldMask == nil {
				m.FieldMask = &types.FieldMask{}
			}
			if err := m.FieldMask.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearchServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSearchServices
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSearchServices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Order = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearchServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearchServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deleted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearchServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Deleted = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSearchServices(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSearchServices
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSearchServices
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchUsersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSearchServices
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchUsersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchUsersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IDContains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearchServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSearchServices
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSearchServices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IDContains = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NameContains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearchServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSearchServices
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSearchServices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NameContains = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DescriptionContains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearchServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSearchServices
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSearchServices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DescriptionContains = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttributesContain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearchServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearchServices
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSearchServices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AttributesContain == nil {
				m.AttributesContain = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSearchServices
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSearchServices
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthSearchServices
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthSearchServices
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSearchServices
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthSearchServices
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthSearchServices
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipSearchServices(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthSearchServices
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.AttributesContain[mapkey] = mapvalue
			iNdEx = postIndex
		case 5:
			if wireType == 0 {
				var v State
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSearchServices
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= State(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.State = append(m.State, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSearchServices
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSearchServices
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthSearchServices
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.State) == 0 {
					m.State = make([]State, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v State
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSearchServices
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= State(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.State = append(m.State, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldMask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearchServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearchServices
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSearchServices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FieldMask == nil {
				m.FieldMask = &types.FieldMask{}
			}
			if err := m.FieldMask.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearchServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSearchServices
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSearchServices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Order = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearchServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearchServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deleted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearchServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Deleted = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSearchServices(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSearchServices
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSearchServices
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchEndDevicesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSearchServices
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchEndDevicesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchEndDevicesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicationIdentifiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearchServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearchServices
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSearchServices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ApplicationIdentifiers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IDContains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearchServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSearchServices
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSearchServices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IDContains = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NameContains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearchServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSearchServices
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSearchServices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NameContains = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DescriptionContains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearchServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSearchServices
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSearchServices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DescriptionContains = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttributesContain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearchServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearchServices
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSearchServices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AttributesContain == nil {
				m.AttributesContain = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSearchServices
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSearchServices
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthSearchServices
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthSearchServices
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSearchServices
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthSearchServices
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthSearchServices
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipSearchServices(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthSearchServices
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.AttributesContain[mapkey] = mapvalue
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevEuiContains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearchServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSearchServices
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSearchServices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DevEuiContains = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinEuiContains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearchServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSearchServices
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSearchServices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JoinEuiContains = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevAddrContains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearchServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSearchServices
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSearchServices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DevAddrContains = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldMask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearchServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearchServices
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSearchServices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FieldMask == nil {
				m.FieldMask = &types.FieldMask{}
			}
			if err := m.FieldMask.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearchServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSearchServices
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSearchServices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Order = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearchServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearchServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSearchServices(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSearchServices
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSearchServices
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSearchServices(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSearchServices
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSearchServices
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSearchServices
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSearchServices
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSearchServices
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSearchServices
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSearchServices        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSearchServices          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSearchServices = fmt.Errorf("proto: unexpected end of group")
)
