// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lorawan-stack/api/end_device_services.proto

package ttnpb

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("lorawan-stack/api/end_device_services.proto", fileDescriptor_36b7c5a531ab03ac)
}
func init() {
	golang_proto.RegisterFile("lorawan-stack/api/end_device_services.proto", fileDescriptor_36b7c5a531ab03ac)
}

var fileDescriptor_36b7c5a531ab03ac = []byte{
	// 570 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0xcf, 0x6a, 0x13, 0x41,
	0x18, 0xef, 0xaa, 0xa4, 0x30, 0xa2, 0xe2, 0x40, 0x45, 0x57, 0x09, 0xb8, 0x55, 0x91, 0x48, 0x67,
	0xa4, 0x41, 0x91, 0x1e, 0x04, 0xdb, 0xa4, 0xa1, 0xc5, 0x83, 0x88, 0xbd, 0x78, 0x49, 0x37, 0xbb,
	0x5f, 0x36, 0x43, 0x92, 0x99, 0x75, 0xe6, 0x4b, 0x4a, 0x28, 0xbd, 0x78, 0xf3, 0x26, 0x7a, 0xf6,
	0x19, 0x3c, 0xea, 0xd1, 0x77, 0xf0, 0x0d, 0x5a, 0x0f, 0x1e, 0x7d, 0x03, 0x25, 0xb3, 0x9b, 0x4d,
	0x9a, 0x35, 0xb5, 0x91, 0x9e, 0x76, 0x67, 0xe6, 0xf7, 0xef, 0xfb, 0xe6, 0x0f, 0x79, 0xd0, 0x51,
	0xda, 0xdf, 0xf3, 0xe5, 0x8a, 0x41, 0x3f, 0x68, 0x73, 0x3f, 0x16, 0x1c, 0x64, 0x58, 0x0f, 0xa1,
	0x2f, 0x02, 0xa8, 0x1b, 0xd0, 0xc3, 0xaf, 0x61, 0xb1, 0x56, 0xa8, 0xe8, 0x65, 0x44, 0xc9, 0x52,
	0x02, 0xeb, 0x97, 0xdd, 0x95, 0x48, 0x60, 0xab, 0xd7, 0x60, 0x81, 0xea, 0xf2, 0x48, 0x45, 0x8a,
	0x5b, 0x58, 0xa3, 0xd7, 0xb4, 0x23, 0x3b, 0xb0, 0x7f, 0x09, 0xdd, 0xbd, 0x15, 0x29, 0x15, 0x75,
	0xc0, 0x9a, 0xf8, 0x52, 0x2a, 0xf4, 0x51, 0x28, 0x99, 0x8a, 0xbb, 0x37, 0xd3, 0xd5, 0x4c, 0x03,
	0xba, 0x31, 0x0e, 0xd2, 0x45, 0xef, 0xa4, 0x98, 0x29, 0x66, 0x39, 0x8f, 0x11, 0x21, 0x48, 0x14,
	0x4d, 0x01, 0x3a, 0x75, 0x59, 0xfd, 0xb2, 0x48, 0xae, 0x56, 0x65, 0x58, 0xb1, 0xc4, 0x97, 0x10,
	0x09, 0x83, 0x7a, 0x40, 0x3f, 0x39, 0xa4, 0xb0, 0xa1, 0xc1, 0x47, 0xa0, 0xf7, 0xd8, 0xf1, 0x22,
	0x59, 0x32, 0x3f, 0xc1, 0x79, 0xd3, 0x03, 0x83, 0xee, 0x8d, 0x69, 0x5c, 0x86, 0xf0, 0x5e, 0xbc,
	0xfd, 0xfe, 0xe3, 0xe3, 0xb9, 0x6d, 0xaf, 0xca, 0xfd, 0x38, 0xee, 0x88, 0x20, 0x29, 0x93, 0xef,
	0x4f, 0x24, 0x16, 0xa1, 0x61, 0x13, 0x8b, 0xf5, 0xfc, 0xf8, 0x80, 0x27, 0x50, 0xb3, 0xe6, 0x94,
	0xe8, 0x67, 0x87, 0x9c, 0xaf, 0x01, 0xd2, 0xe5, 0x69, 0xd3, 0x1a, 0xe0, 0x3c, 0xc9, 0x5a, 0x36,
	0x59, 0x83, 0xee, 0xce, 0x4c, 0x56, 0x9f, 0x23, 0x59, 0x8e, 0x97, 0xfd, 0x1e, 0x50, 0x24, 0x4b,
	0x35, 0xc0, 0xad, 0x71, 0xff, 0x37, 0x95, 0xae, 0xee, 0x6c, 0x19, 0xfa, 0xe8, 0xa4, 0x12, 0xf2,
	0xf8, 0x51, 0x51, 0x77, 0x66, 0x16, 0x35, 0xc1, 0xa1, 0xef, 0x1c, 0x72, 0xe1, 0xb9, 0x30, 0x48,
	0xef, 0x4e, 0xc3, 0x87, 0xb3, 0x19, 0x25, 0x53, 0x75, 0x67, 0xaa, 0x1a, 0xef, 0xa9, 0xed, 0xd5,
	0x13, 0xfa, 0x78, 0xaa, 0x57, 0xa7, 0x6c, 0x0e, 0xfd, 0xea, 0x90, 0xc2, 0x4e, 0x1c, 0xfe, 0xf5,
	0x4c, 0x25, 0xf3, 0xf3, 0xec, 0x5c, 0xdb, 0xa6, 0x01, 0x77, 0xf7, 0x4c, 0xce, 0x54, 0x8e, 0x37,
	0xde, 0xb9, 0xe1, 0x71, 0xfb, 0xe0, 0x90, 0x42, 0x05, 0x3a, 0x80, 0x40, 0x4f, 0xd5, 0x77, 0xf7,
	0x1a, 0x4b, 0x2e, 0x2f, 0x1b, 0x5d, 0x5e, 0x56, 0x1d, 0x5e, 0x5e, 0x6f, 0xdb, 0xa6, 0xae, 0x94,
	0xd6, 0xff, 0xaf, 0x87, 0x7c, 0x7f, 0x9c, 0x6b, 0xf5, 0xb7, 0x43, 0xdc, 0xcc, 0xfc, 0x15, 0x74,
	0xe3, 0x8e, 0x8f, 0xb0, 0xa1, 0x64, 0x1f, 0x34, 0x82, 0xa6, 0x4d, 0x72, 0x71, 0xb8, 0xc7, 0x9b,
	0x4a, 0x77, 0x7d, 0x34, 0x74, 0x46, 0x22, 0xf7, 0xfe, 0xcc, 0x7a, 0x46, 0x92, 0xa9, 0x82, 0xb7,
	0x64, 0xb3, 0x5f, 0xa1, 0x97, 0x38, 0x84, 0x18, 0xf0, 0x66, 0x2a, 0x3c, 0x20, 0x8b, 0xa9, 0x29,
	0xe5, 0xb9, 0xa7, 0x22, 0x59, 0xc8, 0x49, 0x8e, 0xf6, 0xf7, 0xf6, 0x3f, 0xcd, 0xbd, 0xeb, 0xd6,
	0x95, 0x7a, 0xa9, 0x6b, 0x90, 0x28, 0xae, 0x39, 0xa5, 0x87, 0xce, 0xfa, 0xb3, 0x9f, 0x87, 0xc5,
	0x85, 0x5f, 0x87, 0x45, 0xe7, 0xfd, 0x51, 0x71, 0xe1, 0xdb, 0x51, 0xd1, 0x79, 0xcd, 0x23, 0xc5,
	0xb0, 0x05, 0xd8, 0x12, 0x32, 0x32, 0x4c, 0x02, 0xee, 0x29, 0xdd, 0xe6, 0xc7, 0xdf, 0xc1, 0x7e,
	0x99, 0xc7, 0xed, 0x88, 0x23, 0xca, 0xb8, 0xd1, 0x28, 0xd8, 0x76, 0x94, 0xff, 0x04, 0x00, 0x00,
	0xff, 0xff, 0x12, 0x1c, 0x47, 0x1f, 0xf7, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// EndDeviceRegistryClient is the client API for EndDeviceRegistry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EndDeviceRegistryClient interface {
	// Create a new end device within an application.
	//
	// After registering an end device, it also needs to be registered in
	// the NsEndDeviceRegistry that is exposed by the Network Server,
	// the AsEndDeviceRegistry that is exposed by the Application Server,
	// and the JsEndDeviceRegistry that is exposed by the Join Server.
	Create(ctx context.Context, in *CreateEndDeviceRequest, opts ...grpc.CallOption) (*EndDevice, error)
	// Get the end device with the given identifiers, selecting the fields specified
	// in the field mask.
	// More or less fields may be returned, depending on the rights of the caller.
	Get(ctx context.Context, in *GetEndDeviceRequest, opts ...grpc.CallOption) (*EndDevice, error)
	// Get the identifiers of the end device that has the given EUIs registered.
	GetIdentifiersForEUIs(ctx context.Context, in *GetEndDeviceIdentifiersForEUIsRequest, opts ...grpc.CallOption) (*EndDeviceIdentifiers, error)
	// List end devices in the given application.
	// Similar to Get, this selects the fields given by the field mask.
	// More or less fields may be returned, depending on the rights of the caller.
	List(ctx context.Context, in *ListEndDevicesRequest, opts ...grpc.CallOption) (*EndDevices, error)
	// Update the end device, changing the fields specified by the field mask to the provided values.
	Update(ctx context.Context, in *UpdateEndDeviceRequest, opts ...grpc.CallOption) (*EndDevice, error)
	// Delete the end device with the given IDs.
	//
	// Before deleting an end device it first needs to be deleted from the
	// NsEndDeviceRegistry, the AsEndDeviceRegistry and the JsEndDeviceRegistry.
	// This is NOT done automatically.
	Delete(ctx context.Context, in *EndDeviceIdentifiers, opts ...grpc.CallOption) (*types.Empty, error)
}

type endDeviceRegistryClient struct {
	cc *grpc.ClientConn
}

func NewEndDeviceRegistryClient(cc *grpc.ClientConn) EndDeviceRegistryClient {
	return &endDeviceRegistryClient{cc}
}

func (c *endDeviceRegistryClient) Create(ctx context.Context, in *CreateEndDeviceRequest, opts ...grpc.CallOption) (*EndDevice, error) {
	out := new(EndDevice)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.EndDeviceRegistry/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endDeviceRegistryClient) Get(ctx context.Context, in *GetEndDeviceRequest, opts ...grpc.CallOption) (*EndDevice, error) {
	out := new(EndDevice)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.EndDeviceRegistry/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endDeviceRegistryClient) GetIdentifiersForEUIs(ctx context.Context, in *GetEndDeviceIdentifiersForEUIsRequest, opts ...grpc.CallOption) (*EndDeviceIdentifiers, error) {
	out := new(EndDeviceIdentifiers)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.EndDeviceRegistry/GetIdentifiersForEUIs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endDeviceRegistryClient) List(ctx context.Context, in *ListEndDevicesRequest, opts ...grpc.CallOption) (*EndDevices, error) {
	out := new(EndDevices)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.EndDeviceRegistry/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endDeviceRegistryClient) Update(ctx context.Context, in *UpdateEndDeviceRequest, opts ...grpc.CallOption) (*EndDevice, error) {
	out := new(EndDevice)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.EndDeviceRegistry/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endDeviceRegistryClient) Delete(ctx context.Context, in *EndDeviceIdentifiers, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.EndDeviceRegistry/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EndDeviceRegistryServer is the server API for EndDeviceRegistry service.
type EndDeviceRegistryServer interface {
	// Create a new end device within an application.
	//
	// After registering an end device, it also needs to be registered in
	// the NsEndDeviceRegistry that is exposed by the Network Server,
	// the AsEndDeviceRegistry that is exposed by the Application Server,
	// and the JsEndDeviceRegistry that is exposed by the Join Server.
	Create(context.Context, *CreateEndDeviceRequest) (*EndDevice, error)
	// Get the end device with the given identifiers, selecting the fields specified
	// in the field mask.
	// More or less fields may be returned, depending on the rights of the caller.
	Get(context.Context, *GetEndDeviceRequest) (*EndDevice, error)
	// Get the identifiers of the end device that has the given EUIs registered.
	GetIdentifiersForEUIs(context.Context, *GetEndDeviceIdentifiersForEUIsRequest) (*EndDeviceIdentifiers, error)
	// List end devices in the given application.
	// Similar to Get, this selects the fields given by the field mask.
	// More or less fields may be returned, depending on the rights of the caller.
	List(context.Context, *ListEndDevicesRequest) (*EndDevices, error)
	// Update the end device, changing the fields specified by the field mask to the provided values.
	Update(context.Context, *UpdateEndDeviceRequest) (*EndDevice, error)
	// Delete the end device with the given IDs.
	//
	// Before deleting an end device it first needs to be deleted from the
	// NsEndDeviceRegistry, the AsEndDeviceRegistry and the JsEndDeviceRegistry.
	// This is NOT done automatically.
	Delete(context.Context, *EndDeviceIdentifiers) (*types.Empty, error)
}

// UnimplementedEndDeviceRegistryServer can be embedded to have forward compatible implementations.
type UnimplementedEndDeviceRegistryServer struct {
}

func (*UnimplementedEndDeviceRegistryServer) Create(ctx context.Context, req *CreateEndDeviceRequest) (*EndDevice, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedEndDeviceRegistryServer) Get(ctx context.Context, req *GetEndDeviceRequest) (*EndDevice, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedEndDeviceRegistryServer) GetIdentifiersForEUIs(ctx context.Context, req *GetEndDeviceIdentifiersForEUIsRequest) (*EndDeviceIdentifiers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIdentifiersForEUIs not implemented")
}
func (*UnimplementedEndDeviceRegistryServer) List(ctx context.Context, req *ListEndDevicesRequest) (*EndDevices, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedEndDeviceRegistryServer) Update(ctx context.Context, req *UpdateEndDeviceRequest) (*EndDevice, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedEndDeviceRegistryServer) Delete(ctx context.Context, req *EndDeviceIdentifiers) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

func RegisterEndDeviceRegistryServer(s *grpc.Server, srv EndDeviceRegistryServer) {
	s.RegisterService(&_EndDeviceRegistry_serviceDesc, srv)
}

func _EndDeviceRegistry_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEndDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndDeviceRegistryServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.EndDeviceRegistry/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndDeviceRegistryServer).Create(ctx, req.(*CreateEndDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EndDeviceRegistry_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEndDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndDeviceRegistryServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.EndDeviceRegistry/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndDeviceRegistryServer).Get(ctx, req.(*GetEndDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EndDeviceRegistry_GetIdentifiersForEUIs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEndDeviceIdentifiersForEUIsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndDeviceRegistryServer).GetIdentifiersForEUIs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.EndDeviceRegistry/GetIdentifiersForEUIs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndDeviceRegistryServer).GetIdentifiersForEUIs(ctx, req.(*GetEndDeviceIdentifiersForEUIsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EndDeviceRegistry_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEndDevicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndDeviceRegistryServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.EndDeviceRegistry/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndDeviceRegistryServer).List(ctx, req.(*ListEndDevicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EndDeviceRegistry_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEndDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndDeviceRegistryServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.EndDeviceRegistry/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndDeviceRegistryServer).Update(ctx, req.(*UpdateEndDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EndDeviceRegistry_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndDeviceIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndDeviceRegistryServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.EndDeviceRegistry/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndDeviceRegistryServer).Delete(ctx, req.(*EndDeviceIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

var _EndDeviceRegistry_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.lorawan.v3.EndDeviceRegistry",
	HandlerType: (*EndDeviceRegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _EndDeviceRegistry_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _EndDeviceRegistry_Get_Handler,
		},
		{
			MethodName: "GetIdentifiersForEUIs",
			Handler:    _EndDeviceRegistry_GetIdentifiersForEUIs_Handler,
		},
		{
			MethodName: "List",
			Handler:    _EndDeviceRegistry_List_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _EndDeviceRegistry_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _EndDeviceRegistry_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lorawan-stack/api/end_device_services.proto",
}

// EndDeviceTemplateConverterClient is the client API for EndDeviceTemplateConverter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EndDeviceTemplateConverterClient interface {
	// Returns the configured formats to convert from.
	ListFormats(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*EndDeviceTemplateFormats, error)
	// Converts the binary data to a stream of end device templates.
	Convert(ctx context.Context, in *ConvertEndDeviceTemplateRequest, opts ...grpc.CallOption) (EndDeviceTemplateConverter_ConvertClient, error)
}

type endDeviceTemplateConverterClient struct {
	cc *grpc.ClientConn
}

func NewEndDeviceTemplateConverterClient(cc *grpc.ClientConn) EndDeviceTemplateConverterClient {
	return &endDeviceTemplateConverterClient{cc}
}

func (c *endDeviceTemplateConverterClient) ListFormats(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*EndDeviceTemplateFormats, error) {
	out := new(EndDeviceTemplateFormats)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.EndDeviceTemplateConverter/ListFormats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endDeviceTemplateConverterClient) Convert(ctx context.Context, in *ConvertEndDeviceTemplateRequest, opts ...grpc.CallOption) (EndDeviceTemplateConverter_ConvertClient, error) {
	stream, err := c.cc.NewStream(ctx, &_EndDeviceTemplateConverter_serviceDesc.Streams[0], "/ttn.lorawan.v3.EndDeviceTemplateConverter/Convert", opts...)
	if err != nil {
		return nil, err
	}
	x := &endDeviceTemplateConverterConvertClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EndDeviceTemplateConverter_ConvertClient interface {
	Recv() (*EndDeviceTemplate, error)
	grpc.ClientStream
}

type endDeviceTemplateConverterConvertClient struct {
	grpc.ClientStream
}

func (x *endDeviceTemplateConverterConvertClient) Recv() (*EndDeviceTemplate, error) {
	m := new(EndDeviceTemplate)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EndDeviceTemplateConverterServer is the server API for EndDeviceTemplateConverter service.
type EndDeviceTemplateConverterServer interface {
	// Returns the configured formats to convert from.
	ListFormats(context.Context, *types.Empty) (*EndDeviceTemplateFormats, error)
	// Converts the binary data to a stream of end device templates.
	Convert(*ConvertEndDeviceTemplateRequest, EndDeviceTemplateConverter_ConvertServer) error
}

// UnimplementedEndDeviceTemplateConverterServer can be embedded to have forward compatible implementations.
type UnimplementedEndDeviceTemplateConverterServer struct {
}

func (*UnimplementedEndDeviceTemplateConverterServer) ListFormats(ctx context.Context, req *types.Empty) (*EndDeviceTemplateFormats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFormats not implemented")
}
func (*UnimplementedEndDeviceTemplateConverterServer) Convert(req *ConvertEndDeviceTemplateRequest, srv EndDeviceTemplateConverter_ConvertServer) error {
	return status.Errorf(codes.Unimplemented, "method Convert not implemented")
}

func RegisterEndDeviceTemplateConverterServer(s *grpc.Server, srv EndDeviceTemplateConverterServer) {
	s.RegisterService(&_EndDeviceTemplateConverter_serviceDesc, srv)
}

func _EndDeviceTemplateConverter_ListFormats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndDeviceTemplateConverterServer).ListFormats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.EndDeviceTemplateConverter/ListFormats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndDeviceTemplateConverterServer).ListFormats(ctx, req.(*types.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _EndDeviceTemplateConverter_Convert_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConvertEndDeviceTemplateRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EndDeviceTemplateConverterServer).Convert(m, &endDeviceTemplateConverterConvertServer{stream})
}

type EndDeviceTemplateConverter_ConvertServer interface {
	Send(*EndDeviceTemplate) error
	grpc.ServerStream
}

type endDeviceTemplateConverterConvertServer struct {
	grpc.ServerStream
}

func (x *endDeviceTemplateConverterConvertServer) Send(m *EndDeviceTemplate) error {
	return x.ServerStream.SendMsg(m)
}

var _EndDeviceTemplateConverter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.lorawan.v3.EndDeviceTemplateConverter",
	HandlerType: (*EndDeviceTemplateConverterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListFormats",
			Handler:    _EndDeviceTemplateConverter_ListFormats_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Convert",
			Handler:       _EndDeviceTemplateConverter_Convert_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "lorawan-stack/api/end_device_services.proto",
}
