// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lorawan-stack/api/qrcodegenerator.proto

package ttnpb

import (
	context "context"
	fmt "fmt"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QRCodeFormat struct {
	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// The entity fields required to generate the QR code.
	FieldMask            *types.FieldMask `protobuf:"bytes,3,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *QRCodeFormat) Reset()      { *m = QRCodeFormat{} }
func (*QRCodeFormat) ProtoMessage() {}
func (*QRCodeFormat) Descriptor() ([]byte, []int) {
	return fileDescriptor_f400aed11530ba72, []int{0}
}
func (m *QRCodeFormat) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QRCodeFormat.Unmarshal(m, b)
}
func (m *QRCodeFormat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QRCodeFormat.Marshal(b, m, deterministic)
}
func (m *QRCodeFormat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QRCodeFormat.Merge(m, src)
}
func (m *QRCodeFormat) XXX_Size() int {
	return xxx_messageInfo_QRCodeFormat.Size(m)
}
func (m *QRCodeFormat) XXX_DiscardUnknown() {
	xxx_messageInfo_QRCodeFormat.DiscardUnknown(m)
}

var xxx_messageInfo_QRCodeFormat proto.InternalMessageInfo

func (m *QRCodeFormat) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *QRCodeFormat) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *QRCodeFormat) GetFieldMask() *types.FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

type QRCodeFormats struct {
	// Available formats. The map key is the format identifier.
	Formats              map[string]*QRCodeFormat `protobuf:"bytes,1,rep,name=formats,proto3" json:"formats,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *QRCodeFormats) Reset()      { *m = QRCodeFormats{} }
func (*QRCodeFormats) ProtoMessage() {}
func (*QRCodeFormats) Descriptor() ([]byte, []int) {
	return fileDescriptor_f400aed11530ba72, []int{1}
}
func (m *QRCodeFormats) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QRCodeFormats.Unmarshal(m, b)
}
func (m *QRCodeFormats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QRCodeFormats.Marshal(b, m, deterministic)
}
func (m *QRCodeFormats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QRCodeFormats.Merge(m, src)
}
func (m *QRCodeFormats) XXX_Size() int {
	return xxx_messageInfo_QRCodeFormats.Size(m)
}
func (m *QRCodeFormats) XXX_DiscardUnknown() {
	xxx_messageInfo_QRCodeFormats.DiscardUnknown(m)
}

var xxx_messageInfo_QRCodeFormats proto.InternalMessageInfo

func (m *QRCodeFormats) GetFormats() map[string]*QRCodeFormat {
	if m != nil {
		return m.Formats
	}
	return nil
}

type GetQRCodeFormatRequest struct {
	// QR code format identifier. Enumerate available formats with rpc ListFormats in the EndDeviceQRCodeGenerator service.
	FormatId             string   `protobuf:"bytes,1,opt,name=format_id,json=formatId,proto3" json:"format_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetQRCodeFormatRequest) Reset()      { *m = GetQRCodeFormatRequest{} }
func (*GetQRCodeFormatRequest) ProtoMessage() {}
func (*GetQRCodeFormatRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f400aed11530ba72, []int{2}
}
func (m *GetQRCodeFormatRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetQRCodeFormatRequest.Unmarshal(m, b)
}
func (m *GetQRCodeFormatRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetQRCodeFormatRequest.Marshal(b, m, deterministic)
}
func (m *GetQRCodeFormatRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetQRCodeFormatRequest.Merge(m, src)
}
func (m *GetQRCodeFormatRequest) XXX_Size() int {
	return xxx_messageInfo_GetQRCodeFormatRequest.Size(m)
}
func (m *GetQRCodeFormatRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetQRCodeFormatRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetQRCodeFormatRequest proto.InternalMessageInfo

func (m *GetQRCodeFormatRequest) GetFormatId() string {
	if m != nil {
		return m.FormatId
	}
	return ""
}

type GenerateEndDeviceQRCodeRequest struct {
	// QR code format identifier. Enumerate available formats with rpc ListFormats in the EndDeviceQRCodeGenerator service.
	FormatId string `protobuf:"bytes,1,opt,name=format_id,json=formatId,proto3" json:"format_id,omitempty"`
	// End device to use as input to generate the QR code.
	EndDevice *EndDevice `protobuf:"bytes,2,opt,name=end_device,json=endDevice,proto3" json:"end_device,omitempty"`
	// If set, the server will render the QR code image according to these settings.
	Image                *GenerateEndDeviceQRCodeRequest_Image `protobuf:"bytes,3,opt,name=image,proto3" json:"image,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                              `json:"-"`
	XXX_sizecache        int32                                 `json:"-"`
}

func (m *GenerateEndDeviceQRCodeRequest) Reset()      { *m = GenerateEndDeviceQRCodeRequest{} }
func (*GenerateEndDeviceQRCodeRequest) ProtoMessage() {}
func (*GenerateEndDeviceQRCodeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f400aed11530ba72, []int{3}
}
func (m *GenerateEndDeviceQRCodeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GenerateEndDeviceQRCodeRequest.Unmarshal(m, b)
}
func (m *GenerateEndDeviceQRCodeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GenerateEndDeviceQRCodeRequest.Marshal(b, m, deterministic)
}
func (m *GenerateEndDeviceQRCodeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenerateEndDeviceQRCodeRequest.Merge(m, src)
}
func (m *GenerateEndDeviceQRCodeRequest) XXX_Size() int {
	return xxx_messageInfo_GenerateEndDeviceQRCodeRequest.Size(m)
}
func (m *GenerateEndDeviceQRCodeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GenerateEndDeviceQRCodeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GenerateEndDeviceQRCodeRequest proto.InternalMessageInfo

func (m *GenerateEndDeviceQRCodeRequest) GetFormatId() string {
	if m != nil {
		return m.FormatId
	}
	return ""
}

func (m *GenerateEndDeviceQRCodeRequest) GetEndDevice() *EndDevice {
	if m != nil {
		return m.EndDevice
	}
	return nil
}

func (m *GenerateEndDeviceQRCodeRequest) GetImage() *GenerateEndDeviceQRCodeRequest_Image {
	if m != nil {
		return m.Image
	}
	return nil
}

type GenerateEndDeviceQRCodeRequest_Image struct {
	// Requested QR code image dimension in pixels.
	ImageSize            uint32   `protobuf:"varint,1,opt,name=image_size,json=imageSize,proto3" json:"image_size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GenerateEndDeviceQRCodeRequest_Image) Reset()      { *m = GenerateEndDeviceQRCodeRequest_Image{} }
func (*GenerateEndDeviceQRCodeRequest_Image) ProtoMessage() {}
func (*GenerateEndDeviceQRCodeRequest_Image) Descriptor() ([]byte, []int) {
	return fileDescriptor_f400aed11530ba72, []int{3, 0}
}
func (m *GenerateEndDeviceQRCodeRequest_Image) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GenerateEndDeviceQRCodeRequest_Image.Unmarshal(m, b)
}
func (m *GenerateEndDeviceQRCodeRequest_Image) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GenerateEndDeviceQRCodeRequest_Image.Marshal(b, m, deterministic)
}
func (m *GenerateEndDeviceQRCodeRequest_Image) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenerateEndDeviceQRCodeRequest_Image.Merge(m, src)
}
func (m *GenerateEndDeviceQRCodeRequest_Image) XXX_Size() int {
	return xxx_messageInfo_GenerateEndDeviceQRCodeRequest_Image.Size(m)
}
func (m *GenerateEndDeviceQRCodeRequest_Image) XXX_DiscardUnknown() {
	xxx_messageInfo_GenerateEndDeviceQRCodeRequest_Image.DiscardUnknown(m)
}

var xxx_messageInfo_GenerateEndDeviceQRCodeRequest_Image proto.InternalMessageInfo

func (m *GenerateEndDeviceQRCodeRequest_Image) GetImageSize() uint32 {
	if m != nil {
		return m.ImageSize
	}
	return 0
}

type GenerateQRCodeResponse struct {
	// Text representation of the QR code contents.
	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	// QR code in PNG format, if requested.
	Image                *Picture `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GenerateQRCodeResponse) Reset()      { *m = GenerateQRCodeResponse{} }
func (*GenerateQRCodeResponse) ProtoMessage() {}
func (*GenerateQRCodeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f400aed11530ba72, []int{4}
}
func (m *GenerateQRCodeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GenerateQRCodeResponse.Unmarshal(m, b)
}
func (m *GenerateQRCodeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GenerateQRCodeResponse.Marshal(b, m, deterministic)
}
func (m *GenerateQRCodeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenerateQRCodeResponse.Merge(m, src)
}
func (m *GenerateQRCodeResponse) XXX_Size() int {
	return xxx_messageInfo_GenerateQRCodeResponse.Size(m)
}
func (m *GenerateQRCodeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GenerateQRCodeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GenerateQRCodeResponse proto.InternalMessageInfo

func (m *GenerateQRCodeResponse) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *GenerateQRCodeResponse) GetImage() *Picture {
	if m != nil {
		return m.Image
	}
	return nil
}

func init() {
	proto.RegisterType((*QRCodeFormat)(nil), "ttn.lorawan.v3.QRCodeFormat")
	golang_proto.RegisterType((*QRCodeFormat)(nil), "ttn.lorawan.v3.QRCodeFormat")
	proto.RegisterType((*QRCodeFormats)(nil), "ttn.lorawan.v3.QRCodeFormats")
	golang_proto.RegisterType((*QRCodeFormats)(nil), "ttn.lorawan.v3.QRCodeFormats")
	proto.RegisterMapType((map[string]*QRCodeFormat)(nil), "ttn.lorawan.v3.QRCodeFormats.FormatsEntry")
	golang_proto.RegisterMapType((map[string]*QRCodeFormat)(nil), "ttn.lorawan.v3.QRCodeFormats.FormatsEntry")
	proto.RegisterType((*GetQRCodeFormatRequest)(nil), "ttn.lorawan.v3.GetQRCodeFormatRequest")
	golang_proto.RegisterType((*GetQRCodeFormatRequest)(nil), "ttn.lorawan.v3.GetQRCodeFormatRequest")
	proto.RegisterType((*GenerateEndDeviceQRCodeRequest)(nil), "ttn.lorawan.v3.GenerateEndDeviceQRCodeRequest")
	golang_proto.RegisterType((*GenerateEndDeviceQRCodeRequest)(nil), "ttn.lorawan.v3.GenerateEndDeviceQRCodeRequest")
	proto.RegisterType((*GenerateEndDeviceQRCodeRequest_Image)(nil), "ttn.lorawan.v3.GenerateEndDeviceQRCodeRequest.Image")
	golang_proto.RegisterType((*GenerateEndDeviceQRCodeRequest_Image)(nil), "ttn.lorawan.v3.GenerateEndDeviceQRCodeRequest.Image")
	proto.RegisterType((*GenerateQRCodeResponse)(nil), "ttn.lorawan.v3.GenerateQRCodeResponse")
	golang_proto.RegisterType((*GenerateQRCodeResponse)(nil), "ttn.lorawan.v3.GenerateQRCodeResponse")
}

func init() {
	proto.RegisterFile("lorawan-stack/api/qrcodegenerator.proto", fileDescriptor_f400aed11530ba72)
}
func init() {
	golang_proto.RegisterFile("lorawan-stack/api/qrcodegenerator.proto", fileDescriptor_f400aed11530ba72)
}

var fileDescriptor_f400aed11530ba72 = []byte{
	// 791 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0x4f, 0x6f, 0xe3, 0x44,
	0x14, 0xef, 0x24, 0x0d, 0x69, 0x26, 0xbb, 0x68, 0x35, 0x12, 0x8b, 0xf1, 0xee, 0x7a, 0x23, 0xab,
	0x74, 0x93, 0xb0, 0xb6, 0xc1, 0xe5, 0xc0, 0xf6, 0xb2, 0xc2, 0x6c, 0x37, 0x2a, 0x02, 0x09, 0xcc,
	0x05, 0x51, 0xed, 0x46, 0x93, 0x78, 0xe2, 0x5a, 0x49, 0x66, 0xdc, 0xf1, 0x24, 0x6d, 0x5a, 0x55,
	0x42, 0x88, 0x13, 0x27, 0x04, 0xe2, 0xc2, 0x47, 0xe0, 0x53, 0x70, 0xe4, 0xce, 0x85, 0x0b, 0x07,
	0x5a, 0x0e, 0x3d, 0x72, 0xce, 0x09, 0x79, 0xc6, 0x6e, 0xf3, 0xa7, 0x44, 0x20, 0x71, 0xf2, 0x1b,
	0xbf, 0xdf, 0x7b, 0xef, 0xf7, 0xfe, 0xc2, 0x47, 0x03, 0xc6, 0xf1, 0x11, 0xa6, 0x56, 0x22, 0x70,
	0xb7, 0xef, 0xe0, 0x38, 0x72, 0x0e, 0x79, 0x97, 0x05, 0x24, 0x24, 0x94, 0x70, 0x2c, 0x18, 0xb7,
	0x63, 0xce, 0x04, 0x43, 0xaf, 0x0a, 0x41, 0xed, 0x0c, 0x6c, 0x8f, 0xb7, 0xf5, 0xf7, 0xc3, 0x48,
	0x1c, 0x8c, 0x3a, 0x76, 0x97, 0x0d, 0x1d, 0x42, 0xc7, 0x6c, 0x12, 0x73, 0x76, 0x3c, 0x71, 0x24,
	0xb8, 0x6b, 0x85, 0x84, 0x5a, 0x63, 0x3c, 0x88, 0x02, 0x2c, 0x88, 0xb3, 0x24, 0x28, 0x97, 0xba,
	0x35, 0xe3, 0x22, 0x64, 0x21, 0x53, 0xc6, 0x9d, 0x51, 0x4f, 0xbe, 0xe4, 0x43, 0x4a, 0x19, 0xfc,
	0x7e, 0xc8, 0x58, 0x38, 0x20, 0x92, 0x23, 0xa6, 0x94, 0x09, 0x2c, 0x22, 0x46, 0x93, 0x4c, 0x7b,
	0x2f, 0xd3, 0x5e, 0xf9, 0x20, 0xc3, 0x58, 0x4c, 0x32, 0x65, 0x6d, 0x51, 0xd9, 0x8b, 0xc8, 0x20,
	0x68, 0x0f, 0x71, 0xd2, 0xcf, 0x10, 0xe6, 0x72, 0x1d, 0x08, 0x0d, 0xda, 0x01, 0x19, 0x47, 0xdd,
	0x9c, 0xef, 0xc3, 0x65, 0x4c, 0x1c, 0x75, 0xc5, 0x88, 0x67, 0x00, 0xf3, 0x3b, 0x00, 0x6f, 0x7d,
	0xea, 0x7f, 0xc0, 0x02, 0xf2, 0x9c, 0xf1, 0x21, 0x16, 0xe8, 0x1e, 0x5c, 0xa7, 0x78, 0x48, 0x34,
	0x50, 0x03, 0xf5, 0x8a, 0x57, 0x9e, 0x7a, 0xeb, 0xbc, 0xa0, 0x05, 0xbe, 0xfc, 0x89, 0x9a, 0xb0,
	0x1a, 0x90, 0xa4, 0xcb, 0xa3, 0x38, 0xcd, 0x43, 0x2b, 0x48, 0xcc, 0xc6, 0xd4, 0x2b, 0xf1, 0xa2,
	0xf6, 0x0b, 0xf0, 0x67, 0x95, 0xe8, 0x09, 0x84, 0xd7, 0x94, 0xb5, 0x62, 0x0d, 0xd4, 0xab, 0xae,
	0x6e, 0xab, 0xac, 0xec, 0x3c, 0x2b, 0xfb, 0x79, 0x0a, 0xf9, 0x18, 0x27, 0x7d, 0xbf, 0xd2, 0xcb,
	0x45, 0xf3, 0x77, 0x00, 0x6f, 0xcf, 0x92, 0x4a, 0x10, 0x87, 0xe5, 0x9e, 0x12, 0x35, 0x50, 0x2b,
	0xd6, 0xab, 0x6e, 0xd3, 0x9e, 0x6f, 0xae, 0x3d, 0x87, 0xb7, 0xb3, 0xef, 0x2e, 0x15, 0x7c, 0xe2,
	0x3d, 0x9e, 0x7a, 0x8d, 0x1f, 0xc1, 0x96, 0xb9, 0xc9, 0x4d, 0x6d, 0xd3, 0x35, 0x5e, 0xee, 0x63,
	0xeb, 0xe4, 0x6d, 0xeb, 0xc9, 0x8b, 0xfa, 0xd3, 0x9d, 0x7d, 0xeb, 0xc5, 0xd3, 0xfc, 0xd9, 0x38,
	0x75, 0x1f, 0x9f, 0x6d, 0xfa, 0x79, 0x20, 0xfd, 0x73, 0x78, 0x6b, 0xd6, 0x0d, 0xba, 0x03, 0x8b,
	0x7d, 0x32, 0x51, 0x85, 0xf1, 0x53, 0x11, 0xb9, 0xb0, 0x34, 0xc6, 0x83, 0x11, 0x91, 0x85, 0xa8,
	0xba, 0xf7, 0x57, 0x71, 0xf2, 0x15, 0x74, 0xa7, 0xf0, 0x1e, 0x30, 0x5f, 0xc2, 0xbb, 0x2d, 0x22,
	0xe6, 0xb4, 0xe4, 0x70, 0x44, 0x12, 0x81, 0x9e, 0xc1, 0x8a, 0x0a, 0xdf, 0x8e, 0x82, 0xac, 0x05,
	0x8f, 0xa6, 0xde, 0xbf, 0x23, 0xbe, 0xa1, 0x2c, 0xf7, 0x02, 0xf3, 0xa7, 0x02, 0x34, 0x5a, 0x6a,
	0x19, 0xc8, 0x2e, 0x0d, 0x9e, 0xc9, 0x89, 0x50, 0xe1, 0xfe, 0xd7, 0x40, 0xc8, 0x83, 0xf0, 0x7a,
	0xe4, 0xb2, 0x2a, 0xbc, 0xb1, 0x58, 0x85, 0x2b, 0x06, 0x72, 0x52, 0xbe, 0x01, 0x85, 0x3b, 0xc0,
	0xaf, 0x90, 0xfc, 0x27, 0xfa, 0x10, 0x96, 0xa2, 0x21, 0x0e, 0x49, 0x36, 0x22, 0xef, 0x2e, 0x9a,
	0xaf, 0x4e, 0xc4, 0xde, 0x4b, 0x6d, 0x7d, 0xe5, 0x42, 0x77, 0x61, 0x49, 0xbe, 0x51, 0x03, 0x42,
	0xf9, 0xa7, 0x9d, 0x44, 0x27, 0x6a, 0x96, 0x6f, 0x7b, 0x70, 0xea, 0x95, 0x9b, 0x25, 0xed, 0xb2,
	0x5c, 0x87, 0x7e, 0x45, 0x6a, 0x3f, 0x8b, 0x4e, 0x88, 0xb9, 0x9f, 0x36, 0x43, 0x85, 0xc8, 0x3d,
	0x27, 0x31, 0xa3, 0x09, 0x41, 0x08, 0xae, 0x0b, 0x72, 0x2c, 0xb2, 0x8e, 0x4b, 0x19, 0x59, 0x39,
	0x5b, 0x95, 0xec, 0xeb, 0x8b, 0x6c, 0x3f, 0x51, 0xdb, 0x95, 0x11, 0x72, 0x7f, 0x28, 0x42, 0x6d,
	0x81, 0x78, 0x2b, 0xbf, 0x52, 0xe8, 0x6b, 0x00, 0x2b, 0x2d, 0x22, 0xb2, 0xc5, 0xdb, 0x5a, 0x4e,
	0xfc, 0xa6, 0x11, 0xd1, 0x57, 0x4e, 0x99, 0xf9, 0xce, 0x57, 0xbf, 0xfe, 0xf9, 0x7d, 0xe1, 0x2d,
	0xd4, 0x70, 0x0e, 0xb9, 0x95, 0x1e, 0xc5, 0x24, 0x3d, 0x0a, 0x96, 0xea, 0x50, 0xe2, 0x64, 0xb3,
	0xed, 0x9c, 0x5e, 0x35, 0xff, 0x0c, 0xf5, 0x61, 0xf5, 0xa3, 0x28, 0x11, 0xf9, 0xaa, 0xdd, 0x5d,
	0xda, 0xd1, 0xdd, 0xf4, 0x2c, 0xe9, 0x0f, 0x56, 0x6e, 0x9c, 0xf9, 0xa6, 0x0c, 0xfc, 0x10, 0x3d,
	0x58, 0x19, 0x38, 0xcd, 0x79, 0x23, 0x2f, 0x37, 0xb2, 0xff, 0x5b, 0xaf, 0xf5, 0xad, 0x7f, 0xc2,
	0xcf, 0x37, 0xce, 0xac, 0x49, 0x2e, 0xba, 0xf9, 0xda, 0x8d, 0x5c, 0x76, 0x40, 0xd3, 0xdb, 0xfb,
	0xed, 0x0f, 0x63, 0xed, 0xcb, 0x73, 0x03, 0x5c, 0x9e, 0x1b, 0x6b, 0x7f, 0x9d, 0x1b, 0xe0, 0xdb,
	0x0b, 0x63, 0xed, 0xe7, 0x0b, 0x03, 0x7c, 0xe1, 0x84, 0xcc, 0x16, 0x07, 0x44, 0x1c, 0x44, 0x34,
	0x4c, 0x6c, 0x4a, 0xc4, 0x11, 0xe3, 0x7d, 0x67, 0xfe, 0x8c, 0x8e, 0xb7, 0x9d, 0xb8, 0x1f, 0x3a,
	0x42, 0xd0, 0xb8, 0xd3, 0x79, 0x45, 0xd6, 0x69, 0xfb, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0x16,
	0xea, 0x1d, 0x66, 0x97, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// EndDeviceQRCodeGeneratorClient is the client API for EndDeviceQRCodeGenerator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EndDeviceQRCodeGeneratorClient interface {
	// Return the QR code format.
	GetFormat(ctx context.Context, in *GetQRCodeFormatRequest, opts ...grpc.CallOption) (*QRCodeFormat, error)
	// Returns the supported formats.
	ListFormats(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*QRCodeFormats, error)
	// Generates a QR code.
	Generate(ctx context.Context, in *GenerateEndDeviceQRCodeRequest, opts ...grpc.CallOption) (*GenerateQRCodeResponse, error)
}

type endDeviceQRCodeGeneratorClient struct {
	cc *grpc.ClientConn
}

func NewEndDeviceQRCodeGeneratorClient(cc *grpc.ClientConn) EndDeviceQRCodeGeneratorClient {
	return &endDeviceQRCodeGeneratorClient{cc}
}

func (c *endDeviceQRCodeGeneratorClient) GetFormat(ctx context.Context, in *GetQRCodeFormatRequest, opts ...grpc.CallOption) (*QRCodeFormat, error) {
	out := new(QRCodeFormat)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.EndDeviceQRCodeGenerator/GetFormat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endDeviceQRCodeGeneratorClient) ListFormats(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*QRCodeFormats, error) {
	out := new(QRCodeFormats)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.EndDeviceQRCodeGenerator/ListFormats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endDeviceQRCodeGeneratorClient) Generate(ctx context.Context, in *GenerateEndDeviceQRCodeRequest, opts ...grpc.CallOption) (*GenerateQRCodeResponse, error) {
	out := new(GenerateQRCodeResponse)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.EndDeviceQRCodeGenerator/Generate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EndDeviceQRCodeGeneratorServer is the server API for EndDeviceQRCodeGenerator service.
type EndDeviceQRCodeGeneratorServer interface {
	// Return the QR code format.
	GetFormat(context.Context, *GetQRCodeFormatRequest) (*QRCodeFormat, error)
	// Returns the supported formats.
	ListFormats(context.Context, *types.Empty) (*QRCodeFormats, error)
	// Generates a QR code.
	Generate(context.Context, *GenerateEndDeviceQRCodeRequest) (*GenerateQRCodeResponse, error)
}

// UnimplementedEndDeviceQRCodeGeneratorServer can be embedded to have forward compatible implementations.
type UnimplementedEndDeviceQRCodeGeneratorServer struct {
}

func (*UnimplementedEndDeviceQRCodeGeneratorServer) GetFormat(ctx context.Context, req *GetQRCodeFormatRequest) (*QRCodeFormat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFormat not implemented")
}
func (*UnimplementedEndDeviceQRCodeGeneratorServer) ListFormats(ctx context.Context, req *types.Empty) (*QRCodeFormats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFormats not implemented")
}
func (*UnimplementedEndDeviceQRCodeGeneratorServer) Generate(ctx context.Context, req *GenerateEndDeviceQRCodeRequest) (*GenerateQRCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Generate not implemented")
}

func RegisterEndDeviceQRCodeGeneratorServer(s *grpc.Server, srv EndDeviceQRCodeGeneratorServer) {
	s.RegisterService(&_EndDeviceQRCodeGenerator_serviceDesc, srv)
}

func _EndDeviceQRCodeGenerator_GetFormat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQRCodeFormatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndDeviceQRCodeGeneratorServer).GetFormat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.EndDeviceQRCodeGenerator/GetFormat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndDeviceQRCodeGeneratorServer).GetFormat(ctx, req.(*GetQRCodeFormatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EndDeviceQRCodeGenerator_ListFormats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndDeviceQRCodeGeneratorServer).ListFormats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.EndDeviceQRCodeGenerator/ListFormats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndDeviceQRCodeGeneratorServer).ListFormats(ctx, req.(*types.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _EndDeviceQRCodeGenerator_Generate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateEndDeviceQRCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndDeviceQRCodeGeneratorServer).Generate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.EndDeviceQRCodeGenerator/Generate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndDeviceQRCodeGeneratorServer).Generate(ctx, req.(*GenerateEndDeviceQRCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _EndDeviceQRCodeGenerator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.lorawan.v3.EndDeviceQRCodeGenerator",
	HandlerType: (*EndDeviceQRCodeGeneratorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFormat",
			Handler:    _EndDeviceQRCodeGenerator_GetFormat_Handler,
		},
		{
			MethodName: "ListFormats",
			Handler:    _EndDeviceQRCodeGenerator_ListFormats_Handler,
		},
		{
			MethodName: "Generate",
			Handler:    _EndDeviceQRCodeGenerator_Generate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lorawan-stack/api/qrcodegenerator.proto",
}

func (this *QRCodeFormat) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QRCodeFormat{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`FieldMask:` + strings.Replace(fmt.Sprintf("%v", this.FieldMask), "FieldMask", "types.FieldMask", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *QRCodeFormats) String() string {
	if this == nil {
		return "nil"
	}
	keysForFormats := make([]string, 0, len(this.Formats))
	for k := range this.Formats {
		keysForFormats = append(keysForFormats, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForFormats)
	mapStringForFormats := "map[string]*QRCodeFormat{"
	for _, k := range keysForFormats {
		mapStringForFormats += fmt.Sprintf("%v: %v,", k, this.Formats[k])
	}
	mapStringForFormats += "}"
	s := strings.Join([]string{`&QRCodeFormats{`,
		`Formats:` + mapStringForFormats + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetQRCodeFormatRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetQRCodeFormatRequest{`,
		`FormatId:` + fmt.Sprintf("%v", this.FormatId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GenerateEndDeviceQRCodeRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GenerateEndDeviceQRCodeRequest{`,
		`FormatId:` + fmt.Sprintf("%v", this.FormatId) + `,`,
		`EndDevice:` + strings.Replace(fmt.Sprintf("%v", this.EndDevice), "EndDevice", "EndDevice", 1) + `,`,
		`Image:` + strings.Replace(fmt.Sprintf("%v", this.Image), "GenerateEndDeviceQRCodeRequest_Image", "GenerateEndDeviceQRCodeRequest_Image", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GenerateEndDeviceQRCodeRequest_Image) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GenerateEndDeviceQRCodeRequest_Image{`,
		`ImageSize:` + fmt.Sprintf("%v", this.ImageSize) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GenerateQRCodeResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GenerateQRCodeResponse{`,
		`Text:` + fmt.Sprintf("%v", this.Text) + `,`,
		`Image:` + strings.Replace(fmt.Sprintf("%v", this.Image), "Picture", "Picture", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringQrcodegenerator(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
