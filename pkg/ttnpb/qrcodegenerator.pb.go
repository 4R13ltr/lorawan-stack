// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lorawan-stack/api/qrcodegenerator.proto

package ttnpb

import (
	context "context"
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"

	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QRCodeFormat struct {
	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// The entity fields required to generate the QR code.
	FieldMask            *types.FieldMask `protobuf:"bytes,3,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *QRCodeFormat) Reset()      { *m = QRCodeFormat{} }
func (*QRCodeFormat) ProtoMessage() {}
func (*QRCodeFormat) Descriptor() ([]byte, []int) {
	return fileDescriptor_f400aed11530ba72, []int{0}
}
func (m *QRCodeFormat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QRCodeFormat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QRCodeFormat.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QRCodeFormat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QRCodeFormat.Merge(m, src)
}
func (m *QRCodeFormat) XXX_Size() int {
	return m.Size()
}
func (m *QRCodeFormat) XXX_DiscardUnknown() {
	xxx_messageInfo_QRCodeFormat.DiscardUnknown(m)
}

var xxx_messageInfo_QRCodeFormat proto.InternalMessageInfo

func (m *QRCodeFormat) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *QRCodeFormat) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *QRCodeFormat) GetFieldMask() *types.FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

type QRCodeFormats struct {
	// Available formats. The map key is the format identifier.
	Formats              map[string]*QRCodeFormat `protobuf:"bytes,1,rep,name=formats,proto3" json:"formats,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *QRCodeFormats) Reset()      { *m = QRCodeFormats{} }
func (*QRCodeFormats) ProtoMessage() {}
func (*QRCodeFormats) Descriptor() ([]byte, []int) {
	return fileDescriptor_f400aed11530ba72, []int{1}
}
func (m *QRCodeFormats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QRCodeFormats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QRCodeFormats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QRCodeFormats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QRCodeFormats.Merge(m, src)
}
func (m *QRCodeFormats) XXX_Size() int {
	return m.Size()
}
func (m *QRCodeFormats) XXX_DiscardUnknown() {
	xxx_messageInfo_QRCodeFormats.DiscardUnknown(m)
}

var xxx_messageInfo_QRCodeFormats proto.InternalMessageInfo

func (m *QRCodeFormats) GetFormats() map[string]*QRCodeFormat {
	if m != nil {
		return m.Formats
	}
	return nil
}

type GetQRCodeFormatRequest struct {
	// QR code format identifier. Enumerate available formats with rpc ListFormats in the EndDeviceQRCodeGenerator service.
	FormatID             string   `protobuf:"bytes,1,opt,name=format_id,json=formatId,proto3" json:"format_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetQRCodeFormatRequest) Reset()      { *m = GetQRCodeFormatRequest{} }
func (*GetQRCodeFormatRequest) ProtoMessage() {}
func (*GetQRCodeFormatRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f400aed11530ba72, []int{2}
}
func (m *GetQRCodeFormatRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetQRCodeFormatRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetQRCodeFormatRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetQRCodeFormatRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetQRCodeFormatRequest.Merge(m, src)
}
func (m *GetQRCodeFormatRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetQRCodeFormatRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetQRCodeFormatRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetQRCodeFormatRequest proto.InternalMessageInfo

func (m *GetQRCodeFormatRequest) GetFormatID() string {
	if m != nil {
		return m.FormatID
	}
	return ""
}

type GenerateEndDeviceQRCodeRequest struct {
	// QR code format identifier. Enumerate available formats with rpc ListFormats in the EndDeviceQRCodeGenerator service.
	FormatID string `protobuf:"bytes,1,opt,name=format_id,json=formatId,proto3" json:"format_id,omitempty"`
	// End device to use as input to generate the QR code.
	EndDevice EndDevice `protobuf:"bytes,2,opt,name=end_device,json=endDevice,proto3" json:"end_device"`
	// If set, the server will render the QR code image according to these settings.
	Image                *GenerateEndDeviceQRCodeRequest_Image `protobuf:"bytes,3,opt,name=image,proto3" json:"image,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                              `json:"-"`
	XXX_sizecache        int32                                 `json:"-"`
}

func (m *GenerateEndDeviceQRCodeRequest) Reset()      { *m = GenerateEndDeviceQRCodeRequest{} }
func (*GenerateEndDeviceQRCodeRequest) ProtoMessage() {}
func (*GenerateEndDeviceQRCodeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f400aed11530ba72, []int{3}
}
func (m *GenerateEndDeviceQRCodeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenerateEndDeviceQRCodeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenerateEndDeviceQRCodeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenerateEndDeviceQRCodeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenerateEndDeviceQRCodeRequest.Merge(m, src)
}
func (m *GenerateEndDeviceQRCodeRequest) XXX_Size() int {
	return m.Size()
}
func (m *GenerateEndDeviceQRCodeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GenerateEndDeviceQRCodeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GenerateEndDeviceQRCodeRequest proto.InternalMessageInfo

func (m *GenerateEndDeviceQRCodeRequest) GetFormatID() string {
	if m != nil {
		return m.FormatID
	}
	return ""
}

func (m *GenerateEndDeviceQRCodeRequest) GetEndDevice() EndDevice {
	if m != nil {
		return m.EndDevice
	}
	return EndDevice{}
}

func (m *GenerateEndDeviceQRCodeRequest) GetImage() *GenerateEndDeviceQRCodeRequest_Image {
	if m != nil {
		return m.Image
	}
	return nil
}

type GenerateEndDeviceQRCodeRequest_Image struct {
	// Requested QR code image dimension in pixels.
	ImageSize            uint32   `protobuf:"varint,1,opt,name=image_size,json=imageSize,proto3" json:"image_size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GenerateEndDeviceQRCodeRequest_Image) Reset()      { *m = GenerateEndDeviceQRCodeRequest_Image{} }
func (*GenerateEndDeviceQRCodeRequest_Image) ProtoMessage() {}
func (*GenerateEndDeviceQRCodeRequest_Image) Descriptor() ([]byte, []int) {
	return fileDescriptor_f400aed11530ba72, []int{3, 0}
}
func (m *GenerateEndDeviceQRCodeRequest_Image) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenerateEndDeviceQRCodeRequest_Image) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenerateEndDeviceQRCodeRequest_Image.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenerateEndDeviceQRCodeRequest_Image) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenerateEndDeviceQRCodeRequest_Image.Merge(m, src)
}
func (m *GenerateEndDeviceQRCodeRequest_Image) XXX_Size() int {
	return m.Size()
}
func (m *GenerateEndDeviceQRCodeRequest_Image) XXX_DiscardUnknown() {
	xxx_messageInfo_GenerateEndDeviceQRCodeRequest_Image.DiscardUnknown(m)
}

var xxx_messageInfo_GenerateEndDeviceQRCodeRequest_Image proto.InternalMessageInfo

func (m *GenerateEndDeviceQRCodeRequest_Image) GetImageSize() uint32 {
	if m != nil {
		return m.ImageSize
	}
	return 0
}

type GenerateQRCodeResponse struct {
	// Text representation of the QR code contents.
	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	// QR code in PNG format, if requested.
	Image                *Picture `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GenerateQRCodeResponse) Reset()      { *m = GenerateQRCodeResponse{} }
func (*GenerateQRCodeResponse) ProtoMessage() {}
func (*GenerateQRCodeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f400aed11530ba72, []int{4}
}
func (m *GenerateQRCodeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenerateQRCodeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenerateQRCodeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenerateQRCodeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenerateQRCodeResponse.Merge(m, src)
}
func (m *GenerateQRCodeResponse) XXX_Size() int {
	return m.Size()
}
func (m *GenerateQRCodeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GenerateQRCodeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GenerateQRCodeResponse proto.InternalMessageInfo

func (m *GenerateQRCodeResponse) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *GenerateQRCodeResponse) GetImage() *Picture {
	if m != nil {
		return m.Image
	}
	return nil
}

func init() {
	proto.RegisterType((*QRCodeFormat)(nil), "ttn.lorawan.v3.QRCodeFormat")
	golang_proto.RegisterType((*QRCodeFormat)(nil), "ttn.lorawan.v3.QRCodeFormat")
	proto.RegisterType((*QRCodeFormats)(nil), "ttn.lorawan.v3.QRCodeFormats")
	golang_proto.RegisterType((*QRCodeFormats)(nil), "ttn.lorawan.v3.QRCodeFormats")
	proto.RegisterMapType((map[string]*QRCodeFormat)(nil), "ttn.lorawan.v3.QRCodeFormats.FormatsEntry")
	golang_proto.RegisterMapType((map[string]*QRCodeFormat)(nil), "ttn.lorawan.v3.QRCodeFormats.FormatsEntry")
	proto.RegisterType((*GetQRCodeFormatRequest)(nil), "ttn.lorawan.v3.GetQRCodeFormatRequest")
	golang_proto.RegisterType((*GetQRCodeFormatRequest)(nil), "ttn.lorawan.v3.GetQRCodeFormatRequest")
	proto.RegisterType((*GenerateEndDeviceQRCodeRequest)(nil), "ttn.lorawan.v3.GenerateEndDeviceQRCodeRequest")
	golang_proto.RegisterType((*GenerateEndDeviceQRCodeRequest)(nil), "ttn.lorawan.v3.GenerateEndDeviceQRCodeRequest")
	proto.RegisterType((*GenerateEndDeviceQRCodeRequest_Image)(nil), "ttn.lorawan.v3.GenerateEndDeviceQRCodeRequest.Image")
	golang_proto.RegisterType((*GenerateEndDeviceQRCodeRequest_Image)(nil), "ttn.lorawan.v3.GenerateEndDeviceQRCodeRequest.Image")
	proto.RegisterType((*GenerateQRCodeResponse)(nil), "ttn.lorawan.v3.GenerateQRCodeResponse")
	golang_proto.RegisterType((*GenerateQRCodeResponse)(nil), "ttn.lorawan.v3.GenerateQRCodeResponse")
}

func init() {
	proto.RegisterFile("lorawan-stack/api/qrcodegenerator.proto", fileDescriptor_f400aed11530ba72)
}
func init() {
	golang_proto.RegisterFile("lorawan-stack/api/qrcodegenerator.proto", fileDescriptor_f400aed11530ba72)
}

var fileDescriptor_f400aed11530ba72 = []byte{
	// 903 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x54, 0x3d, 0x6c, 0xdb, 0x46,
	0x14, 0xe6, 0x49, 0x56, 0x6d, 0x9d, 0x9c, 0x22, 0x38, 0xa0, 0x29, 0xcb, 0x24, 0x27, 0x81, 0x70,
	0x5d, 0xd9, 0x0d, 0xc9, 0x56, 0xee, 0xd0, 0x78, 0x09, 0xca, 0xc6, 0x36, 0x5c, 0xb4, 0x40, 0xca,
	0x2e, 0x45, 0x83, 0xd4, 0xa0, 0xc5, 0x33, 0x4d, 0x48, 0xe2, 0xd1, 0xe4, 0x49, 0x89, 0x1c, 0x04,
	0x08, 0x8a, 0x0e, 0x41, 0xa7, 0x02, 0x45, 0x81, 0xa0, 0x53, 0x96, 0x02, 0x19, 0x33, 0x7a, 0xf4,
	0xe8, 0x31, 0x40, 0x97, 0x4c, 0x41, 0x44, 0x76, 0xf0, 0x98, 0x31, 0xd0, 0x54, 0x90, 0x77, 0x74,
	0xf4, 0x93, 0x0a, 0xed, 0x90, 0x49, 0xef, 0xf4, 0x3e, 0x7e, 0xef, 0x7b, 0xbf, 0xf0, 0xa3, 0x36,
	0x0d, 0xed, 0xdb, 0xb6, 0xaf, 0x45, 0xcc, 0x6e, 0xb6, 0x0c, 0x3b, 0xf0, 0x8c, 0x83, 0xb0, 0x49,
	0x1d, 0xe2, 0x12, 0x9f, 0x84, 0x36, 0xa3, 0xa1, 0x1e, 0x84, 0x94, 0x51, 0xf4, 0x2e, 0x63, 0xbe,
	0x2e, 0xc0, 0x7a, 0x6f, 0x4d, 0xf9, 0xc2, 0xf5, 0xd8, 0x7e, 0x77, 0x57, 0x6f, 0xd2, 0x8e, 0x41,
	0xfc, 0x1e, 0xed, 0x07, 0x21, 0xbd, 0xd3, 0x37, 0x32, 0x70, 0x53, 0x73, 0x89, 0xaf, 0xf5, 0xec,
	0xb6, 0xe7, 0xd8, 0x8c, 0x18, 0x53, 0x06, 0xa7, 0x54, 0xb4, 0x11, 0x0a, 0x97, 0xba, 0x94, 0x7f,
	0xbc, 0xdb, 0xdd, 0xcb, 0x5e, 0xd9, 0x23, 0xb3, 0x04, 0xfc, 0x92, 0x4b, 0xa9, 0xdb, 0x26, 0x99,
	0x46, 0xdb, 0xf7, 0x29, 0xb3, 0x99, 0x47, 0xfd, 0x48, 0x78, 0x2f, 0x0a, 0xef, 0x19, 0x07, 0xe9,
	0x04, 0xac, 0x2f, 0x9c, 0xb5, 0x49, 0xe7, 0x9e, 0x47, 0xda, 0xce, 0x4e, 0xc7, 0x8e, 0x5a, 0x02,
	0xa1, 0x4e, 0xd7, 0x81, 0xf8, 0xce, 0x8e, 0x43, 0x7a, 0x5e, 0x33, 0xd7, 0x5b, 0x9d, 0xc6, 0x04,
	0x5e, 0x93, 0x75, 0x43, 0x01, 0x50, 0x1f, 0x02, 0xb8, 0xf8, 0xad, 0xf5, 0x25, 0x75, 0xc8, 0x26,
	0x0d, 0x3b, 0x36, 0x43, 0x17, 0xe1, 0x9c, 0x6f, 0x77, 0x88, 0x0c, 0x6a, 0xa0, 0x5e, 0x36, 0xe7,
	0x87, 0xe6, 0x5c, 0x58, 0x90, 0x1d, 0x2b, 0xfb, 0x13, 0xad, 0xc2, 0x8a, 0x43, 0xa2, 0x66, 0xe8,
	0x05, 0x69, 0x1e, 0x72, 0x21, 0xc3, 0x2c, 0x0c, 0xcd, 0x52, 0x58, 0x94, 0x4f, 0x80, 0x35, 0xea,
	0x44, 0x57, 0x21, 0x7c, 0x2d, 0x59, 0x2e, 0xd6, 0x40, 0xbd, 0xd2, 0x50, 0x74, 0x9e, 0x95, 0x9e,
	0x67, 0xa5, 0x6f, 0xa6, 0x90, 0x6f, 0xec, 0xa8, 0x65, 0x95, 0xf7, 0x72, 0x73, 0x7d, 0xee, 0xe8,
	0x51, 0x55, 0x52, 0x13, 0x00, 0xcf, 0x8d, 0x4a, 0x8b, 0x50, 0x08, 0xe7, 0xf7, 0xb8, 0x29, 0x83,
	0x5a, 0xb1, 0x5e, 0x69, 0xac, 0xea, 0xe3, 0x2d, 0xd6, 0xc7, 0xf0, 0xba, 0xf8, 0xdd, 0xf0, 0x59,
	0xd8, 0x37, 0xaf, 0x0c, 0xcd, 0x95, 0x3f, 0xc0, 0xb2, 0xba, 0x14, 0xaa, 0xf2, 0x52, 0x03, 0xff,
	0x78, 0xd3, 0xd6, 0x0e, 0x3f, 0xd1, 0xae, 0xde, 0xaa, 0x5f, 0x5b, 0xbf, 0xa9, 0xdd, 0xba, 0x96,
	0x3f, 0x57, 0xee, 0x36, 0xae, 0xdc, 0x5b, 0xb2, 0xf2, 0x40, 0xca, 0xf7, 0x70, 0x71, 0x94, 0x06,
	0x9d, 0x87, 0xc5, 0x16, 0xe9, 0xf3, 0xf2, 0x58, 0xa9, 0x89, 0x1a, 0xb0, 0xd4, 0xb3, 0xdb, 0x5d,
	0x92, 0x95, 0xa3, 0xd2, 0xb8, 0x34, 0x4b, 0x93, 0xc5, 0xa1, 0xeb, 0x85, 0xcf, 0x81, 0xc8, 0x32,
	0x80, 0x17, 0xb6, 0x08, 0x1b, 0xc3, 0x90, 0x83, 0x2e, 0x89, 0x18, 0xba, 0x01, 0xcb, 0x5c, 0xc4,
	0x8e, 0xe7, 0x88, 0x76, 0xac, 0x0d, 0xcd, 0xff, 0x24, 0x3f, 0x7e, 0x5e, 0x5d, 0xe0, 0x64, 0xdb,
	0xd7, 0xad, 0x05, 0xce, 0xb2, 0xed, 0x88, 0x88, 0xc7, 0x05, 0x88, 0xb7, 0xf8, 0xaa, 0x90, 0x0d,
	0xdf, 0xb9, 0x9e, 0xcd, 0x0b, 0x17, 0xf0, 0xd6, 0x42, 0xa3, 0x4d, 0x08, 0x5f, 0x0f, 0xa7, 0xa8,
	0xd4, 0x07, 0x93, 0x95, 0x3a, 0x53, 0x63, 0x2e, 0x0e, 0xcd, 0xd2, 0x2f, 0xa0, 0x70, 0x1e, 0x9c,
	0x3c, 0xaf, 0x4a, 0x56, 0x99, 0xe4, 0x0e, 0xf4, 0x15, 0x2c, 0x79, 0x1d, 0xdb, 0x25, 0x62, 0xa0,
	0x3e, 0x9b, 0xa4, 0x98, 0x9d, 0x98, 0xbe, 0x9d, 0x7e, 0x6b, 0x71, 0x0a, 0xa5, 0x01, 0x4b, 0xd9,
	0x1b, 0xad, 0x40, 0x98, 0xfd, 0xb3, 0x13, 0x79, 0x87, 0x7c, 0xf2, 0xcf, 0x99, 0x70, 0x68, 0xce,
	0xaf, 0x96, 0xe4, 0xd3, 0xf9, 0x3a, 0xb4, 0xca, 0x99, 0xf7, 0x3b, 0xef, 0x90, 0x88, 0x12, 0xda,
	0x69, 0xd3, 0x78, 0xa0, 0x9c, 0x3f, 0x0a, 0xa8, 0x1f, 0x11, 0x84, 0xe0, 0x1c, 0x23, 0x77, 0x98,
	0x98, 0x8f, 0xcc, 0x46, 0x5a, 0xae, 0x99, 0xa7, 0xfd, 0xfe, 0xa4, 0xe6, 0x1b, 0x7c, 0x23, 0x85,
	0x2c, 0x1e, 0xa2, 0xf1, 0x7b, 0x11, 0xca, 0x13, 0x49, 0x6c, 0xe5, 0xf7, 0x0d, 0xfd, 0x0c, 0x60,
	0x79, 0x8b, 0x30, 0xb1, 0xb2, 0xcb, 0xd3, 0x45, 0x78, 0xd3, 0x40, 0x29, 0x33, 0x27, 0x53, 0xfd,
	0xf4, 0xa7, 0xbf, 0xfe, 0xfe, 0xad, 0xf0, 0x31, 0x5a, 0x31, 0x0e, 0x42, 0x2d, 0x3d, 0xa7, 0x51,
	0x7a, 0x4e, 0x34, 0xde, 0xb1, 0xc8, 0x10, 0xfb, 0x60, 0xdc, 0x3d, 0x1b, 0x8c, 0x7b, 0xa8, 0x05,
	0x2b, 0x5f, 0x7b, 0x11, 0xcb, 0xd7, 0xf3, 0xc2, 0xd4, 0x76, 0x6f, 0xa4, 0x07, 0x4d, 0xb9, 0x3c,
	0x73, 0x4b, 0xd5, 0x0f, 0xb3, 0xc0, 0x55, 0x74, 0x79, 0x66, 0xe0, 0x34, 0xe7, 0x85, 0xbc, 0xe8,
	0x48, 0xff, 0x7f, 0x7d, 0x57, 0x96, 0xff, 0x0d, 0x3f, 0xde, 0x3e, 0xb5, 0x96, 0x69, 0x51, 0xd4,
	0xf7, 0xde, 0xa8, 0x65, 0x1d, 0xac, 0x9a, 0x7f, 0x82, 0x93, 0x01, 0x06, 0x4f, 0x07, 0x18, 0x3c,
	0x1b, 0x60, 0xe9, 0xc5, 0x00, 0x4b, 0xa7, 0x03, 0x2c, 0xbd, 0x1c, 0x60, 0xe9, 0xd5, 0x00, 0x83,
	0xfb, 0x31, 0x06, 0x0f, 0x62, 0x2c, 0x3d, 0x8e, 0x31, 0x78, 0x12, 0x63, 0xe9, 0x28, 0xc6, 0xd2,
	0x71, 0x8c, 0xa5, 0x93, 0x18, 0x83, 0xa7, 0x31, 0x06, 0xcf, 0x62, 0x2c, 0xbd, 0x88, 0x31, 0x38,
	0x8d, 0xb1, 0xf4, 0x32, 0xc6, 0xe0, 0x55, 0x8c, 0xa5, 0xfb, 0x09, 0x96, 0x1e, 0x24, 0x18, 0xfc,
	0x9a, 0x60, 0xe9, 0x61, 0x82, 0xc1, 0xa3, 0x04, 0x4b, 0x8f, 0x13, 0x2c, 0x3d, 0x49, 0x30, 0x38,
	0x4a, 0x30, 0x38, 0x4e, 0x30, 0xf8, 0xc1, 0x70, 0xa9, 0xce, 0xf6, 0x09, 0xdb, 0xf7, 0x7c, 0x37,
	0xd2, 0x7d, 0xc2, 0x6e, 0xd3, 0xb0, 0x65, 0x8c, 0x5f, 0xf7, 0xde, 0x9a, 0x11, 0xb4, 0x5c, 0x83,
	0x31, 0x3f, 0xd8, 0xdd, 0x7d, 0x27, 0x6b, 0xc2, 0xda, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x1b,
	0xfa, 0x8a, 0xa5, 0x2e, 0x07, 0x00, 0x00,
}

func (this *QRCodeFormat) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QRCodeFormat)
	if !ok {
		that2, ok := that.(QRCodeFormat)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if !this.FieldMask.Equal(that1.FieldMask) {
		return false
	}
	return true
}
func (this *QRCodeFormats) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QRCodeFormats)
	if !ok {
		that2, ok := that.(QRCodeFormats)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Formats) != len(that1.Formats) {
		return false
	}
	for i := range this.Formats {
		if !this.Formats[i].Equal(that1.Formats[i]) {
			return false
		}
	}
	return true
}
func (this *GetQRCodeFormatRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetQRCodeFormatRequest)
	if !ok {
		that2, ok := that.(GetQRCodeFormatRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.FormatID != that1.FormatID {
		return false
	}
	return true
}
func (this *GenerateEndDeviceQRCodeRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GenerateEndDeviceQRCodeRequest)
	if !ok {
		that2, ok := that.(GenerateEndDeviceQRCodeRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.FormatID != that1.FormatID {
		return false
	}
	if !this.EndDevice.Equal(&that1.EndDevice) {
		return false
	}
	if !this.Image.Equal(that1.Image) {
		return false
	}
	return true
}
func (this *GenerateEndDeviceQRCodeRequest_Image) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GenerateEndDeviceQRCodeRequest_Image)
	if !ok {
		that2, ok := that.(GenerateEndDeviceQRCodeRequest_Image)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ImageSize != that1.ImageSize {
		return false
	}
	return true
}
func (this *GenerateQRCodeResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GenerateQRCodeResponse)
	if !ok {
		that2, ok := that.(GenerateQRCodeResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Text != that1.Text {
		return false
	}
	if !this.Image.Equal(that1.Image) {
		return false
	}
	return true
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// EndDeviceQRCodeGeneratorClient is the client API for EndDeviceQRCodeGenerator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EndDeviceQRCodeGeneratorClient interface {
	// Return the QR code format.
	GetFormat(ctx context.Context, in *GetQRCodeFormatRequest, opts ...grpc.CallOption) (*QRCodeFormat, error)
	// Returns the supported formats.
	ListFormats(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*QRCodeFormats, error)
	// Generates a QR code.
	Generate(ctx context.Context, in *GenerateEndDeviceQRCodeRequest, opts ...grpc.CallOption) (*GenerateQRCodeResponse, error)
}

type endDeviceQRCodeGeneratorClient struct {
	cc *grpc.ClientConn
}

func NewEndDeviceQRCodeGeneratorClient(cc *grpc.ClientConn) EndDeviceQRCodeGeneratorClient {
	return &endDeviceQRCodeGeneratorClient{cc}
}

func (c *endDeviceQRCodeGeneratorClient) GetFormat(ctx context.Context, in *GetQRCodeFormatRequest, opts ...grpc.CallOption) (*QRCodeFormat, error) {
	out := new(QRCodeFormat)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.EndDeviceQRCodeGenerator/GetFormat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endDeviceQRCodeGeneratorClient) ListFormats(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*QRCodeFormats, error) {
	out := new(QRCodeFormats)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.EndDeviceQRCodeGenerator/ListFormats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endDeviceQRCodeGeneratorClient) Generate(ctx context.Context, in *GenerateEndDeviceQRCodeRequest, opts ...grpc.CallOption) (*GenerateQRCodeResponse, error) {
	out := new(GenerateQRCodeResponse)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.EndDeviceQRCodeGenerator/Generate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EndDeviceQRCodeGeneratorServer is the server API for EndDeviceQRCodeGenerator service.
type EndDeviceQRCodeGeneratorServer interface {
	// Return the QR code format.
	GetFormat(context.Context, *GetQRCodeFormatRequest) (*QRCodeFormat, error)
	// Returns the supported formats.
	ListFormats(context.Context, *types.Empty) (*QRCodeFormats, error)
	// Generates a QR code.
	Generate(context.Context, *GenerateEndDeviceQRCodeRequest) (*GenerateQRCodeResponse, error)
}

// UnimplementedEndDeviceQRCodeGeneratorServer can be embedded to have forward compatible implementations.
type UnimplementedEndDeviceQRCodeGeneratorServer struct {
}

func (*UnimplementedEndDeviceQRCodeGeneratorServer) GetFormat(ctx context.Context, req *GetQRCodeFormatRequest) (*QRCodeFormat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFormat not implemented")
}
func (*UnimplementedEndDeviceQRCodeGeneratorServer) ListFormats(ctx context.Context, req *types.Empty) (*QRCodeFormats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFormats not implemented")
}
func (*UnimplementedEndDeviceQRCodeGeneratorServer) Generate(ctx context.Context, req *GenerateEndDeviceQRCodeRequest) (*GenerateQRCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Generate not implemented")
}

func RegisterEndDeviceQRCodeGeneratorServer(s *grpc.Server, srv EndDeviceQRCodeGeneratorServer) {
	s.RegisterService(&_EndDeviceQRCodeGenerator_serviceDesc, srv)
}

func _EndDeviceQRCodeGenerator_GetFormat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQRCodeFormatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndDeviceQRCodeGeneratorServer).GetFormat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.EndDeviceQRCodeGenerator/GetFormat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndDeviceQRCodeGeneratorServer).GetFormat(ctx, req.(*GetQRCodeFormatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EndDeviceQRCodeGenerator_ListFormats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndDeviceQRCodeGeneratorServer).ListFormats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.EndDeviceQRCodeGenerator/ListFormats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndDeviceQRCodeGeneratorServer).ListFormats(ctx, req.(*types.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _EndDeviceQRCodeGenerator_Generate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateEndDeviceQRCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndDeviceQRCodeGeneratorServer).Generate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.EndDeviceQRCodeGenerator/Generate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndDeviceQRCodeGeneratorServer).Generate(ctx, req.(*GenerateEndDeviceQRCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _EndDeviceQRCodeGenerator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.lorawan.v3.EndDeviceQRCodeGenerator",
	HandlerType: (*EndDeviceQRCodeGeneratorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFormat",
			Handler:    _EndDeviceQRCodeGenerator_GetFormat_Handler,
		},
		{
			MethodName: "ListFormats",
			Handler:    _EndDeviceQRCodeGenerator_ListFormats_Handler,
		},
		{
			MethodName: "Generate",
			Handler:    _EndDeviceQRCodeGenerator_Generate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lorawan-stack/api/qrcodegenerator.proto",
}

func (m *QRCodeFormat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QRCodeFormat) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QRCodeFormat) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FieldMask != nil {
		{
			size, err := m.FieldMask.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQrcodegenerator(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintQrcodegenerator(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintQrcodegenerator(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QRCodeFormats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QRCodeFormats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QRCodeFormats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Formats) > 0 {
		for k := range m.Formats {
			v := m.Formats[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintQrcodegenerator(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintQrcodegenerator(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintQrcodegenerator(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetQRCodeFormatRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetQRCodeFormatRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetQRCodeFormatRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FormatID) > 0 {
		i -= len(m.FormatID)
		copy(dAtA[i:], m.FormatID)
		i = encodeVarintQrcodegenerator(dAtA, i, uint64(len(m.FormatID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GenerateEndDeviceQRCodeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenerateEndDeviceQRCodeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenerateEndDeviceQRCodeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Image != nil {
		{
			size, err := m.Image.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQrcodegenerator(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	{
		size, err := m.EndDevice.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQrcodegenerator(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.FormatID) > 0 {
		i -= len(m.FormatID)
		copy(dAtA[i:], m.FormatID)
		i = encodeVarintQrcodegenerator(dAtA, i, uint64(len(m.FormatID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GenerateEndDeviceQRCodeRequest_Image) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenerateEndDeviceQRCodeRequest_Image) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenerateEndDeviceQRCodeRequest_Image) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ImageSize != 0 {
		i = encodeVarintQrcodegenerator(dAtA, i, uint64(m.ImageSize))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GenerateQRCodeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenerateQRCodeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenerateQRCodeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Image != nil {
		{
			size, err := m.Image.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQrcodegenerator(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Text) > 0 {
		i -= len(m.Text)
		copy(dAtA[i:], m.Text)
		i = encodeVarintQrcodegenerator(dAtA, i, uint64(len(m.Text)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQrcodegenerator(dAtA []byte, offset int, v uint64) int {
	offset -= sovQrcodegenerator(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedGenerateEndDeviceQRCodeRequest_Image(r randyQrcodegenerator, easy bool) *GenerateEndDeviceQRCodeRequest_Image {
	this := &GenerateEndDeviceQRCodeRequest_Image{}
	this.ImageSize = r.Uint32()
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyQrcodegenerator interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneQrcodegenerator(r randyQrcodegenerator) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringQrcodegenerator(r randyQrcodegenerator) string {
	v1 := r.Intn(100)
	tmps := make([]rune, v1)
	for i := 0; i < v1; i++ {
		tmps[i] = randUTF8RuneQrcodegenerator(r)
	}
	return string(tmps)
}
func randUnrecognizedQrcodegenerator(r randyQrcodegenerator, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldQrcodegenerator(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldQrcodegenerator(dAtA []byte, r randyQrcodegenerator, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateQrcodegenerator(dAtA, uint64(key))
		v2 := r.Int63()
		if r.Intn(2) == 0 {
			v2 *= -1
		}
		dAtA = encodeVarintPopulateQrcodegenerator(dAtA, uint64(v2))
	case 1:
		dAtA = encodeVarintPopulateQrcodegenerator(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateQrcodegenerator(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateQrcodegenerator(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateQrcodegenerator(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateQrcodegenerator(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(v&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *QRCodeFormat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovQrcodegenerator(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovQrcodegenerator(uint64(l))
	}
	if m.FieldMask != nil {
		l = m.FieldMask.Size()
		n += 1 + l + sovQrcodegenerator(uint64(l))
	}
	return n
}

func (m *QRCodeFormats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Formats) > 0 {
		for k, v := range m.Formats {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovQrcodegenerator(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovQrcodegenerator(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovQrcodegenerator(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *GetQRCodeFormatRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FormatID)
	if l > 0 {
		n += 1 + l + sovQrcodegenerator(uint64(l))
	}
	return n
}

func (m *GenerateEndDeviceQRCodeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FormatID)
	if l > 0 {
		n += 1 + l + sovQrcodegenerator(uint64(l))
	}
	l = m.EndDevice.Size()
	n += 1 + l + sovQrcodegenerator(uint64(l))
	if m.Image != nil {
		l = m.Image.Size()
		n += 1 + l + sovQrcodegenerator(uint64(l))
	}
	return n
}

func (m *GenerateEndDeviceQRCodeRequest_Image) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ImageSize != 0 {
		n += 1 + sovQrcodegenerator(uint64(m.ImageSize))
	}
	return n
}

func (m *GenerateQRCodeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovQrcodegenerator(uint64(l))
	}
	if m.Image != nil {
		l = m.Image.Size()
		n += 1 + l + sovQrcodegenerator(uint64(l))
	}
	return n
}

func sovQrcodegenerator(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQrcodegenerator(x uint64) (n int) {
	return sovQrcodegenerator((x << 1) ^ uint64((int64(x) >> 63)))
}
func (this *QRCodeFormat) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QRCodeFormat{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`FieldMask:` + strings.Replace(fmt.Sprintf("%v", this.FieldMask), "FieldMask", "types.FieldMask", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *QRCodeFormats) String() string {
	if this == nil {
		return "nil"
	}
	keysForFormats := make([]string, 0, len(this.Formats))
	for k := range this.Formats {
		keysForFormats = append(keysForFormats, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForFormats)
	mapStringForFormats := "map[string]*QRCodeFormat{"
	for _, k := range keysForFormats {
		mapStringForFormats += fmt.Sprintf("%v: %v,", k, this.Formats[k])
	}
	mapStringForFormats += "}"
	s := strings.Join([]string{`&QRCodeFormats{`,
		`Formats:` + mapStringForFormats + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetQRCodeFormatRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetQRCodeFormatRequest{`,
		`FormatID:` + fmt.Sprintf("%v", this.FormatID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GenerateEndDeviceQRCodeRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GenerateEndDeviceQRCodeRequest{`,
		`FormatID:` + fmt.Sprintf("%v", this.FormatID) + `,`,
		`EndDevice:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.EndDevice), "EndDevice", "EndDevice", 1), `&`, ``, 1) + `,`,
		`Image:` + strings.Replace(fmt.Sprintf("%v", this.Image), "GenerateEndDeviceQRCodeRequest_Image", "GenerateEndDeviceQRCodeRequest_Image", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GenerateEndDeviceQRCodeRequest_Image) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GenerateEndDeviceQRCodeRequest_Image{`,
		`ImageSize:` + fmt.Sprintf("%v", this.ImageSize) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GenerateQRCodeResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GenerateQRCodeResponse{`,
		`Text:` + fmt.Sprintf("%v", this.Text) + `,`,
		`Image:` + strings.Replace(fmt.Sprintf("%v", this.Image), "Picture", "Picture", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringQrcodegenerator(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *QRCodeFormat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQrcodegenerator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QRCodeFormat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QRCodeFormat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQrcodegenerator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQrcodegenerator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQrcodegenerator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQrcodegenerator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQrcodegenerator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQrcodegenerator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldMask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQrcodegenerator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQrcodegenerator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQrcodegenerator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FieldMask == nil {
				m.FieldMask = &types.FieldMask{}
			}
			if err := m.FieldMask.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQrcodegenerator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQrcodegenerator
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQrcodegenerator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QRCodeFormats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQrcodegenerator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QRCodeFormats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QRCodeFormats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Formats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQrcodegenerator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQrcodegenerator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQrcodegenerator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Formats == nil {
				m.Formats = make(map[string]*QRCodeFormat)
			}
			var mapkey string
			var mapvalue *QRCodeFormat
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQrcodegenerator
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQrcodegenerator
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthQrcodegenerator
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthQrcodegenerator
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQrcodegenerator
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthQrcodegenerator
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthQrcodegenerator
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &QRCodeFormat{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipQrcodegenerator(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthQrcodegenerator
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Formats[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQrcodegenerator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQrcodegenerator
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQrcodegenerator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetQRCodeFormatRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQrcodegenerator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetQRCodeFormatRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetQRCodeFormatRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FormatID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQrcodegenerator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQrcodegenerator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQrcodegenerator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FormatID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQrcodegenerator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQrcodegenerator
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQrcodegenerator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenerateEndDeviceQRCodeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQrcodegenerator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenerateEndDeviceQRCodeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenerateEndDeviceQRCodeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FormatID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQrcodegenerator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQrcodegenerator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQrcodegenerator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FormatID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndDevice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQrcodegenerator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQrcodegenerator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQrcodegenerator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EndDevice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQrcodegenerator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQrcodegenerator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQrcodegenerator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Image == nil {
				m.Image = &GenerateEndDeviceQRCodeRequest_Image{}
			}
			if err := m.Image.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQrcodegenerator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQrcodegenerator
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQrcodegenerator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenerateEndDeviceQRCodeRequest_Image) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQrcodegenerator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Image: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Image: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageSize", wireType)
			}
			m.ImageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQrcodegenerator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ImageSize |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQrcodegenerator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQrcodegenerator
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQrcodegenerator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenerateQRCodeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQrcodegenerator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenerateQRCodeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenerateQRCodeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQrcodegenerator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQrcodegenerator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQrcodegenerator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQrcodegenerator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQrcodegenerator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQrcodegenerator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Image == nil {
				m.Image = &Picture{}
			}
			if err := m.Image.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQrcodegenerator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQrcodegenerator
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQrcodegenerator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQrcodegenerator(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQrcodegenerator
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQrcodegenerator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQrcodegenerator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQrcodegenerator
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQrcodegenerator
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQrcodegenerator
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQrcodegenerator        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQrcodegenerator          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQrcodegenerator = fmt.Errorf("proto: unexpected end of group")
)
