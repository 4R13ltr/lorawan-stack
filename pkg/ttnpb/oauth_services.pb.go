// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lorawan-stack/api/oauth_services.proto

package ttnpb

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("lorawan-stack/api/oauth_services.proto", fileDescriptor_10930ff381158870)
}
func init() {
	golang_proto.RegisterFile("lorawan-stack/api/oauth_services.proto", fileDescriptor_10930ff381158870)
}

var fileDescriptor_10930ff381158870 = []byte{
	// 465 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x93, 0xbf, 0x8b, 0xd4, 0x40,
	0x14, 0xc7, 0x77, 0x44, 0xaf, 0x88, 0x60, 0x31, 0x85, 0x45, 0xd4, 0x01, 0xb7, 0x10, 0x5d, 0xbd,
	0x19, 0x71, 0xed, 0x65, 0xfd, 0x2d, 0xfe, 0x82, 0xd3, 0xca, 0xe6, 0x98, 0xcd, 0xbe, 0x9b, 0x0c,
	0x9b, 0x9b, 0x89, 0x33, 0x2f, 0x7b, 0x9c, 0xcb, 0x82, 0xf8, 0x17, 0x08, 0x56, 0x36, 0x62, 0xa7,
	0x8d, 0x95, 0xff, 0x80, 0xa5, 0xa5, 0x60, 0x63, 0xe9, 0x65, 0x2d, 0x2c, 0x2d, 0x2d, 0x25, 0x93,
	0xdc, 0x61, 0xc4, 0xc5, 0x05, 0xaf, 0x08, 0x79, 0x2f, 0xef, 0xfb, 0x7d, 0x7c, 0xde, 0x7b, 0x24,
	0x3a, 0x95, 0x59, 0x27, 0xb7, 0xa4, 0x59, 0xf5, 0x28, 0x93, 0xb1, 0x90, 0xb9, 0x16, 0x56, 0x16,
	0x98, 0xae, 0x7b, 0x70, 0x13, 0x9d, 0x80, 0xe7, 0xb9, 0xb3, 0x68, 0xe9, 0x11, 0x44, 0xc3, 0x1b,
	0x2d, 0x9f, 0xf4, 0xe3, 0x55, 0xa5, 0x31, 0x2d, 0x86, 0x3c, 0xb1, 0x9b, 0x42, 0x59, 0x65, 0x45,
	0x90, 0x0d, 0x8b, 0x8d, 0x90, 0x85, 0x24, 0x44, 0xb5, 0x3d, 0x3e, 0xae, 0xac, 0x55, 0x19, 0x84,
	0xfe, 0xd2, 0x18, 0x8b, 0x12, 0xb5, 0x35, 0x4d, 0xf3, 0xf8, 0x58, 0x53, 0xdd, 0xeb, 0x01, 0x9b,
	0x39, 0x6e, 0x37, 0xc5, 0x13, 0x0b, 0x08, 0xeb, 0xf2, 0x85, 0xf7, 0x87, 0xa2, 0xf8, 0xfe, 0xa0,
	0xc0, 0xb4, 0x7a, 0xac, 0xd3, 0x4f, 0x42, 0xe7, 0x35, 0x50, 0xda, 0xa3, 0xdb, 0xa6, 0x2f, 0x49,
	0x74, 0xf0, 0x8e, 0xf6, 0x48, 0x2f, 0xf2, 0xf6, 0x04, 0xbc, 0xfa, 0x1a, 0x8c, 0x57, 0x32, 0x0d,
	0x06, 0x5b, 0x76, 0xbf, 0x06, 0x8f, 0x0b, 0xf0, 0x18, 0x9f, 0xf9, 0xd3, 0xb5, 0xd0, 0xd1, 0x3d,
	0xff, 0xec, 0xf3, 0xb7, 0x17, 0x07, 0x7a, 0xf4, 0xb4, 0x28, 0x3c, 0x38, 0x2f, 0xa6, 0xd5, 0x6b,
	0x5d, 0x8f, 0x3c, 0x6f, 0x82, 0x99, 0x90, 0x2d, 0x07, 0x7d, 0x47, 0xa2, 0xa8, 0xa2, 0x78, 0x68,
	0xc7, 0x60, 0x3c, 0x3d, 0xb7, 0x90, 0x70, 0x90, 0x24, 0xe0, 0x7d, 0x2d, 0xdb, 0x25, 0x3b, 0xf9,
	0x57, 0xb2, 0xdf, 0x95, 0xdd, 0x7b, 0x81, 0xe8, 0x26, 0xbd, 0xbe, 0x2c, 0x91, 0x98, 0x26, 0x61,
	0xb2, 0xa0, 0xd9, 0x0b, 0x67, 0x02, 0x6b, 0xc0, 0x57, 0x24, 0x5a, 0xb9, 0x0a, 0x19, 0x20, 0xd0,
	0xfe, 0xb2, 0x7b, 0xb9, 0x35, 0x02, 0x83, 0x7a, 0x43, 0x83, 0xf3, 0xf1, 0x51, 0x5e, 0xdf, 0x99,
	0xef, 0xde, 0x99, 0x5f, 0xab, 0xee, 0xdc, 0xbd, 0x11, 0x38, 0x07, 0xbd, 0x4b, 0xff, 0xc9, 0x49,
	0xdf, 0x90, 0xe8, 0x70, 0x0d, 0x18, 0x36, 0x40, 0xcf, 0xfe, 0x6b, 0x47, 0xcb, 0xd0, 0x3d, 0x08,
	0x74, 0x77, 0x7b, 0xb7, 0xf7, 0x67, 0x8b, 0x62, 0xaa, 0x47, 0xb3, 0xcb, 0xf2, 0xcb, 0x0e, 0xeb,
	0xfc, 0xdc, 0x61, 0xe4, 0x69, 0xc9, 0xc8, 0xdb, 0x92, 0x91, 0x8f, 0x25, 0x23, 0x9f, 0x4a, 0x46,
	0xbe, 0x96, 0x8c, 0x7c, 0x2f, 0x59, 0xe7, 0x47, 0xc9, 0xc8, 0xf3, 0x39, 0xeb, 0xbc, 0x9e, 0xb3,
	0xce, 0x87, 0x39, 0x23, 0x8f, 0x84, 0xb2, 0x1c, 0x53, 0xc0, 0x54, 0x1b, 0xe5, 0xb9, 0x01, 0xdc,
	0xb2, 0x6e, 0x2c, 0xda, 0xff, 0xc6, 0xa4, 0x2f, 0xf2, 0xb1, 0x12, 0x88, 0x26, 0x1f, 0x0e, 0x57,
	0xc2, 0x1c, 0xfd, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xda, 0x94, 0xcf, 0xc8, 0xe2, 0x03, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// OAuthAuthorizationRegistryClient is the client API for OAuthAuthorizationRegistry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OAuthAuthorizationRegistryClient interface {
	// List OAuth clients that are authorized by the user.
	List(ctx context.Context, in *ListOAuthClientAuthorizationsRequest, opts ...grpc.CallOption) (*OAuthClientAuthorizations, error)
	// List OAuth access tokens issued to the OAuth client on behalf of the user.
	ListTokens(ctx context.Context, in *ListOAuthAccessTokensRequest, opts ...grpc.CallOption) (*OAuthAccessTokens, error)
	// Delete (de-authorize) an OAuth client for the user.
	Delete(ctx context.Context, in *OAuthClientAuthorizationIdentifiers, opts ...grpc.CallOption) (*types.Empty, error)
	// Delete (invalidate) an OAuth access token.
	DeleteToken(ctx context.Context, in *OAuthAccessTokenIdentifiers, opts ...grpc.CallOption) (*types.Empty, error)
}

type oAuthAuthorizationRegistryClient struct {
	cc *grpc.ClientConn
}

func NewOAuthAuthorizationRegistryClient(cc *grpc.ClientConn) OAuthAuthorizationRegistryClient {
	return &oAuthAuthorizationRegistryClient{cc}
}

func (c *oAuthAuthorizationRegistryClient) List(ctx context.Context, in *ListOAuthClientAuthorizationsRequest, opts ...grpc.CallOption) (*OAuthClientAuthorizations, error) {
	out := new(OAuthClientAuthorizations)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.OAuthAuthorizationRegistry/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oAuthAuthorizationRegistryClient) ListTokens(ctx context.Context, in *ListOAuthAccessTokensRequest, opts ...grpc.CallOption) (*OAuthAccessTokens, error) {
	out := new(OAuthAccessTokens)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.OAuthAuthorizationRegistry/ListTokens", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oAuthAuthorizationRegistryClient) Delete(ctx context.Context, in *OAuthClientAuthorizationIdentifiers, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.OAuthAuthorizationRegistry/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oAuthAuthorizationRegistryClient) DeleteToken(ctx context.Context, in *OAuthAccessTokenIdentifiers, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.OAuthAuthorizationRegistry/DeleteToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OAuthAuthorizationRegistryServer is the server API for OAuthAuthorizationRegistry service.
type OAuthAuthorizationRegistryServer interface {
	// List OAuth clients that are authorized by the user.
	List(context.Context, *ListOAuthClientAuthorizationsRequest) (*OAuthClientAuthorizations, error)
	// List OAuth access tokens issued to the OAuth client on behalf of the user.
	ListTokens(context.Context, *ListOAuthAccessTokensRequest) (*OAuthAccessTokens, error)
	// Delete (de-authorize) an OAuth client for the user.
	Delete(context.Context, *OAuthClientAuthorizationIdentifiers) (*types.Empty, error)
	// Delete (invalidate) an OAuth access token.
	DeleteToken(context.Context, *OAuthAccessTokenIdentifiers) (*types.Empty, error)
}

// UnimplementedOAuthAuthorizationRegistryServer can be embedded to have forward compatible implementations.
type UnimplementedOAuthAuthorizationRegistryServer struct {
}

func (*UnimplementedOAuthAuthorizationRegistryServer) List(ctx context.Context, req *ListOAuthClientAuthorizationsRequest) (*OAuthClientAuthorizations, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedOAuthAuthorizationRegistryServer) ListTokens(ctx context.Context, req *ListOAuthAccessTokensRequest) (*OAuthAccessTokens, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTokens not implemented")
}
func (*UnimplementedOAuthAuthorizationRegistryServer) Delete(ctx context.Context, req *OAuthClientAuthorizationIdentifiers) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedOAuthAuthorizationRegistryServer) DeleteToken(ctx context.Context, req *OAuthAccessTokenIdentifiers) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteToken not implemented")
}

func RegisterOAuthAuthorizationRegistryServer(s *grpc.Server, srv OAuthAuthorizationRegistryServer) {
	s.RegisterService(&_OAuthAuthorizationRegistry_serviceDesc, srv)
}

func _OAuthAuthorizationRegistry_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOAuthClientAuthorizationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OAuthAuthorizationRegistryServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.OAuthAuthorizationRegistry/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OAuthAuthorizationRegistryServer).List(ctx, req.(*ListOAuthClientAuthorizationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OAuthAuthorizationRegistry_ListTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOAuthAccessTokensRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OAuthAuthorizationRegistryServer).ListTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.OAuthAuthorizationRegistry/ListTokens",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OAuthAuthorizationRegistryServer).ListTokens(ctx, req.(*ListOAuthAccessTokensRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OAuthAuthorizationRegistry_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OAuthClientAuthorizationIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OAuthAuthorizationRegistryServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.OAuthAuthorizationRegistry/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OAuthAuthorizationRegistryServer).Delete(ctx, req.(*OAuthClientAuthorizationIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

func _OAuthAuthorizationRegistry_DeleteToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OAuthAccessTokenIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OAuthAuthorizationRegistryServer).DeleteToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.OAuthAuthorizationRegistry/DeleteToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OAuthAuthorizationRegistryServer).DeleteToken(ctx, req.(*OAuthAccessTokenIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

var _OAuthAuthorizationRegistry_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.lorawan.v3.OAuthAuthorizationRegistry",
	HandlerType: (*OAuthAuthorizationRegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _OAuthAuthorizationRegistry_List_Handler,
		},
		{
			MethodName: "ListTokens",
			Handler:    _OAuthAuthorizationRegistry_ListTokens_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _OAuthAuthorizationRegistry_Delete_Handler,
		},
		{
			MethodName: "DeleteToken",
			Handler:    _OAuthAuthorizationRegistry_DeleteToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lorawan-stack/api/oauth_services.proto",
}
