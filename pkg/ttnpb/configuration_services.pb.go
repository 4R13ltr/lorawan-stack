// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lorawan-stack/api/configuration_services.proto

package ttnpb

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ListFrequencyPlansRequest struct {
	// Optional base frequency in MHz for hardware support (433, 470, 868 or 915)
	BaseFrequency        uint32   `protobuf:"varint,1,opt,name=base_frequency,json=baseFrequency,proto3" json:"base_frequency,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListFrequencyPlansRequest) Reset()      { *m = ListFrequencyPlansRequest{} }
func (*ListFrequencyPlansRequest) ProtoMessage() {}
func (*ListFrequencyPlansRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ed64f51a0283877, []int{0}
}
func (m *ListFrequencyPlansRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListFrequencyPlansRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListFrequencyPlansRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListFrequencyPlansRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListFrequencyPlansRequest.Merge(m, src)
}
func (m *ListFrequencyPlansRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListFrequencyPlansRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListFrequencyPlansRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListFrequencyPlansRequest proto.InternalMessageInfo

func (m *ListFrequencyPlansRequest) GetBaseFrequency() uint32 {
	if m != nil {
		return m.BaseFrequency
	}
	return 0
}

type FrequencyPlanDescription struct {
	ID string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The ID of the frequency that the current frequency plan is based on.
	BaseID string `protobuf:"bytes,2,opt,name=base_id,json=baseId,proto3" json:"base_id,omitempty"`
	Name   string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Base frequency in MHz for hardware support (433, 470, 868 or 915)
	BaseFrequency        uint32   `protobuf:"varint,4,opt,name=base_frequency,json=baseFrequency,proto3" json:"base_frequency,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FrequencyPlanDescription) Reset()      { *m = FrequencyPlanDescription{} }
func (*FrequencyPlanDescription) ProtoMessage() {}
func (*FrequencyPlanDescription) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ed64f51a0283877, []int{1}
}
func (m *FrequencyPlanDescription) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FrequencyPlanDescription) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FrequencyPlanDescription.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FrequencyPlanDescription) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FrequencyPlanDescription.Merge(m, src)
}
func (m *FrequencyPlanDescription) XXX_Size() int {
	return m.Size()
}
func (m *FrequencyPlanDescription) XXX_DiscardUnknown() {
	xxx_messageInfo_FrequencyPlanDescription.DiscardUnknown(m)
}

var xxx_messageInfo_FrequencyPlanDescription proto.InternalMessageInfo

func (m *FrequencyPlanDescription) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *FrequencyPlanDescription) GetBaseID() string {
	if m != nil {
		return m.BaseID
	}
	return ""
}

func (m *FrequencyPlanDescription) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FrequencyPlanDescription) GetBaseFrequency() uint32 {
	if m != nil {
		return m.BaseFrequency
	}
	return 0
}

type ListFrequencyPlansResponse struct {
	FrequencyPlans       []*FrequencyPlanDescription `protobuf:"bytes,1,rep,name=frequency_plans,json=frequencyPlans,proto3" json:"frequency_plans,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *ListFrequencyPlansResponse) Reset()      { *m = ListFrequencyPlansResponse{} }
func (*ListFrequencyPlansResponse) ProtoMessage() {}
func (*ListFrequencyPlansResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ed64f51a0283877, []int{2}
}
func (m *ListFrequencyPlansResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListFrequencyPlansResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListFrequencyPlansResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListFrequencyPlansResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListFrequencyPlansResponse.Merge(m, src)
}
func (m *ListFrequencyPlansResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListFrequencyPlansResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListFrequencyPlansResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListFrequencyPlansResponse proto.InternalMessageInfo

func (m *ListFrequencyPlansResponse) GetFrequencyPlans() []*FrequencyPlanDescription {
	if m != nil {
		return m.FrequencyPlans
	}
	return nil
}

func init() {
	proto.RegisterType((*ListFrequencyPlansRequest)(nil), "ttn.lorawan.v3.ListFrequencyPlansRequest")
	golang_proto.RegisterType((*ListFrequencyPlansRequest)(nil), "ttn.lorawan.v3.ListFrequencyPlansRequest")
	proto.RegisterType((*FrequencyPlanDescription)(nil), "ttn.lorawan.v3.FrequencyPlanDescription")
	golang_proto.RegisterType((*FrequencyPlanDescription)(nil), "ttn.lorawan.v3.FrequencyPlanDescription")
	proto.RegisterType((*ListFrequencyPlansResponse)(nil), "ttn.lorawan.v3.ListFrequencyPlansResponse")
	golang_proto.RegisterType((*ListFrequencyPlansResponse)(nil), "ttn.lorawan.v3.ListFrequencyPlansResponse")
}

func init() {
	proto.RegisterFile("lorawan-stack/api/configuration_services.proto", fileDescriptor_2ed64f51a0283877)
}
func init() {
	golang_proto.RegisterFile("lorawan-stack/api/configuration_services.proto", fileDescriptor_2ed64f51a0283877)
}

var fileDescriptor_2ed64f51a0283877 = []byte{
	// 436 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0xcf, 0x8a, 0x13, 0x31,
	0x18, 0x6f, 0x66, 0x97, 0x8a, 0x91, 0x56, 0xc8, 0x41, 0xc6, 0x41, 0xb2, 0xa5, 0xa2, 0x54, 0xa1,
	0x09, 0x6c, 0xdf, 0x60, 0x2c, 0x42, 0xc1, 0x83, 0xce, 0x51, 0x90, 0x92, 0x99, 0xc9, 0xa4, 0xa1,
	0xdd, 0x64, 0x9c, 0x64, 0xba, 0x78, 0x13, 0x9f, 0x40, 0xdc, 0x17, 0xf0, 0x22, 0xf8, 0x18, 0x1e,
	0x3d, 0x0a, 0x5e, 0x3c, 0x2d, 0x9a, 0x7a, 0xf0, 0xe8, 0x23, 0xc8, 0x64, 0xdd, 0xe2, 0x68, 0x0b,
	0xde, 0xf2, 0xcd, 0xf7, 0xfd, 0xfe, 0xcd, 0xf7, 0x41, 0xb2, 0xd2, 0x15, 0x3b, 0x65, 0x6a, 0x6c,
	0x2c, 0xcb, 0x96, 0x94, 0x95, 0x92, 0x66, 0x5a, 0x15, 0x52, 0xd4, 0x15, 0xb3, 0x52, 0xab, 0xb9,
	0xe1, 0xd5, 0x5a, 0x66, 0xdc, 0x90, 0xb2, 0xd2, 0x56, 0xa3, 0xbe, 0xb5, 0xea, 0x12, 0x43, 0xd6,
	0x93, 0x68, 0x2c, 0xa4, 0x5d, 0xd4, 0x29, 0xc9, 0xf4, 0x09, 0x15, 0x5a, 0x68, 0xea, 0xc7, 0xd2,
	0xba, 0xf0, 0x95, 0x2f, 0xfc, 0xeb, 0x02, 0x1e, 0xdd, 0x12, 0x5a, 0x8b, 0x15, 0xf7, 0x3a, 0x4c,
	0x29, 0x6d, 0xbd, 0xc8, 0x6f, 0xf2, 0x61, 0x0c, 0x6f, 0x3e, 0x92, 0xc6, 0x3e, 0xac, 0xf8, 0xf3,
	0x9a, 0xab, 0xec, 0xc5, 0xe3, 0x15, 0x53, 0x26, 0x69, 0x0a, 0x63, 0xd1, 0x1d, 0xd8, 0x4f, 0x99,
	0xe1, 0xf3, 0xe2, 0xb2, 0x1b, 0x82, 0x01, 0x18, 0xf5, 0x92, 0x5e, 0xf3, 0x75, 0x0b, 0x19, 0xbe,
	0x01, 0x30, 0x6c, 0x11, 0x4c, 0xb9, 0xc9, 0x2a, 0x59, 0x36, 0x3a, 0xe8, 0x06, 0x0c, 0x64, 0xee,
	0x71, 0x57, 0xe3, 0xae, 0x3b, 0x3f, 0x0a, 0x66, 0xd3, 0x24, 0x90, 0x39, 0xba, 0x0d, 0xaf, 0x78,
	0x6e, 0x99, 0x87, 0x81, 0x6f, 0x42, 0x77, 0x7e, 0xd4, 0x8d, 0x99, 0xe1, 0xb3, 0x69, 0xd2, 0x6d,
	0x5a, 0xb3, 0x1c, 0x21, 0x78, 0xa8, 0xd8, 0x09, 0x0f, 0x0f, 0x9a, 0x89, 0xc4, 0xbf, 0x77, 0x98,
	0x3a, 0xdc, 0x65, 0x4a, 0xc3, 0x68, 0x57, 0x30, 0x53, 0x6a, 0x65, 0x38, 0x7a, 0x02, 0xaf, 0x6f,
	0xf1, 0xf3, 0xb2, 0x69, 0x85, 0x60, 0x70, 0x30, 0xba, 0x76, 0x3c, 0x22, 0xed, 0xbf, 0x4d, 0xf6,
	0x05, 0x4b, 0xfa, 0x45, 0x8b, 0xfa, 0xf8, 0x1d, 0x80, 0xbd, 0x07, 0x7f, 0xee, 0x11, 0x9d, 0x01,
	0x88, 0xfe, 0xf5, 0x80, 0xee, 0xfd, 0x2d, 0xb1, 0x77, 0x01, 0xd1, 0xfd, 0xff, 0x19, 0xbd, 0x88,
	0x34, 0xbc, 0xfb, 0xea, 0xf3, 0xf7, 0xb3, 0x60, 0x80, 0x70, 0xfb, 0x9a, 0xe8, 0xd6, 0xe6, 0xd8,
	0xe7, 0x8c, 0x9f, 0x7d, 0xf9, 0x86, 0x3b, 0x2f, 0x1d, 0x06, 0xef, 0x1d, 0x06, 0x1f, 0x1d, 0x06,
	0x9f, 0x1c, 0x06, 0x5f, 0x1d, 0x06, 0x3f, 0x1c, 0xee, 0xfc, 0x74, 0x18, 0xbc, 0xde, 0xe0, 0xce,
	0xdb, 0x0d, 0xee, 0x7c, 0xd8, 0x60, 0xf0, 0x94, 0x0a, 0x4d, 0xec, 0x82, 0xdb, 0x85, 0x54, 0xc2,
	0x10, 0xc5, 0xed, 0xa9, 0xae, 0x96, 0xb4, 0x7d, 0xc1, 0xeb, 0x09, 0x2d, 0x97, 0x82, 0x5a, 0xab,
	0xca, 0x34, 0xed, 0xfa, 0xbb, 0x9a, 0xfc, 0x0a, 0x00, 0x00, 0xff, 0xff, 0x01, 0x0c, 0x9b, 0xaa,
	0xe6, 0x02, 0x00, 0x00,
}

func (this *ListFrequencyPlansRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListFrequencyPlansRequest)
	if !ok {
		that2, ok := that.(ListFrequencyPlansRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BaseFrequency != that1.BaseFrequency {
		return false
	}
	return true
}
func (this *FrequencyPlanDescription) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FrequencyPlanDescription)
	if !ok {
		that2, ok := that.(FrequencyPlanDescription)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.BaseID != that1.BaseID {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.BaseFrequency != that1.BaseFrequency {
		return false
	}
	return true
}
func (this *ListFrequencyPlansResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListFrequencyPlansResponse)
	if !ok {
		that2, ok := that.(ListFrequencyPlansResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.FrequencyPlans) != len(that1.FrequencyPlans) {
		return false
	}
	for i := range this.FrequencyPlans {
		if !this.FrequencyPlans[i].Equal(that1.FrequencyPlans[i]) {
			return false
		}
	}
	return true
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ConfigurationClient is the client API for Configuration service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ConfigurationClient interface {
	ListFrequencyPlans(ctx context.Context, in *ListFrequencyPlansRequest, opts ...grpc.CallOption) (*ListFrequencyPlansResponse, error)
}

type configurationClient struct {
	cc *grpc.ClientConn
}

func NewConfigurationClient(cc *grpc.ClientConn) ConfigurationClient {
	return &configurationClient{cc}
}

func (c *configurationClient) ListFrequencyPlans(ctx context.Context, in *ListFrequencyPlansRequest, opts ...grpc.CallOption) (*ListFrequencyPlansResponse, error) {
	out := new(ListFrequencyPlansResponse)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.Configuration/ListFrequencyPlans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConfigurationServer is the server API for Configuration service.
type ConfigurationServer interface {
	ListFrequencyPlans(context.Context, *ListFrequencyPlansRequest) (*ListFrequencyPlansResponse, error)
}

// UnimplementedConfigurationServer can be embedded to have forward compatible implementations.
type UnimplementedConfigurationServer struct {
}

func (*UnimplementedConfigurationServer) ListFrequencyPlans(ctx context.Context, req *ListFrequencyPlansRequest) (*ListFrequencyPlansResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFrequencyPlans not implemented")
}

func RegisterConfigurationServer(s *grpc.Server, srv ConfigurationServer) {
	s.RegisterService(&_Configuration_serviceDesc, srv)
}

func _Configuration_ListFrequencyPlans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFrequencyPlansRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigurationServer).ListFrequencyPlans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.Configuration/ListFrequencyPlans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigurationServer).ListFrequencyPlans(ctx, req.(*ListFrequencyPlansRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Configuration_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.lorawan.v3.Configuration",
	HandlerType: (*ConfigurationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListFrequencyPlans",
			Handler:    _Configuration_ListFrequencyPlans_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lorawan-stack/api/configuration_services.proto",
}

func (m *ListFrequencyPlansRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListFrequencyPlansRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListFrequencyPlansRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BaseFrequency != 0 {
		i = encodeVarintConfigurationServices(dAtA, i, uint64(m.BaseFrequency))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FrequencyPlanDescription) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FrequencyPlanDescription) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FrequencyPlanDescription) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BaseFrequency != 0 {
		i = encodeVarintConfigurationServices(dAtA, i, uint64(m.BaseFrequency))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintConfigurationServices(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.BaseID) > 0 {
		i -= len(m.BaseID)
		copy(dAtA[i:], m.BaseID)
		i = encodeVarintConfigurationServices(dAtA, i, uint64(len(m.BaseID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintConfigurationServices(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListFrequencyPlansResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListFrequencyPlansResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListFrequencyPlansResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FrequencyPlans) > 0 {
		for iNdEx := len(m.FrequencyPlans) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FrequencyPlans[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintConfigurationServices(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintConfigurationServices(dAtA []byte, offset int, v uint64) int {
	offset -= sovConfigurationServices(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ListFrequencyPlansRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BaseFrequency != 0 {
		n += 1 + sovConfigurationServices(uint64(m.BaseFrequency))
	}
	return n
}

func (m *FrequencyPlanDescription) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovConfigurationServices(uint64(l))
	}
	l = len(m.BaseID)
	if l > 0 {
		n += 1 + l + sovConfigurationServices(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovConfigurationServices(uint64(l))
	}
	if m.BaseFrequency != 0 {
		n += 1 + sovConfigurationServices(uint64(m.BaseFrequency))
	}
	return n
}

func (m *ListFrequencyPlansResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.FrequencyPlans) > 0 {
		for _, e := range m.FrequencyPlans {
			l = e.Size()
			n += 1 + l + sovConfigurationServices(uint64(l))
		}
	}
	return n
}

func sovConfigurationServices(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozConfigurationServices(x uint64) (n int) {
	return sovConfigurationServices(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ListFrequencyPlansRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListFrequencyPlansRequest{`,
		`BaseFrequency:` + fmt.Sprintf("%v", this.BaseFrequency) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FrequencyPlanDescription) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FrequencyPlanDescription{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`BaseID:` + fmt.Sprintf("%v", this.BaseID) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`BaseFrequency:` + fmt.Sprintf("%v", this.BaseFrequency) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListFrequencyPlansResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForFrequencyPlans := "[]*FrequencyPlanDescription{"
	for _, f := range this.FrequencyPlans {
		repeatedStringForFrequencyPlans += strings.Replace(f.String(), "FrequencyPlanDescription", "FrequencyPlanDescription", 1) + ","
	}
	repeatedStringForFrequencyPlans += "}"
	s := strings.Join([]string{`&ListFrequencyPlansResponse{`,
		`FrequencyPlans:` + repeatedStringForFrequencyPlans + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringConfigurationServices(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ListFrequencyPlansRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfigurationServices
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListFrequencyPlansRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListFrequencyPlansRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseFrequency", wireType)
			}
			m.BaseFrequency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigurationServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BaseFrequency |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipConfigurationServices(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConfigurationServices
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthConfigurationServices
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FrequencyPlanDescription) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfigurationServices
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FrequencyPlanDescription: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FrequencyPlanDescription: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigurationServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfigurationServices
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfigurationServices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigurationServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfigurationServices
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfigurationServices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigurationServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfigurationServices
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfigurationServices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseFrequency", wireType)
			}
			m.BaseFrequency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigurationServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BaseFrequency |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipConfigurationServices(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConfigurationServices
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthConfigurationServices
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListFrequencyPlansResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfigurationServices
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListFrequencyPlansResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListFrequencyPlansResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrequencyPlans", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigurationServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfigurationServices
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfigurationServices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FrequencyPlans = append(m.FrequencyPlans, &FrequencyPlanDescription{})
			if err := m.FrequencyPlans[len(m.FrequencyPlans)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConfigurationServices(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConfigurationServices
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthConfigurationServices
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipConfigurationServices(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowConfigurationServices
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConfigurationServices
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConfigurationServices
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthConfigurationServices
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupConfigurationServices
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthConfigurationServices
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthConfigurationServices        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowConfigurationServices          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupConfigurationServices = fmt.Errorf("proto: unexpected end of group")
)
