// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lorawan-stack/api/deviceclaimingserver.proto

package ttnpb

import (
	context "context"
	fmt "fmt"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	go_thethings_network_lorawan_stack_v3_pkg_types "go.thethings.network/lorawan-stack/v3/pkg/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ClaimEndDeviceRequest struct {
	// Types that are valid to be assigned to SourceDevice:
	//	*ClaimEndDeviceRequest_AuthenticatedIdentifiers_
	//	*ClaimEndDeviceRequest_QrCode
	SourceDevice isClaimEndDeviceRequest_SourceDevice `protobuf_oneof:"source_device"`
	// Application identifiers of the target end device.
	TargetApplicationIds *ApplicationIdentifiers `protobuf:"bytes,3,opt,name=target_application_ids,json=targetApplicationIds,proto3" json:"target_application_ids,omitempty"`
	// End device ID of the target end device. If empty, use the source device ID.
	TargetDeviceId string `protobuf:"bytes,4,opt,name=target_device_id,json=targetDeviceId,proto3" json:"target_device_id,omitempty"`
	// The address of the Network Server where the device will be registered.
	// If set and if the source device is currently registered on a Network Server, settings will be transferred.
	// If not set, the device shall not be registered on a Network Server.
	TargetNetworkServerAddress string `protobuf:"bytes,7,opt,name=target_network_server_address,json=targetNetworkServerAddress,proto3" json:"target_network_server_address,omitempty"`
	// The KEK label of the Network Server to use for wrapping network session keys.
	TargetNetworkServerKekLabel string `protobuf:"bytes,8,opt,name=target_network_server_kek_label,json=targetNetworkServerKekLabel,proto3" json:"target_network_server_kek_label,omitempty"`
	// The address of the Application Server where the device will be registered.
	// If set and if the source device is currently registered on an Application Server, settings will be transferred.
	// If not set, the device shall not be registered on an Application Server.
	TargetApplicationServerAddress string `protobuf:"bytes,9,opt,name=target_application_server_address,json=targetApplicationServerAddress,proto3" json:"target_application_server_address,omitempty"`
	// The KEK label of the Application Server to use for wrapping the application session key.
	TargetApplicationServerKekLabel string `protobuf:"bytes,10,opt,name=target_application_server_kek_label,json=targetApplicationServerKekLabel,proto3" json:"target_application_server_kek_label,omitempty"`
	// The AS-ID of the Application Server to use.
	TargetApplicationServerId string `protobuf:"bytes,11,opt,name=target_application_server_id,json=targetApplicationServerId,proto3" json:"target_application_server_id,omitempty"`
	// Home NetID.
	TargetNetId *go_thethings_network_lorawan_stack_v3_pkg_types.NetID `protobuf:"bytes,13,opt,name=target_net_id,json=targetNetId,proto3,customtype=go.thethings.network/lorawan-stack/v3/pkg/types.NetID" json:"target_net_id,omitempty"`
	// If set, invalidate the authentication code with which the device gets claimed. This prohibits subsequent claiming requests.
	InvalidateAuthenticationCode bool     `protobuf:"varint,5,opt,name=invalidate_authentication_code,json=invalidateAuthenticationCode,proto3" json:"invalidate_authentication_code,omitempty"`
	XXX_NoUnkeyedLiteral         struct{} `json:"-"`
	XXX_sizecache                int32    `json:"-"`
}

func (m *ClaimEndDeviceRequest) Reset()      { *m = ClaimEndDeviceRequest{} }
func (*ClaimEndDeviceRequest) ProtoMessage() {}
func (*ClaimEndDeviceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8a7f6d184fc3dc3, []int{0}
}
func (m *ClaimEndDeviceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClaimEndDeviceRequest.Unmarshal(m, b)
}
func (m *ClaimEndDeviceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClaimEndDeviceRequest.Marshal(b, m, deterministic)
}
func (m *ClaimEndDeviceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClaimEndDeviceRequest.Merge(m, src)
}
func (m *ClaimEndDeviceRequest) XXX_Size() int {
	return xxx_messageInfo_ClaimEndDeviceRequest.Size(m)
}
func (m *ClaimEndDeviceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ClaimEndDeviceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ClaimEndDeviceRequest proto.InternalMessageInfo

type isClaimEndDeviceRequest_SourceDevice interface {
	isClaimEndDeviceRequest_SourceDevice()
}

type ClaimEndDeviceRequest_AuthenticatedIdentifiers_ struct {
	AuthenticatedIdentifiers *ClaimEndDeviceRequest_AuthenticatedIdentifiers `protobuf:"bytes,1,opt,name=authenticated_identifiers,json=authenticatedIdentifiers,proto3,oneof" json:"authenticated_identifiers,omitempty"`
}
type ClaimEndDeviceRequest_QrCode struct {
	QrCode []byte `protobuf:"bytes,2,opt,name=qr_code,json=qrCode,proto3,oneof" json:"qr_code,omitempty"`
}

func (*ClaimEndDeviceRequest_AuthenticatedIdentifiers_) isClaimEndDeviceRequest_SourceDevice() {}
func (*ClaimEndDeviceRequest_QrCode) isClaimEndDeviceRequest_SourceDevice()                    {}

func (m *ClaimEndDeviceRequest) GetSourceDevice() isClaimEndDeviceRequest_SourceDevice {
	if m != nil {
		return m.SourceDevice
	}
	return nil
}

func (m *ClaimEndDeviceRequest) GetAuthenticatedIdentifiers() *ClaimEndDeviceRequest_AuthenticatedIdentifiers {
	if x, ok := m.GetSourceDevice().(*ClaimEndDeviceRequest_AuthenticatedIdentifiers_); ok {
		return x.AuthenticatedIdentifiers
	}
	return nil
}

func (m *ClaimEndDeviceRequest) GetQrCode() []byte {
	if x, ok := m.GetSourceDevice().(*ClaimEndDeviceRequest_QrCode); ok {
		return x.QrCode
	}
	return nil
}

func (m *ClaimEndDeviceRequest) GetTargetApplicationIds() *ApplicationIdentifiers {
	if m != nil {
		return m.TargetApplicationIds
	}
	return nil
}

func (m *ClaimEndDeviceRequest) GetTargetDeviceId() string {
	if m != nil {
		return m.TargetDeviceId
	}
	return ""
}

func (m *ClaimEndDeviceRequest) GetTargetNetworkServerAddress() string {
	if m != nil {
		return m.TargetNetworkServerAddress
	}
	return ""
}

func (m *ClaimEndDeviceRequest) GetTargetNetworkServerKekLabel() string {
	if m != nil {
		return m.TargetNetworkServerKekLabel
	}
	return ""
}

func (m *ClaimEndDeviceRequest) GetTargetApplicationServerAddress() string {
	if m != nil {
		return m.TargetApplicationServerAddress
	}
	return ""
}

func (m *ClaimEndDeviceRequest) GetTargetApplicationServerKekLabel() string {
	if m != nil {
		return m.TargetApplicationServerKekLabel
	}
	return ""
}

func (m *ClaimEndDeviceRequest) GetTargetApplicationServerId() string {
	if m != nil {
		return m.TargetApplicationServerId
	}
	return ""
}

func (m *ClaimEndDeviceRequest) GetInvalidateAuthenticationCode() bool {
	if m != nil {
		return m.InvalidateAuthenticationCode
	}
	return false
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ClaimEndDeviceRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ClaimEndDeviceRequest_AuthenticatedIdentifiers_)(nil),
		(*ClaimEndDeviceRequest_QrCode)(nil),
	}
}

type ClaimEndDeviceRequest_AuthenticatedIdentifiers struct {
	// JoinEUI (or AppEUI) of the device to claim.
	JoinEui go_thethings_network_lorawan_stack_v3_pkg_types.EUI64 `protobuf:"bytes,1,opt,name=join_eui,json=joinEui,proto3,customtype=go.thethings.network/lorawan-stack/v3/pkg/types.EUI64" json:"join_eui"`
	// DevEUI of the device to claim.
	DevEui go_thethings_network_lorawan_stack_v3_pkg_types.EUI64 `protobuf:"bytes,2,opt,name=dev_eui,json=devEui,proto3,customtype=go.thethings.network/lorawan-stack/v3/pkg/types.EUI64" json:"dev_eui"`
	// Authentication code to prove ownership.
	// In the LoRa Alliance TR005 specification, this equals the OwnerToken.
	AuthenticationCode   string   `protobuf:"bytes,3,opt,name=authentication_code,json=authenticationCode,proto3" json:"authentication_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClaimEndDeviceRequest_AuthenticatedIdentifiers) Reset() {
	*m = ClaimEndDeviceRequest_AuthenticatedIdentifiers{}
}
func (*ClaimEndDeviceRequest_AuthenticatedIdentifiers) ProtoMessage() {}
func (*ClaimEndDeviceRequest_AuthenticatedIdentifiers) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8a7f6d184fc3dc3, []int{0, 0}
}
func (m *ClaimEndDeviceRequest_AuthenticatedIdentifiers) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClaimEndDeviceRequest_AuthenticatedIdentifiers.Unmarshal(m, b)
}
func (m *ClaimEndDeviceRequest_AuthenticatedIdentifiers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClaimEndDeviceRequest_AuthenticatedIdentifiers.Marshal(b, m, deterministic)
}
func (m *ClaimEndDeviceRequest_AuthenticatedIdentifiers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClaimEndDeviceRequest_AuthenticatedIdentifiers.Merge(m, src)
}
func (m *ClaimEndDeviceRequest_AuthenticatedIdentifiers) XXX_Size() int {
	return xxx_messageInfo_ClaimEndDeviceRequest_AuthenticatedIdentifiers.Size(m)
}
func (m *ClaimEndDeviceRequest_AuthenticatedIdentifiers) XXX_DiscardUnknown() {
	xxx_messageInfo_ClaimEndDeviceRequest_AuthenticatedIdentifiers.DiscardUnknown(m)
}

var xxx_messageInfo_ClaimEndDeviceRequest_AuthenticatedIdentifiers proto.InternalMessageInfo

func (m *ClaimEndDeviceRequest_AuthenticatedIdentifiers) GetAuthenticationCode() string {
	if m != nil {
		return m.AuthenticationCode
	}
	return ""
}

type AuthorizeApplicationRequest struct {
	ApplicationIds       *ApplicationIdentifiers `protobuf:"bytes,1,opt,name=application_ids,json=applicationIds,proto3" json:"application_ids,omitempty"`
	ApiKey               string                  `protobuf:"bytes,2,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *AuthorizeApplicationRequest) Reset()      { *m = AuthorizeApplicationRequest{} }
func (*AuthorizeApplicationRequest) ProtoMessage() {}
func (*AuthorizeApplicationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8a7f6d184fc3dc3, []int{1}
}
func (m *AuthorizeApplicationRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AuthorizeApplicationRequest.Unmarshal(m, b)
}
func (m *AuthorizeApplicationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AuthorizeApplicationRequest.Marshal(b, m, deterministic)
}
func (m *AuthorizeApplicationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthorizeApplicationRequest.Merge(m, src)
}
func (m *AuthorizeApplicationRequest) XXX_Size() int {
	return xxx_messageInfo_AuthorizeApplicationRequest.Size(m)
}
func (m *AuthorizeApplicationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthorizeApplicationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AuthorizeApplicationRequest proto.InternalMessageInfo

func (m *AuthorizeApplicationRequest) GetApplicationIds() *ApplicationIdentifiers {
	if m != nil {
		return m.ApplicationIds
	}
	return nil
}

func (m *AuthorizeApplicationRequest) GetApiKey() string {
	if m != nil {
		return m.ApiKey
	}
	return ""
}

type CUPSRedirection struct {
	// CUPS URI for LoRa Basics Station CUPS redirection.
	TargetCupsUri string `protobuf:"bytes,1,opt,name=target_cups_uri,json=targetCupsUri,proto3" json:"target_cups_uri,omitempty"`
	// The key set in the gateway to authenticate itself.
	CurrentGatewayKey string `protobuf:"bytes,2,opt,name=current_gateway_key,json=currentGatewayKey,proto3" json:"current_gateway_key,omitempty"`
	// Optional PEM encoded CA Root certificate. If this field is empty, DCS will attempt to dial the Target CUPS server and fetch the CA.
	TargetCupsTrust []byte `protobuf:"bytes,3,opt,name=target_cups_trust,json=targetCupsTrust,proto3" json:"target_cups_trust,omitempty"`
	// CUPS Credentials for the gateway.
	//
	// Types that are valid to be assigned to GatewayCredentials:
	//	*CUPSRedirection_ClientTls
	//	*CUPSRedirection_AuthToken
	GatewayCredentials   isCUPSRedirection_GatewayCredentials `protobuf_oneof:"gateway_credentials"`
	XXX_NoUnkeyedLiteral struct{}                             `json:"-"`
	XXX_sizecache        int32                                `json:"-"`
}

func (m *CUPSRedirection) Reset()      { *m = CUPSRedirection{} }
func (*CUPSRedirection) ProtoMessage() {}
func (*CUPSRedirection) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8a7f6d184fc3dc3, []int{2}
}
func (m *CUPSRedirection) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CUPSRedirection.Unmarshal(m, b)
}
func (m *CUPSRedirection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CUPSRedirection.Marshal(b, m, deterministic)
}
func (m *CUPSRedirection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CUPSRedirection.Merge(m, src)
}
func (m *CUPSRedirection) XXX_Size() int {
	return xxx_messageInfo_CUPSRedirection.Size(m)
}
func (m *CUPSRedirection) XXX_DiscardUnknown() {
	xxx_messageInfo_CUPSRedirection.DiscardUnknown(m)
}

var xxx_messageInfo_CUPSRedirection proto.InternalMessageInfo

type isCUPSRedirection_GatewayCredentials interface {
	isCUPSRedirection_GatewayCredentials()
}

type CUPSRedirection_ClientTls struct {
	ClientTls *CUPSRedirection_ClientTLS `protobuf:"bytes,4,opt,name=client_tls,json=clientTls,proto3,oneof" json:"client_tls,omitempty"`
}
type CUPSRedirection_AuthToken struct {
	AuthToken string `protobuf:"bytes,5,opt,name=auth_token,json=authToken,proto3,oneof" json:"auth_token,omitempty"`
}

func (*CUPSRedirection_ClientTls) isCUPSRedirection_GatewayCredentials() {}
func (*CUPSRedirection_AuthToken) isCUPSRedirection_GatewayCredentials() {}

func (m *CUPSRedirection) GetGatewayCredentials() isCUPSRedirection_GatewayCredentials {
	if m != nil {
		return m.GatewayCredentials
	}
	return nil
}

func (m *CUPSRedirection) GetTargetCupsUri() string {
	if m != nil {
		return m.TargetCupsUri
	}
	return ""
}

func (m *CUPSRedirection) GetCurrentGatewayKey() string {
	if m != nil {
		return m.CurrentGatewayKey
	}
	return ""
}

func (m *CUPSRedirection) GetTargetCupsTrust() []byte {
	if m != nil {
		return m.TargetCupsTrust
	}
	return nil
}

func (m *CUPSRedirection) GetClientTls() *CUPSRedirection_ClientTLS {
	if x, ok := m.GetGatewayCredentials().(*CUPSRedirection_ClientTls); ok {
		return x.ClientTls
	}
	return nil
}

func (m *CUPSRedirection) GetAuthToken() string {
	if x, ok := m.GetGatewayCredentials().(*CUPSRedirection_AuthToken); ok {
		return x.AuthToken
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CUPSRedirection) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CUPSRedirection_ClientTls)(nil),
		(*CUPSRedirection_AuthToken)(nil),
	}
}

type CUPSRedirection_ClientTLS struct {
	// PEM encoded Client Certificate.
	Cert []byte `protobuf:"bytes,1,opt,name=cert,proto3" json:"cert,omitempty"`
	// PEM encoded Client Private Key.
	Key                  []byte   `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CUPSRedirection_ClientTLS) Reset()      { *m = CUPSRedirection_ClientTLS{} }
func (*CUPSRedirection_ClientTLS) ProtoMessage() {}
func (*CUPSRedirection_ClientTLS) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8a7f6d184fc3dc3, []int{2, 0}
}
func (m *CUPSRedirection_ClientTLS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CUPSRedirection_ClientTLS.Unmarshal(m, b)
}
func (m *CUPSRedirection_ClientTLS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CUPSRedirection_ClientTLS.Marshal(b, m, deterministic)
}
func (m *CUPSRedirection_ClientTLS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CUPSRedirection_ClientTLS.Merge(m, src)
}
func (m *CUPSRedirection_ClientTLS) XXX_Size() int {
	return xxx_messageInfo_CUPSRedirection_ClientTLS.Size(m)
}
func (m *CUPSRedirection_ClientTLS) XXX_DiscardUnknown() {
	xxx_messageInfo_CUPSRedirection_ClientTLS.DiscardUnknown(m)
}

var xxx_messageInfo_CUPSRedirection_ClientTLS proto.InternalMessageInfo

func (m *CUPSRedirection_ClientTLS) GetCert() []byte {
	if m != nil {
		return m.Cert
	}
	return nil
}

func (m *CUPSRedirection_ClientTLS) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

type ClaimGatewayRequest struct {
	// Types that are valid to be assigned to SourceGateway:
	//	*ClaimGatewayRequest_AuthenticatedIdentifiers_
	//	*ClaimGatewayRequest_QrCode
	SourceGateway isClaimGatewayRequest_SourceGateway `protobuf_oneof:"source_gateway"`
	// Collaborator to grant all rights on the target gateway.
	Collaborator *OrganizationOrUserIdentifiers `protobuf:"bytes,3,opt,name=collaborator,proto3" json:"collaborator,omitempty"`
	// Gateway ID for the target gateway. This must be a unique value.
	// If this is not set, the target ID for the target gateway will be set to `<gateway-eui>`.
	TargetGatewayId string `protobuf:"bytes,4,opt,name=target_gateway_id,json=targetGatewayId,proto3" json:"target_gateway_id,omitempty"`
	// Target Gateway Server Address for the target gateway.
	TargetGatewayServerAddress string `protobuf:"bytes,5,opt,name=target_gateway_server_address,json=targetGatewayServerAddress,proto3" json:"target_gateway_server_address,omitempty"`
	// Parameters to set CUPS redirection for the gateway.
	CupsRedirection *CUPSRedirection `protobuf:"bytes,6,opt,name=cups_redirection,json=cupsRedirection,proto3" json:"cups_redirection,omitempty"`
	// Frequency plan ID of the target gateway.
	// This equals the first element of the frequency_plan_ids field.
	TargetFrequencyPlanId string   `protobuf:"bytes,7,opt,name=target_frequency_plan_id,json=targetFrequencyPlanId,proto3" json:"target_frequency_plan_id,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *ClaimGatewayRequest) Reset()      { *m = ClaimGatewayRequest{} }
func (*ClaimGatewayRequest) ProtoMessage() {}
func (*ClaimGatewayRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8a7f6d184fc3dc3, []int{3}
}
func (m *ClaimGatewayRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClaimGatewayRequest.Unmarshal(m, b)
}
func (m *ClaimGatewayRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClaimGatewayRequest.Marshal(b, m, deterministic)
}
func (m *ClaimGatewayRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClaimGatewayRequest.Merge(m, src)
}
func (m *ClaimGatewayRequest) XXX_Size() int {
	return xxx_messageInfo_ClaimGatewayRequest.Size(m)
}
func (m *ClaimGatewayRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ClaimGatewayRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ClaimGatewayRequest proto.InternalMessageInfo

type isClaimGatewayRequest_SourceGateway interface {
	isClaimGatewayRequest_SourceGateway()
}

type ClaimGatewayRequest_AuthenticatedIdentifiers_ struct {
	AuthenticatedIdentifiers *ClaimGatewayRequest_AuthenticatedIdentifiers `protobuf:"bytes,1,opt,name=authenticated_identifiers,json=authenticatedIdentifiers,proto3,oneof" json:"authenticated_identifiers,omitempty"`
}
type ClaimGatewayRequest_QrCode struct {
	QrCode []byte `protobuf:"bytes,2,opt,name=qr_code,json=qrCode,proto3,oneof" json:"qr_code,omitempty"`
}

func (*ClaimGatewayRequest_AuthenticatedIdentifiers_) isClaimGatewayRequest_SourceGateway() {}
func (*ClaimGatewayRequest_QrCode) isClaimGatewayRequest_SourceGateway()                    {}

func (m *ClaimGatewayRequest) GetSourceGateway() isClaimGatewayRequest_SourceGateway {
	if m != nil {
		return m.SourceGateway
	}
	return nil
}

func (m *ClaimGatewayRequest) GetAuthenticatedIdentifiers() *ClaimGatewayRequest_AuthenticatedIdentifiers {
	if x, ok := m.GetSourceGateway().(*ClaimGatewayRequest_AuthenticatedIdentifiers_); ok {
		return x.AuthenticatedIdentifiers
	}
	return nil
}

func (m *ClaimGatewayRequest) GetQrCode() []byte {
	if x, ok := m.GetSourceGateway().(*ClaimGatewayRequest_QrCode); ok {
		return x.QrCode
	}
	return nil
}

func (m *ClaimGatewayRequest) GetCollaborator() *OrganizationOrUserIdentifiers {
	if m != nil {
		return m.Collaborator
	}
	return nil
}

func (m *ClaimGatewayRequest) GetTargetGatewayId() string {
	if m != nil {
		return m.TargetGatewayId
	}
	return ""
}

func (m *ClaimGatewayRequest) GetTargetGatewayServerAddress() string {
	if m != nil {
		return m.TargetGatewayServerAddress
	}
	return ""
}

func (m *ClaimGatewayRequest) GetCupsRedirection() *CUPSRedirection {
	if m != nil {
		return m.CupsRedirection
	}
	return nil
}

func (m *ClaimGatewayRequest) GetTargetFrequencyPlanId() string {
	if m != nil {
		return m.TargetFrequencyPlanId
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ClaimGatewayRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ClaimGatewayRequest_AuthenticatedIdentifiers_)(nil),
		(*ClaimGatewayRequest_QrCode)(nil),
	}
}

type ClaimGatewayRequest_AuthenticatedIdentifiers struct {
	GatewayEui           go_thethings_network_lorawan_stack_v3_pkg_types.EUI64 `protobuf:"bytes,1,opt,name=gateway_eui,json=gatewayEui,proto3,customtype=go.thethings.network/lorawan-stack/v3/pkg/types.EUI64" json:"gateway_eui"`
	AuthenticationCode   []byte                                                `protobuf:"bytes,2,opt,name=authentication_code,json=authenticationCode,proto3" json:"authentication_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                              `json:"-"`
	XXX_sizecache        int32                                                 `json:"-"`
}

func (m *ClaimGatewayRequest_AuthenticatedIdentifiers) Reset() {
	*m = ClaimGatewayRequest_AuthenticatedIdentifiers{}
}
func (*ClaimGatewayRequest_AuthenticatedIdentifiers) ProtoMessage() {}
func (*ClaimGatewayRequest_AuthenticatedIdentifiers) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8a7f6d184fc3dc3, []int{3, 0}
}
func (m *ClaimGatewayRequest_AuthenticatedIdentifiers) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClaimGatewayRequest_AuthenticatedIdentifiers.Unmarshal(m, b)
}
func (m *ClaimGatewayRequest_AuthenticatedIdentifiers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClaimGatewayRequest_AuthenticatedIdentifiers.Marshal(b, m, deterministic)
}
func (m *ClaimGatewayRequest_AuthenticatedIdentifiers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClaimGatewayRequest_AuthenticatedIdentifiers.Merge(m, src)
}
func (m *ClaimGatewayRequest_AuthenticatedIdentifiers) XXX_Size() int {
	return xxx_messageInfo_ClaimGatewayRequest_AuthenticatedIdentifiers.Size(m)
}
func (m *ClaimGatewayRequest_AuthenticatedIdentifiers) XXX_DiscardUnknown() {
	xxx_messageInfo_ClaimGatewayRequest_AuthenticatedIdentifiers.DiscardUnknown(m)
}

var xxx_messageInfo_ClaimGatewayRequest_AuthenticatedIdentifiers proto.InternalMessageInfo

func (m *ClaimGatewayRequest_AuthenticatedIdentifiers) GetAuthenticationCode() []byte {
	if m != nil {
		return m.AuthenticationCode
	}
	return nil
}

type AuthorizeGatewayRequest struct {
	GatewayIds           *GatewayIdentifiers `protobuf:"bytes,1,opt,name=gateway_ids,json=gatewayIds,proto3" json:"gateway_ids,omitempty"`
	ApiKey               string              `protobuf:"bytes,2,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *AuthorizeGatewayRequest) Reset()      { *m = AuthorizeGatewayRequest{} }
func (*AuthorizeGatewayRequest) ProtoMessage() {}
func (*AuthorizeGatewayRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8a7f6d184fc3dc3, []int{4}
}
func (m *AuthorizeGatewayRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AuthorizeGatewayRequest.Unmarshal(m, b)
}
func (m *AuthorizeGatewayRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AuthorizeGatewayRequest.Marshal(b, m, deterministic)
}
func (m *AuthorizeGatewayRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthorizeGatewayRequest.Merge(m, src)
}
func (m *AuthorizeGatewayRequest) XXX_Size() int {
	return xxx_messageInfo_AuthorizeGatewayRequest.Size(m)
}
func (m *AuthorizeGatewayRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthorizeGatewayRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AuthorizeGatewayRequest proto.InternalMessageInfo

func (m *AuthorizeGatewayRequest) GetGatewayIds() *GatewayIdentifiers {
	if m != nil {
		return m.GatewayIds
	}
	return nil
}

func (m *AuthorizeGatewayRequest) GetApiKey() string {
	if m != nil {
		return m.ApiKey
	}
	return ""
}

func init() {
	proto.RegisterType((*ClaimEndDeviceRequest)(nil), "ttn.lorawan.v3.ClaimEndDeviceRequest")
	golang_proto.RegisterType((*ClaimEndDeviceRequest)(nil), "ttn.lorawan.v3.ClaimEndDeviceRequest")
	proto.RegisterType((*ClaimEndDeviceRequest_AuthenticatedIdentifiers)(nil), "ttn.lorawan.v3.ClaimEndDeviceRequest.AuthenticatedIdentifiers")
	golang_proto.RegisterType((*ClaimEndDeviceRequest_AuthenticatedIdentifiers)(nil), "ttn.lorawan.v3.ClaimEndDeviceRequest.AuthenticatedIdentifiers")
	proto.RegisterType((*AuthorizeApplicationRequest)(nil), "ttn.lorawan.v3.AuthorizeApplicationRequest")
	golang_proto.RegisterType((*AuthorizeApplicationRequest)(nil), "ttn.lorawan.v3.AuthorizeApplicationRequest")
	proto.RegisterType((*CUPSRedirection)(nil), "ttn.lorawan.v3.CUPSRedirection")
	golang_proto.RegisterType((*CUPSRedirection)(nil), "ttn.lorawan.v3.CUPSRedirection")
	proto.RegisterType((*CUPSRedirection_ClientTLS)(nil), "ttn.lorawan.v3.CUPSRedirection.ClientTLS")
	golang_proto.RegisterType((*CUPSRedirection_ClientTLS)(nil), "ttn.lorawan.v3.CUPSRedirection.ClientTLS")
	proto.RegisterType((*ClaimGatewayRequest)(nil), "ttn.lorawan.v3.ClaimGatewayRequest")
	golang_proto.RegisterType((*ClaimGatewayRequest)(nil), "ttn.lorawan.v3.ClaimGatewayRequest")
	proto.RegisterType((*ClaimGatewayRequest_AuthenticatedIdentifiers)(nil), "ttn.lorawan.v3.ClaimGatewayRequest.AuthenticatedIdentifiers")
	golang_proto.RegisterType((*ClaimGatewayRequest_AuthenticatedIdentifiers)(nil), "ttn.lorawan.v3.ClaimGatewayRequest.AuthenticatedIdentifiers")
	proto.RegisterType((*AuthorizeGatewayRequest)(nil), "ttn.lorawan.v3.AuthorizeGatewayRequest")
	golang_proto.RegisterType((*AuthorizeGatewayRequest)(nil), "ttn.lorawan.v3.AuthorizeGatewayRequest")
}

func init() {
	proto.RegisterFile("lorawan-stack/api/deviceclaimingserver.proto", fileDescriptor_e8a7f6d184fc3dc3)
}
func init() {
	golang_proto.RegisterFile("lorawan-stack/api/deviceclaimingserver.proto", fileDescriptor_e8a7f6d184fc3dc3)
}

var fileDescriptor_e8a7f6d184fc3dc3 = []byte{
	// 1570 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x57, 0xcd, 0x6f, 0x1b, 0x45,
	0x14, 0xf7, 0xc6, 0x49, 0x9c, 0x4c, 0xbe, 0xdc, 0xcd, 0x47, 0xb7, 0x6e, 0x70, 0x52, 0x27, 0xa1,
	0x49, 0x88, 0xd7, 0xd4, 0xa1, 0x15, 0x0d, 0x2d, 0x69, 0x36, 0x0d, 0xc4, 0x69, 0x69, 0xab, 0x6d,
	0x52, 0x41, 0xd3, 0xc4, 0x9a, 0xec, 0x4e, 0x9c, 0xc5, 0xdb, 0x5d, 0x77, 0x76, 0xec, 0xe2, 0xa4,
	0x11, 0x11, 0x42, 0x02, 0x7a, 0xe0, 0x43, 0x48, 0xbd, 0x21, 0x71, 0xe1, 0x4f, 0xe0, 0x0e, 0x37,
	0xce, 0x70, 0x41, 0x3d, 0x54, 0xa2, 0xe5, 0xc0, 0x91, 0x23, 0xca, 0x05, 0x34, 0xb3, 0xb3, 0xf6,
	0x7a, 0x63, 0xd3, 0x50, 0x15, 0xa9, 0xb7, 0xd9, 0x9d, 0x37, 0xbf, 0xf7, 0x9b, 0xf7, 0xde, 0xfc,
	0xde, 0x0c, 0x98, 0x32, 0x6d, 0x0c, 0xef, 0x42, 0x2b, 0xe9, 0x10, 0xa8, 0xe5, 0x53, 0xb0, 0x60,
	0xa4, 0x74, 0x54, 0x32, 0x34, 0xa4, 0x99, 0xd0, 0xb8, 0x6d, 0x58, 0x39, 0x07, 0xe1, 0x12, 0xc2,
	0x72, 0x01, 0xdb, 0xc4, 0x16, 0xbb, 0x09, 0xb1, 0x64, 0xbe, 0x42, 0x2e, 0x4d, 0xc7, 0xe6, 0x72,
	0x06, 0xd9, 0x2a, 0x6e, 0xc8, 0x9a, 0x7d, 0x3b, 0x85, 0xac, 0x92, 0x5d, 0x2e, 0x60, 0xfb, 0x83,
	0x72, 0x8a, 0x19, 0x6b, 0xc9, 0x1c, 0xb2, 0x92, 0x25, 0x68, 0x1a, 0x3a, 0x24, 0x28, 0x75, 0x60,
	0xe0, 0x42, 0xc6, 0x92, 0x3e, 0x88, 0x9c, 0x9d, 0xb3, 0xdd, 0xc5, 0x1b, 0xc5, 0x4d, 0xf6, 0xc5,
	0x3e, 0xd8, 0x88, 0x9b, 0x0f, 0xe6, 0x6c, 0x3b, 0x67, 0x22, 0x46, 0x14, 0x5a, 0x96, 0x4d, 0x20,
	0x31, 0x6c, 0xcb, 0xe1, 0xb3, 0xc7, 0xf9, 0x6c, 0x05, 0x03, 0xdd, 0x2e, 0x90, 0x32, 0x9f, 0x1c,
	0x39, 0xb8, 0x55, 0x43, 0x47, 0x16, 0x31, 0x36, 0x0d, 0x84, 0x39, 0x42, 0xe2, 0xef, 0x0e, 0xd0,
	0x3f, 0x4f, 0xb7, 0xbe, 0x60, 0xe9, 0x17, 0x59, 0x20, 0x54, 0x74, 0xa7, 0x88, 0x1c, 0x22, 0xee,
	0x82, 0x63, 0xb0, 0x48, 0xb6, 0xe8, 0x02, 0x0d, 0x12, 0xa4, 0x67, 0x7d, 0x8b, 0x25, 0x61, 0x58,
	0x18, 0xef, 0x48, 0xbf, 0x29, 0xd7, 0xc6, 0x47, 0xae, 0x8b, 0x24, 0xcf, 0xf9, 0x61, 0x32, 0x55,
	0x94, 0xc5, 0x90, 0x2a, 0xc1, 0x06, 0x73, 0xe2, 0x18, 0x88, 0xdc, 0xc1, 0x59, 0xcd, 0xd6, 0x91,
	0xd4, 0x34, 0x2c, 0x8c, 0x77, 0x2a, 0x60, 0x5f, 0x89, 0x6c, 0xb7, 0x44, 0x43, 0xd2, 0x5e, 0xdb,
	0x62, 0x48, 0x6d, 0xbd, 0x83, 0xe7, 0x6d, 0x1d, 0x89, 0x9b, 0x60, 0x80, 0x40, 0x9c, 0x43, 0x24,
	0x0b, 0x0b, 0x05, 0x93, 0xc2, 0x18, 0xb6, 0x95, 0x35, 0x74, 0x47, 0x0a, 0x33, 0x8a, 0x2f, 0x07,
	0x29, 0xce, 0x55, 0xcd, 0x7c, 0xee, 0x94, 0xb6, 0x7d, 0xa5, 0xe5, 0xbe, 0xd0, 0x14, 0x15, 0xd4,
	0x3e, 0x17, 0xaf, 0xc6, 0xce, 0x11, 0x97, 0x41, 0x94, 0xfb, 0x71, 0xcb, 0x25, 0x6b, 0xe8, 0x52,
	0xf3, 0xb0, 0x30, 0xde, 0xae, 0x4c, 0xee, 0x2b, 0x27, 0xf1, 0x98, 0x34, 0x9a, 0x3e, 0xb1, 0xbe,
	0x0a, 0x93, 0xdb, 0xaf, 0x26, 0xcf, 0xae, 0x8d, 0xcf, 0xce, 0xac, 0x26, 0xd7, 0x66, 0xbd, 0xcf,
	0x89, 0x9d, 0xf4, 0xd4, 0xee, 0xe8, 0xbd, 0xf5, 0x51, 0xb5, 0xdb, 0xc5, 0x70, 0xc3, 0x93, 0xd1,
	0xc5, 0x9f, 0x05, 0xf0, 0x12, 0x87, 0xb5, 0x10, 0xb9, 0x6b, 0xe3, 0x7c, 0xd6, 0xad, 0xbf, 0x2c,
	0xd4, 0x75, 0x8c, 0x1c, 0x47, 0x8a, 0x30, 0x1f, 0x9f, 0x0b, 0xfb, 0xca, 0x7d, 0x01, 0x7f, 0x22,
	0xa4, 0x3f, 0x16, 0xd6, 0xc7, 0x67, 0x67, 0xa8, 0x03, 0x98, 0xdc, 0x9e, 0x4b, 0xde, 0xa4, 0xf8,
	0xf7, 0x7c, 0xe3, 0xea, 0xf0, 0x56, 0x72, 0x6d, 0xd2, 0x37, 0x31, 0x71, 0x4b, 0x9e, 0x98, 0xa4,
	0xeb, 0xe6, 0x92, 0x37, 0x39, 0xaf, 0x7b, 0xbe, 0x71, 0x75, 0xc8, 0xd6, 0x55, 0x27, 0x26, 0xc6,
	0x67, 0x67, 0x66, 0x56, 0xe9, 0x68, 0xe7, 0xd4, 0xd4, 0xe9, 0xdd, 0x89, 0x59, 0xb6, 0x91, 0x98,
	0xcb, 0xfa, 0x8a, 0x4b, 0xfa, 0x3a, 0xe3, 0x3c, 0xe7, 0x52, 0x16, 0xaf, 0x80, 0xa1, 0xfa, 0x7b,
	0xca, 0xa3, 0x7c, 0xd6, 0x84, 0x1b, 0xc8, 0x94, 0xda, 0xd8, 0xae, 0x68, 0xcc, 0x71, 0x58, 0xda,
	0x8b, 0xaa, 0xc7, 0xeb, 0xc0, 0x5d, 0x42, 0xf9, 0xcb, 0xd4, 0x58, 0x7c, 0x28, 0x80, 0x13, 0x75,
	0x72, 0x1c, 0x08, 0x54, 0xfb, 0x8b, 0x19, 0xa8, 0xf8, 0x81, 0x6a, 0xaa, 0x0d, 0xd6, 0x0d, 0x30,
	0xd2, 0x78, 0x6f, 0xd5, 0x80, 0x81, 0x40, 0xc0, 0x86, 0x1a, 0xc0, 0x56, 0x82, 0xb6, 0x08, 0x06,
	0x1b, 0xe3, 0x1a, 0xba, 0xd4, 0xc1, 0x00, 0x23, 0xfb, 0x4a, 0x33, 0x6e, 0x92, 0x74, 0xf5, 0x58,
	0x03, 0xbc, 0x8c, 0x2e, 0xae, 0x81, 0xae, 0x6a, 0x3a, 0xe9, 0xd2, 0x2e, 0x76, 0x1c, 0xcf, 0x3e,
	0x7c, 0x34, 0x74, 0x3a, 0x67, 0xcb, 0x64, 0x0b, 0x91, 0x2d, 0xaa, 0x9b, 0x32, 0xcf, 0x76, 0xaa,
	0x56, 0x76, 0x4a, 0xd3, 0xa9, 0x42, 0x3e, 0x97, 0x22, 0xe5, 0x02, 0x72, 0xe4, 0x2b, 0x88, 0x64,
	0x2e, 0xaa, 0x1d, 0x95, 0x6c, 0x67, 0x74, 0xf1, 0x22, 0x88, 0x1b, 0x96, 0xa7, 0x91, 0x59, 0x9f,
	0x1c, 0x50, 0xbe, 0xec, 0xf8, 0xb7, 0x0c, 0x0b, 0xe3, 0x6d, 0xea, 0x60, 0xd5, 0x6a, 0xae, 0xc6,
	0x88, 0xca, 0x40, 0xec, 0x41, 0x13, 0x90, 0x1a, 0xc9, 0x8c, 0xf8, 0x2e, 0x68, 0x7b, 0xdf, 0x36,
	0xac, 0x2c, 0x2a, 0x1a, 0x4c, 0xb8, 0x3a, 0x95, 0xf3, 0x3f, 0x3d, 0x1a, 0x0a, 0x3d, 0xcb, 0x06,
	0x16, 0x56, 0x32, 0x67, 0x5e, 0x53, 0x23, 0x14, 0x6e, 0xa1, 0x68, 0x88, 0x37, 0x40, 0x44, 0x47,
	0x25, 0x06, 0xdc, 0xf4, 0x3c, 0x80, 0x5b, 0x75, 0x54, 0xa2, 0xb8, 0x8b, 0xa0, 0xb7, 0x5e, 0x24,
	0xc2, 0x2c, 0x69, 0x47, 0xf7, 0x95, 0x3e, 0x2c, 0xa6, 0xa3, 0xeb, 0xab, 0xbc, 0x62, 0x77, 0x4e,
	0x4d, 0x4d, 0xa7, 0x77, 0x47, 0x55, 0x11, 0x1e, 0x08, 0x8c, 0xd2, 0x07, 0xba, 0x1c, 0xbb, 0x88,
	0x35, 0xc4, 0x75, 0x4b, 0x0c, 0xff, 0xa5, 0x08, 0x4b, 0xcd, 0x6d, 0xad, 0xd1, 0xc8, 0x52, 0x73,
	0x5b, 0x67, 0xb4, 0x2b, 0xf1, 0x8d, 0x00, 0x8e, 0xd3, 0xd0, 0xd9, 0xd8, 0xd8, 0x46, 0xbe, 0x02,
	0xf0, 0xfa, 0xc0, 0x7b, 0xa0, 0x27, 0x28, 0xad, 0xc2, 0x33, 0x4a, 0x6b, 0x37, 0xac, 0x15, 0xd5,
	0x11, 0x10, 0x81, 0x05, 0x23, 0x9b, 0x47, 0x65, 0x16, 0xbe, 0x76, 0xa6, 0xf1, 0xb8, 0x25, 0x2a,
	0x48, 0x7b, 0x82, 0xda, 0x0a, 0x0b, 0xc6, 0x25, 0x54, 0x4e, 0x7c, 0x16, 0x06, 0x3d, 0xf3, 0x2b,
	0xd7, 0xae, 0xab, 0x48, 0x37, 0x30, 0xd2, 0xe8, 0x5a, 0xf1, 0x0d, 0xd0, 0xc3, 0x6b, 0x52, 0x2b,
	0x16, 0x9c, 0x6c, 0x11, 0xbb, 0x89, 0x6d, 0x57, 0x7a, 0xf7, 0x95, 0x28, 0xee, 0x96, 0xf6, 0x9a,
	0xd2, 0xad, 0xeb, 0x5b, 0x84, 0x14, 0x9c, 0x4f, 0x05, 0x41, 0xe5, 0xf5, 0x3b, 0x5f, 0x2c, 0x38,
	0x2b, 0xd8, 0x10, 0x5f, 0x07, 0xbd, 0x5a, 0x11, 0x63, 0x64, 0x91, 0x6c, 0x0e, 0x12, 0x74, 0x17,
	0x96, 0x7d, 0x0c, 0xaa, 0x47, 0xec, 0x08, 0x37, 0x7a, 0xdb, 0xb5, 0xb9, 0x84, 0xca, 0xe2, 0x24,
	0x38, 0xe2, 0x77, 0x4b, 0x70, 0xd1, 0x21, 0x2c, 0x29, 0x9d, 0x6a, 0x4f, 0xd5, 0xc7, 0x32, 0xfd,
	0x2d, 0x2e, 0x01, 0xa0, 0x99, 0x06, 0x75, 0x42, 0x4c, 0x87, 0xb5, 0x8a, 0x8e, 0xf4, 0xc4, 0x81,
	0x7e, 0x59, 0xbb, 0x2f, 0x79, 0x9e, 0xad, 0x58, 0xbe, 0x7c, 0x7d, 0x31, 0xa4, 0xb6, 0xbb, 0xcb,
	0x97, 0x4d, 0x47, 0x9c, 0x00, 0x80, 0xa6, 0x36, 0x4b, 0xec, 0x3c, 0xb2, 0xd8, 0x79, 0xf0, 0x11,
	0xa5, 0xa6, 0x74, 0x76, 0x99, 0x4e, 0xc6, 0x16, 0x40, 0x7b, 0x05, 0x44, 0x1c, 0x04, 0xcd, 0x1a,
	0xc2, 0x84, 0x17, 0x3d, 0x5d, 0xb1, 0x1d, 0x96, 0xf6, 0x2e, 0xa8, 0xec, 0xaf, 0x18, 0x03, 0x61,
	0x6f, 0xdf, 0xfe, 0x49, 0xfa, 0x53, 0xe9, 0x07, 0xbd, 0x5e, 0x6c, 0x34, 0x8c, 0x58, 0x32, 0xa1,
	0xe9, 0x24, 0xbe, 0x8d, 0x80, 0x5e, 0xd6, 0xe3, 0x79, 0x50, 0xbc, 0x1a, 0xd9, 0x79, 0xfa, 0x5d,
	0xe1, 0x5c, 0xdd, 0xbb, 0x42, 0x2d, 0xce, 0xff, 0x7a, 0x53, 0x58, 0x05, 0x9d, 0x9a, 0x6d, 0x9a,
	0x70, 0xc3, 0xc6, 0x90, 0xd8, 0x98, 0xdf, 0x0f, 0x92, 0x41, 0x5a, 0x57, 0x71, 0x0e, 0x5a, 0xc6,
	0x36, 0xab, 0xd1, 0xab, 0x78, 0xc5, 0xa1, 0x1a, 0x58, 0xaf, 0x96, 0x6b, 0xc0, 0xc4, 0x1b, 0x95,
	0xca, 0xf0, 0xc2, 0xf6, 0x4c, 0xf7, 0x03, 0x5e, 0x45, 0x3c, 0x2a, 0xb5, 0x17, 0x04, 0x0f, 0x38,
	0xd0, 0xf7, 0x5a, 0x5e, 0xe8, 0x0b, 0x02, 0xdf, 0x49, 0x6d, 0xcf, 0x5b, 0x02, 0x51, 0x76, 0x7e,
	0x70, 0xb5, 0xf2, 0xa5, 0x56, 0x96, 0x8d, 0xa1, 0xa7, 0x1c, 0x10, 0xb5, 0x87, 0x2e, 0xf4, 0x2b,
	0xc1, 0x05, 0x20, 0xf1, 0xf8, 0x6c, 0x62, 0x5a, 0x44, 0x96, 0x56, 0xce, 0x16, 0x4c, 0x48, 0x75,
	0x8a, 0xdf, 0x9d, 0x78, 0x8f, 0xbb, 0xa0, 0xf6, 0xbb, 0x86, 0x6f, 0x79, 0x76, 0xd7, 0x4c, 0x68,
	0x65, 0xf4, 0xd8, 0xf7, 0xc2, 0xbf, 0xb4, 0x8e, 0x75, 0xd0, 0xe1, 0xc5, 0xfd, 0xb9, 0x75, 0x0f,
	0xc0, 0x11, 0xa9, 0xd0, 0x9f, 0xad, 0x2f, 0xf4, 0xb5, 0x67, 0x32, 0x5a, 0x57, 0xd9, 0xfb, 0x41,
	0x37, 0x57, 0x76, 0x8e, 0xc7, 0xa4, 0x3d, 0x71, 0x5f, 0x00, 0x47, 0x2b, 0x72, 0x1e, 0x38, 0xa6,
	0xef, 0x54, 0x77, 0x53, 0x95, 0xf1, 0x44, 0x30, 0xe6, 0x95, 0xea, 0xab, 0x57, 0xf6, 0x1e, 0x79,
	0x2a, 0xdf, 0xc3, 0x41, 0xf9, 0x76, 0x43, 0x1d, 0xad, 0x68, 0x77, 0xfa, 0xc7, 0x30, 0x38, 0x5a,
	0x79, 0x0e, 0xcc, 0xf3, 0x17, 0x96, 0x5b, 0x0c, 0xa2, 0x09, 0x5a, 0xd8, 0x1f, 0x71, 0xec, 0x50,
	0xaf, 0x88, 0xd8, 0x68, 0xd0, 0xac, 0x62, 0xe1, 0x63, 0x9a, 0x18, 0xf8, 0xe8, 0x97, 0xdf, 0xbf,
	0x6e, 0x8a, 0x26, 0x3a, 0x52, 0x48, 0xd7, 0x9c, 0x14, 0x7b, 0xd5, 0xcd, 0x08, 0x93, 0xe2, 0x77,
	0x02, 0xe8, 0xab, 0xd7, 0xe5, 0xc4, 0x57, 0x0e, 0x74, 0xb1, 0xc6, 0xbd, 0x30, 0x36, 0x20, 0xbb,
	0x0f, 0x2e, 0xd9, 0x7b, 0x70, 0xc9, 0x0b, 0xf4, 0xc1, 0x95, 0x58, 0x64, 0x5e, 0x95, 0xc4, 0x79,
	0xd7, 0xab, 0xaf, 0xcd, 0x39, 0xa9, 0x9d, 0x40, 0xf7, 0x94, 0x6b, 0xbf, 0x77, 0x53, 0xd0, 0x73,
	0x48, 0x79, 0x7e, 0x21, 0x80, 0x81, 0x15, 0x0b, 0xd6, 0x63, 0x7a, 0xc8, 0x7e, 0xdb, 0x90, 0xe4,
	0x69, 0x46, 0x32, 0x35, 0x99, 0x7c, 0x3a, 0x49, 0x1f, 0xa9, 0xf4, 0x83, 0x30, 0xe8, 0xe7, 0x25,
	0x11, 0xc8, 0xe0, 0x96, 0x97, 0xc1, 0x91, 0x43, 0x68, 0x7b, 0xec, 0x10, 0x75, 0xe6, 0xcb, 0x5e,
	0x4e, 0x33, 0x7d, 0xd9, 0xfb, 0x4a, 0x00, 0xd1, 0x60, 0x51, 0x8b, 0x27, 0x1b, 0x66, 0x2e, 0xe0,
	0xb9, 0x51, 0x40, 0xce, 0x31, 0x6f, 0x67, 0x12, 0xa7, 0x5c, 0x6f, 0xbc, 0xb2, 0x9d, 0xd4, 0x8e,
	0xef, 0x90, 0xc8, 0xd5, 0x71, 0x20, 0x53, 0x1f, 0x02, 0xd1, 0x97, 0x28, 0x8f, 0xd4, 0x21, 0x76,
	0xd9, 0x90, 0x4f, 0x92, 0xf1, 0x39, 0x39, 0x39, 0xd6, 0x98, 0x8f, 0x8f, 0x83, 0x92, 0xf9, 0xf5,
	0xb7, 0x78, 0x68, 0xef, 0x71, 0x5c, 0xf8, 0xe3, 0x71, 0x3c, 0xf4, 0xe7, 0xe3, 0xb8, 0xf0, 0xe5,
	0x93, 0x78, 0xe8, 0x87, 0x27, 0x71, 0xe1, 0x66, 0xea, 0x3f, 0x08, 0x13, 0xb1, 0x0a, 0x1b, 0x1b,
	0xad, 0x8c, 0xc9, 0xf4, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x4b, 0xd5, 0xa1, 0x5a, 0x1e, 0x11,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// EndDeviceClaimingServerClient is the client API for EndDeviceClaimingServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EndDeviceClaimingServerClient interface {
	// Claims the end device by claim authentication code or QR code and transfers the device to the target application.
	Claim(ctx context.Context, in *ClaimEndDeviceRequest, opts ...grpc.CallOption) (*EndDeviceIdentifiers, error)
	// Authorize the End Device Claiming Server to claim devices registered in the given application. The application
	// identifiers are the source application, where the devices are registered before they are claimed.
	// The API key is used to access the application, find the device, verify the claim request and delete the end device
	// from the source application.
	AuthorizeApplication(ctx context.Context, in *AuthorizeApplicationRequest, opts ...grpc.CallOption) (*types.Empty, error)
	// Unauthorize the End Device Claiming Server to claim devices in the given application.
	// This reverts the authorization given with rpc AuthorizeApplication.
	UnauthorizeApplication(ctx context.Context, in *ApplicationIdentifiers, opts ...grpc.CallOption) (*types.Empty, error)
}

type endDeviceClaimingServerClient struct {
	cc *grpc.ClientConn
}

func NewEndDeviceClaimingServerClient(cc *grpc.ClientConn) EndDeviceClaimingServerClient {
	return &endDeviceClaimingServerClient{cc}
}

func (c *endDeviceClaimingServerClient) Claim(ctx context.Context, in *ClaimEndDeviceRequest, opts ...grpc.CallOption) (*EndDeviceIdentifiers, error) {
	out := new(EndDeviceIdentifiers)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.EndDeviceClaimingServer/Claim", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endDeviceClaimingServerClient) AuthorizeApplication(ctx context.Context, in *AuthorizeApplicationRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.EndDeviceClaimingServer/AuthorizeApplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endDeviceClaimingServerClient) UnauthorizeApplication(ctx context.Context, in *ApplicationIdentifiers, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.EndDeviceClaimingServer/UnauthorizeApplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EndDeviceClaimingServerServer is the server API for EndDeviceClaimingServer service.
type EndDeviceClaimingServerServer interface {
	// Claims the end device by claim authentication code or QR code and transfers the device to the target application.
	Claim(context.Context, *ClaimEndDeviceRequest) (*EndDeviceIdentifiers, error)
	// Authorize the End Device Claiming Server to claim devices registered in the given application. The application
	// identifiers are the source application, where the devices are registered before they are claimed.
	// The API key is used to access the application, find the device, verify the claim request and delete the end device
	// from the source application.
	AuthorizeApplication(context.Context, *AuthorizeApplicationRequest) (*types.Empty, error)
	// Unauthorize the End Device Claiming Server to claim devices in the given application.
	// This reverts the authorization given with rpc AuthorizeApplication.
	UnauthorizeApplication(context.Context, *ApplicationIdentifiers) (*types.Empty, error)
}

// UnimplementedEndDeviceClaimingServerServer can be embedded to have forward compatible implementations.
type UnimplementedEndDeviceClaimingServerServer struct {
}

func (*UnimplementedEndDeviceClaimingServerServer) Claim(ctx context.Context, req *ClaimEndDeviceRequest) (*EndDeviceIdentifiers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Claim not implemented")
}
func (*UnimplementedEndDeviceClaimingServerServer) AuthorizeApplication(ctx context.Context, req *AuthorizeApplicationRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthorizeApplication not implemented")
}
func (*UnimplementedEndDeviceClaimingServerServer) UnauthorizeApplication(ctx context.Context, req *ApplicationIdentifiers) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnauthorizeApplication not implemented")
}

func RegisterEndDeviceClaimingServerServer(s *grpc.Server, srv EndDeviceClaimingServerServer) {
	s.RegisterService(&_EndDeviceClaimingServer_serviceDesc, srv)
}

func _EndDeviceClaimingServer_Claim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClaimEndDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndDeviceClaimingServerServer).Claim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.EndDeviceClaimingServer/Claim",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndDeviceClaimingServerServer).Claim(ctx, req.(*ClaimEndDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EndDeviceClaimingServer_AuthorizeApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorizeApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndDeviceClaimingServerServer).AuthorizeApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.EndDeviceClaimingServer/AuthorizeApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndDeviceClaimingServerServer).AuthorizeApplication(ctx, req.(*AuthorizeApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EndDeviceClaimingServer_UnauthorizeApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndDeviceClaimingServerServer).UnauthorizeApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.EndDeviceClaimingServer/UnauthorizeApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndDeviceClaimingServerServer).UnauthorizeApplication(ctx, req.(*ApplicationIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

var _EndDeviceClaimingServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.lorawan.v3.EndDeviceClaimingServer",
	HandlerType: (*EndDeviceClaimingServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Claim",
			Handler:    _EndDeviceClaimingServer_Claim_Handler,
		},
		{
			MethodName: "AuthorizeApplication",
			Handler:    _EndDeviceClaimingServer_AuthorizeApplication_Handler,
		},
		{
			MethodName: "UnauthorizeApplication",
			Handler:    _EndDeviceClaimingServer_UnauthorizeApplication_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lorawan-stack/api/deviceclaimingserver.proto",
}

// GatewayClaimingServerClient is the client API for GatewayClaimingServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GatewayClaimingServerClient interface {
	// Claims a gateway by claim authentication code or QR code and transfers the gateway to the target user.
	Claim(ctx context.Context, in *ClaimGatewayRequest, opts ...grpc.CallOption) (*GatewayIdentifiers, error)
	// AuthorizeGateway allows a gateway to be claimed.
	AuthorizeGateway(ctx context.Context, in *AuthorizeGatewayRequest, opts ...grpc.CallOption) (*types.Empty, error)
	// UnauthorizeGateway prevents a gateway from being claimed.
	UnauthorizeGateway(ctx context.Context, in *GatewayIdentifiers, opts ...grpc.CallOption) (*types.Empty, error)
}

type gatewayClaimingServerClient struct {
	cc *grpc.ClientConn
}

func NewGatewayClaimingServerClient(cc *grpc.ClientConn) GatewayClaimingServerClient {
	return &gatewayClaimingServerClient{cc}
}

func (c *gatewayClaimingServerClient) Claim(ctx context.Context, in *ClaimGatewayRequest, opts ...grpc.CallOption) (*GatewayIdentifiers, error) {
	out := new(GatewayIdentifiers)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.GatewayClaimingServer/Claim", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClaimingServerClient) AuthorizeGateway(ctx context.Context, in *AuthorizeGatewayRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.GatewayClaimingServer/AuthorizeGateway", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClaimingServerClient) UnauthorizeGateway(ctx context.Context, in *GatewayIdentifiers, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.GatewayClaimingServer/UnauthorizeGateway", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayClaimingServerServer is the server API for GatewayClaimingServer service.
type GatewayClaimingServerServer interface {
	// Claims a gateway by claim authentication code or QR code and transfers the gateway to the target user.
	Claim(context.Context, *ClaimGatewayRequest) (*GatewayIdentifiers, error)
	// AuthorizeGateway allows a gateway to be claimed.
	AuthorizeGateway(context.Context, *AuthorizeGatewayRequest) (*types.Empty, error)
	// UnauthorizeGateway prevents a gateway from being claimed.
	UnauthorizeGateway(context.Context, *GatewayIdentifiers) (*types.Empty, error)
}

// UnimplementedGatewayClaimingServerServer can be embedded to have forward compatible implementations.
type UnimplementedGatewayClaimingServerServer struct {
}

func (*UnimplementedGatewayClaimingServerServer) Claim(ctx context.Context, req *ClaimGatewayRequest) (*GatewayIdentifiers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Claim not implemented")
}
func (*UnimplementedGatewayClaimingServerServer) AuthorizeGateway(ctx context.Context, req *AuthorizeGatewayRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthorizeGateway not implemented")
}
func (*UnimplementedGatewayClaimingServerServer) UnauthorizeGateway(ctx context.Context, req *GatewayIdentifiers) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnauthorizeGateway not implemented")
}

func RegisterGatewayClaimingServerServer(s *grpc.Server, srv GatewayClaimingServerServer) {
	s.RegisterService(&_GatewayClaimingServer_serviceDesc, srv)
}

func _GatewayClaimingServer_Claim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClaimGatewayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayClaimingServerServer).Claim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.GatewayClaimingServer/Claim",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayClaimingServerServer).Claim(ctx, req.(*ClaimGatewayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayClaimingServer_AuthorizeGateway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorizeGatewayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayClaimingServerServer).AuthorizeGateway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.GatewayClaimingServer/AuthorizeGateway",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayClaimingServerServer).AuthorizeGateway(ctx, req.(*AuthorizeGatewayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayClaimingServer_UnauthorizeGateway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GatewayIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayClaimingServerServer).UnauthorizeGateway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.GatewayClaimingServer/UnauthorizeGateway",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayClaimingServerServer).UnauthorizeGateway(ctx, req.(*GatewayIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

var _GatewayClaimingServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.lorawan.v3.GatewayClaimingServer",
	HandlerType: (*GatewayClaimingServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Claim",
			Handler:    _GatewayClaimingServer_Claim_Handler,
		},
		{
			MethodName: "AuthorizeGateway",
			Handler:    _GatewayClaimingServer_AuthorizeGateway_Handler,
		},
		{
			MethodName: "UnauthorizeGateway",
			Handler:    _GatewayClaimingServer_UnauthorizeGateway_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lorawan-stack/api/deviceclaimingserver.proto",
}

func (this *ClaimEndDeviceRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ClaimEndDeviceRequest{`,
		`SourceDevice:` + fmt.Sprintf("%v", this.SourceDevice) + `,`,
		`TargetApplicationIds:` + strings.Replace(fmt.Sprintf("%v", this.TargetApplicationIds), "ApplicationIdentifiers", "ApplicationIdentifiers", 1) + `,`,
		`TargetDeviceId:` + fmt.Sprintf("%v", this.TargetDeviceId) + `,`,
		`TargetNetworkServerAddress:` + fmt.Sprintf("%v", this.TargetNetworkServerAddress) + `,`,
		`TargetNetworkServerKekLabel:` + fmt.Sprintf("%v", this.TargetNetworkServerKekLabel) + `,`,
		`TargetApplicationServerAddress:` + fmt.Sprintf("%v", this.TargetApplicationServerAddress) + `,`,
		`TargetApplicationServerKekLabel:` + fmt.Sprintf("%v", this.TargetApplicationServerKekLabel) + `,`,
		`TargetApplicationServerId:` + fmt.Sprintf("%v", this.TargetApplicationServerId) + `,`,
		`TargetNetId:` + fmt.Sprintf("%v", this.TargetNetId) + `,`,
		`InvalidateAuthenticationCode:` + fmt.Sprintf("%v", this.InvalidateAuthenticationCode) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ClaimEndDeviceRequest_AuthenticatedIdentifiers_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ClaimEndDeviceRequest_AuthenticatedIdentifiers_{`,
		`AuthenticatedIdentifiers:` + strings.Replace(fmt.Sprintf("%v", this.AuthenticatedIdentifiers), "ClaimEndDeviceRequest_AuthenticatedIdentifiers", "ClaimEndDeviceRequest_AuthenticatedIdentifiers", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ClaimEndDeviceRequest_QrCode) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ClaimEndDeviceRequest_QrCode{`,
		`QrCode:` + fmt.Sprintf("%v", this.QrCode) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ClaimEndDeviceRequest_AuthenticatedIdentifiers) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ClaimEndDeviceRequest_AuthenticatedIdentifiers{`,
		`JoinEui:` + fmt.Sprintf("%v", this.JoinEui) + `,`,
		`DevEui:` + fmt.Sprintf("%v", this.DevEui) + `,`,
		`AuthenticationCode:` + fmt.Sprintf("%v", this.AuthenticationCode) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AuthorizeApplicationRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AuthorizeApplicationRequest{`,
		`ApplicationIds:` + strings.Replace(fmt.Sprintf("%v", this.ApplicationIds), "ApplicationIdentifiers", "ApplicationIdentifiers", 1) + `,`,
		`ApiKey:` + fmt.Sprintf("%v", this.ApiKey) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CUPSRedirection) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CUPSRedirection{`,
		`TargetCupsUri:` + fmt.Sprintf("%v", this.TargetCupsUri) + `,`,
		`CurrentGatewayKey:` + fmt.Sprintf("%v", this.CurrentGatewayKey) + `,`,
		`TargetCupsTrust:` + fmt.Sprintf("%v", this.TargetCupsTrust) + `,`,
		`GatewayCredentials:` + fmt.Sprintf("%v", this.GatewayCredentials) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CUPSRedirection_ClientTls) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CUPSRedirection_ClientTls{`,
		`ClientTls:` + strings.Replace(fmt.Sprintf("%v", this.ClientTls), "CUPSRedirection_ClientTLS", "CUPSRedirection_ClientTLS", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CUPSRedirection_AuthToken) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CUPSRedirection_AuthToken{`,
		`AuthToken:` + fmt.Sprintf("%v", this.AuthToken) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CUPSRedirection_ClientTLS) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CUPSRedirection_ClientTLS{`,
		`Cert:` + fmt.Sprintf("%v", this.Cert) + `,`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ClaimGatewayRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ClaimGatewayRequest{`,
		`SourceGateway:` + fmt.Sprintf("%v", this.SourceGateway) + `,`,
		`Collaborator:` + strings.Replace(fmt.Sprintf("%v", this.Collaborator), "OrganizationOrUserIdentifiers", "OrganizationOrUserIdentifiers", 1) + `,`,
		`TargetGatewayId:` + fmt.Sprintf("%v", this.TargetGatewayId) + `,`,
		`TargetGatewayServerAddress:` + fmt.Sprintf("%v", this.TargetGatewayServerAddress) + `,`,
		`CupsRedirection:` + strings.Replace(this.CupsRedirection.String(), "CUPSRedirection", "CUPSRedirection", 1) + `,`,
		`TargetFrequencyPlanId:` + fmt.Sprintf("%v", this.TargetFrequencyPlanId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ClaimGatewayRequest_AuthenticatedIdentifiers_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ClaimGatewayRequest_AuthenticatedIdentifiers_{`,
		`AuthenticatedIdentifiers:` + strings.Replace(fmt.Sprintf("%v", this.AuthenticatedIdentifiers), "ClaimGatewayRequest_AuthenticatedIdentifiers", "ClaimGatewayRequest_AuthenticatedIdentifiers", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ClaimGatewayRequest_QrCode) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ClaimGatewayRequest_QrCode{`,
		`QrCode:` + fmt.Sprintf("%v", this.QrCode) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ClaimGatewayRequest_AuthenticatedIdentifiers) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ClaimGatewayRequest_AuthenticatedIdentifiers{`,
		`GatewayEui:` + fmt.Sprintf("%v", this.GatewayEui) + `,`,
		`AuthenticationCode:` + fmt.Sprintf("%v", this.AuthenticationCode) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AuthorizeGatewayRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AuthorizeGatewayRequest{`,
		`GatewayIds:` + strings.Replace(fmt.Sprintf("%v", this.GatewayIds), "GatewayIdentifiers", "GatewayIdentifiers", 1) + `,`,
		`ApiKey:` + fmt.Sprintf("%v", this.ApiKey) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringDeviceclaimingserver(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
