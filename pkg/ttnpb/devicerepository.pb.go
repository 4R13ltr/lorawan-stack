// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lorawan-stack/api/devicerepository.proto

package ttnpb

import (
	bytes "bytes"
	context "context"
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"

	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type KeyProvisioning int32

const (
	// Unknown Key Provisioning.
	KEY_PROVISIONING_UNKNOWN KeyProvisioning = 0
	// Custom Key Provisioning.
	KEY_PROVISIONING_CUSTOM KeyProvisioning = 1
	// Key Provisioning from the Global Join Server.
	KEY_PROVISIONING_JOIN_SERVER KeyProvisioning = 2
	// Key Provisioning from Manifest.
	KEY_PROVISIONING_MANIFEST KeyProvisioning = 3
)

var KeyProvisioning_name = map[int32]string{
	0: "KEY_PROVISIONING_UNKNOWN",
	1: "KEY_PROVISIONING_CUSTOM",
	2: "KEY_PROVISIONING_JOIN_SERVER",
	3: "KEY_PROVISIONING_MANIFEST",
}

var KeyProvisioning_value = map[string]int32{
	"KEY_PROVISIONING_UNKNOWN":     0,
	"KEY_PROVISIONING_CUSTOM":      1,
	"KEY_PROVISIONING_JOIN_SERVER": 2,
	"KEY_PROVISIONING_MANIFEST":    3,
}

func (KeyProvisioning) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c0145ad4e3f42c22, []int{0}
}

type KeySecurity int32

const (
	// Unknown key security.
	KEY_SECURITY_UNKNOWN KeySecurity = 0
	// No key security.
	KEY_SECURITY_NONE KeySecurity = 1
	// Read Protected key security.
	KEY_SECURITY_READ_PROTECTED KeySecurity = 2
	// Key security using the Security Element.
	KEY_SECURITY_SECURE_ELEMENT KeySecurity = 3
)

var KeySecurity_name = map[int32]string{
	0: "KEY_SECURITY_UNKNOWN",
	1: "KEY_SECURITY_NONE",
	2: "KEY_SECURITY_READ_PROTECTED",
	3: "KEY_SECURITY_SECURE_ELEMENT",
}

var KeySecurity_value = map[string]int32{
	"KEY_SECURITY_UNKNOWN":        0,
	"KEY_SECURITY_NONE":           1,
	"KEY_SECURITY_READ_PROTECTED": 2,
	"KEY_SECURITY_SECURE_ELEMENT": 3,
}

func (KeySecurity) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c0145ad4e3f42c22, []int{1}
}

type EndDeviceBrand struct {
	// Brand identifier, as specified in the Device Repository.
	BrandId string `protobuf:"bytes,1,opt,name=brand_id,json=brandId,proto3" json:"brand_id,omitempty"`
	// Brand name.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Private Enterprise Number (PEN) assigned by IANA.
	PrivateEnterpriseNumber uint32 `protobuf:"varint,3,opt,name=private_enterprise_number,json=privateEnterpriseNumber,proto3" json:"private_enterprise_number,omitempty"`
	// Organization Unique Identifiers (OUI) assigned by IEEE.
	OrganizationUniqueIdentifiers []string `protobuf:"bytes,4,rep,name=organization_unique_identifiers,json=organizationUniqueIdentifiers,proto3" json:"organization_unique_identifiers,omitempty"`
	// VendorID managed by the LoRa Alliance, as defined in TR005.
	LoraAllianceVendorId uint32 `protobuf:"varint,5,opt,name=lora_alliance_vendor_id,json=loraAllianceVendorId,proto3" json:"lora_alliance_vendor_id,omitempty"`
	// Brand website URL.
	Website string `protobuf:"bytes,6,opt,name=website,proto3" json:"website,omitempty"`
	// Contact email address.
	Email string `protobuf:"bytes,7,opt,name=email,proto3" json:"email,omitempty"`
	// Path to brand logo.
	Logo                 string   `protobuf:"bytes,8,opt,name=logo,proto3" json:"logo,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EndDeviceBrand) Reset()      { *m = EndDeviceBrand{} }
func (*EndDeviceBrand) ProtoMessage() {}
func (*EndDeviceBrand) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0145ad4e3f42c22, []int{0}
}
func (m *EndDeviceBrand) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EndDeviceBrand) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EndDeviceBrand.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EndDeviceBrand) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EndDeviceBrand.Merge(m, src)
}
func (m *EndDeviceBrand) XXX_Size() int {
	return m.Size()
}
func (m *EndDeviceBrand) XXX_DiscardUnknown() {
	xxx_messageInfo_EndDeviceBrand.DiscardUnknown(m)
}

var xxx_messageInfo_EndDeviceBrand proto.InternalMessageInfo

func (m *EndDeviceBrand) GetBrandId() string {
	if m != nil {
		return m.BrandId
	}
	return ""
}

func (m *EndDeviceBrand) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *EndDeviceBrand) GetPrivateEnterpriseNumber() uint32 {
	if m != nil {
		return m.PrivateEnterpriseNumber
	}
	return 0
}

func (m *EndDeviceBrand) GetOrganizationUniqueIdentifiers() []string {
	if m != nil {
		return m.OrganizationUniqueIdentifiers
	}
	return nil
}

func (m *EndDeviceBrand) GetLoraAllianceVendorId() uint32 {
	if m != nil {
		return m.LoraAllianceVendorId
	}
	return 0
}

func (m *EndDeviceBrand) GetWebsite() string {
	if m != nil {
		return m.Website
	}
	return ""
}

func (m *EndDeviceBrand) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *EndDeviceBrand) GetLogo() string {
	if m != nil {
		return m.Logo
	}
	return ""
}

type EndDeviceModel struct {
	// Brand identifier, as defined in the Device Repository.
	BrandId string `protobuf:"bytes,1,opt,name=brand_id,json=brandId,proto3" json:"brand_id,omitempty"`
	// Model identifier, as defined in the Device Repository.
	ModelId string `protobuf:"bytes,2,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
	// Model name, as defined in the Device Repository.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Model description.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Available hardware versions.
	HardwareVersions []*EndDeviceModel_HardwareVersion `protobuf:"bytes,5,rep,name=hardware_versions,json=hardwareVersions,proto3" json:"hardware_versions,omitempty"`
	// Available firmware versions.
	FirmwareVersions []*EndDeviceModel_FirmwareVersion `protobuf:"bytes,6,rep,name=firmware_versions,json=firmwareVersions,proto3" json:"firmware_versions,omitempty"`
	// List of sensors included in the device.
	Sensors []string `protobuf:"bytes,7,rep,name=sensors,proto3" json:"sensors,omitempty"`
	// Device dimensions.
	Dimensions *EndDeviceModel_Dimensions `protobuf:"bytes,8,opt,name=dimensions,proto3" json:"dimensions,omitempty"`
	// Device weight (gram).
	Weight *types.FloatValue `protobuf:"bytes,9,opt,name=weight,proto3" json:"weight,omitempty"`
	// Device battery information.
	Battery *EndDeviceModel_Battery `protobuf:"bytes,10,opt,name=battery,proto3" json:"battery,omitempty"`
	// Device operating conditions.
	OperatingConditions *EndDeviceModel_OperatingConditions `protobuf:"bytes,11,opt,name=operating_conditions,json=operatingConditions,proto3" json:"operating_conditions,omitempty"`
	// Device IP rating code.
	IpCode string `protobuf:"bytes,12,opt,name=ip_code,json=ipCode,proto3" json:"ip_code,omitempty"`
	// Supported key provisioning methods.
	KeyProvisioning []KeyProvisioning `protobuf:"varint,13,rep,packed,name=key_provisioning,json=keyProvisioning,proto3,enum=ttn.lorawan.v3.KeyProvisioning" json:"key_provisioning,omitempty"`
	// Device key security.
	KeySecurity KeySecurity `protobuf:"varint,14,opt,name=key_security,json=keySecurity,proto3,enum=ttn.lorawan.v3.KeySecurity" json:"key_security,omitempty"`
	// Device photos.
	Photos *EndDeviceModel_Photos `protobuf:"bytes,15,opt,name=photos,proto3" json:"photos,omitempty"`
	// Device videos.
	Videos *EndDeviceModel_Videos `protobuf:"bytes,16,opt,name=videos,proto3" json:"videos,omitempty"`
	// Device information page URL.
	ProductUrl string `protobuf:"bytes,17,opt,name=product_url,json=productUrl,proto3" json:"product_url,omitempty"`
	// Device datasheet URL.
	DatasheetUrl string `protobuf:"bytes,18,opt,name=datasheet_url,json=datasheetUrl,proto3" json:"datasheet_url,omitempty"`
	// Reseller URLs.
	Resellers []*EndDeviceModel_Reseller `protobuf:"bytes,19,rep,name=resellers,proto3" json:"resellers,omitempty"`
	// List of standards the device is compliant with.
	Compliances *EndDeviceModel_Compliances `protobuf:"bytes,20,opt,name=compliances,proto3" json:"compliances,omitempty"`
	// List of any additional radios included in the device.
	AdditionalRadios     []string `protobuf:"bytes,21,rep,name=additional_radios,json=additionalRadios,proto3" json:"additional_radios,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EndDeviceModel) Reset()      { *m = EndDeviceModel{} }
func (*EndDeviceModel) ProtoMessage() {}
func (*EndDeviceModel) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0145ad4e3f42c22, []int{1}
}
func (m *EndDeviceModel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EndDeviceModel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EndDeviceModel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EndDeviceModel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EndDeviceModel.Merge(m, src)
}
func (m *EndDeviceModel) XXX_Size() int {
	return m.Size()
}
func (m *EndDeviceModel) XXX_DiscardUnknown() {
	xxx_messageInfo_EndDeviceModel.DiscardUnknown(m)
}

var xxx_messageInfo_EndDeviceModel proto.InternalMessageInfo

func (m *EndDeviceModel) GetBrandId() string {
	if m != nil {
		return m.BrandId
	}
	return ""
}

func (m *EndDeviceModel) GetModelId() string {
	if m != nil {
		return m.ModelId
	}
	return ""
}

func (m *EndDeviceModel) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *EndDeviceModel) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *EndDeviceModel) GetHardwareVersions() []*EndDeviceModel_HardwareVersion {
	if m != nil {
		return m.HardwareVersions
	}
	return nil
}

func (m *EndDeviceModel) GetFirmwareVersions() []*EndDeviceModel_FirmwareVersion {
	if m != nil {
		return m.FirmwareVersions
	}
	return nil
}

func (m *EndDeviceModel) GetSensors() []string {
	if m != nil {
		return m.Sensors
	}
	return nil
}

func (m *EndDeviceModel) GetDimensions() *EndDeviceModel_Dimensions {
	if m != nil {
		return m.Dimensions
	}
	return nil
}

func (m *EndDeviceModel) GetWeight() *types.FloatValue {
	if m != nil {
		return m.Weight
	}
	return nil
}

func (m *EndDeviceModel) GetBattery() *EndDeviceModel_Battery {
	if m != nil {
		return m.Battery
	}
	return nil
}

func (m *EndDeviceModel) GetOperatingConditions() *EndDeviceModel_OperatingConditions {
	if m != nil {
		return m.OperatingConditions
	}
	return nil
}

func (m *EndDeviceModel) GetIpCode() string {
	if m != nil {
		return m.IpCode
	}
	return ""
}

func (m *EndDeviceModel) GetKeyProvisioning() []KeyProvisioning {
	if m != nil {
		return m.KeyProvisioning
	}
	return nil
}

func (m *EndDeviceModel) GetKeySecurity() KeySecurity {
	if m != nil {
		return m.KeySecurity
	}
	return KEY_SECURITY_UNKNOWN
}

func (m *EndDeviceModel) GetPhotos() *EndDeviceModel_Photos {
	if m != nil {
		return m.Photos
	}
	return nil
}

func (m *EndDeviceModel) GetVideos() *EndDeviceModel_Videos {
	if m != nil {
		return m.Videos
	}
	return nil
}

func (m *EndDeviceModel) GetProductUrl() string {
	if m != nil {
		return m.ProductUrl
	}
	return ""
}

func (m *EndDeviceModel) GetDatasheetUrl() string {
	if m != nil {
		return m.DatasheetUrl
	}
	return ""
}

func (m *EndDeviceModel) GetResellers() []*EndDeviceModel_Reseller {
	if m != nil {
		return m.Resellers
	}
	return nil
}

func (m *EndDeviceModel) GetCompliances() *EndDeviceModel_Compliances {
	if m != nil {
		return m.Compliances
	}
	return nil
}

func (m *EndDeviceModel) GetAdditionalRadios() []string {
	if m != nil {
		return m.AdditionalRadios
	}
	return nil
}

type EndDeviceModel_HardwareVersion struct {
	// Hardware version string.
	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	// Numberic hardware revision number.
	Numeric uint32 `protobuf:"varint,2,opt,name=numeric,proto3" json:"numeric,omitempty"`
	// Hardware part number.
	PartNumber           string   `protobuf:"bytes,3,opt,name=part_number,json=partNumber,proto3" json:"part_number,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EndDeviceModel_HardwareVersion) Reset()      { *m = EndDeviceModel_HardwareVersion{} }
func (*EndDeviceModel_HardwareVersion) ProtoMessage() {}
func (*EndDeviceModel_HardwareVersion) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0145ad4e3f42c22, []int{1, 0}
}
func (m *EndDeviceModel_HardwareVersion) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EndDeviceModel_HardwareVersion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EndDeviceModel_HardwareVersion.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EndDeviceModel_HardwareVersion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EndDeviceModel_HardwareVersion.Merge(m, src)
}
func (m *EndDeviceModel_HardwareVersion) XXX_Size() int {
	return m.Size()
}
func (m *EndDeviceModel_HardwareVersion) XXX_DiscardUnknown() {
	xxx_messageInfo_EndDeviceModel_HardwareVersion.DiscardUnknown(m)
}

var xxx_messageInfo_EndDeviceModel_HardwareVersion proto.InternalMessageInfo

func (m *EndDeviceModel_HardwareVersion) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *EndDeviceModel_HardwareVersion) GetNumeric() uint32 {
	if m != nil {
		return m.Numeric
	}
	return 0
}

func (m *EndDeviceModel_HardwareVersion) GetPartNumber() string {
	if m != nil {
		return m.PartNumber
	}
	return ""
}

type EndDeviceModel_FirmwareVersion struct {
	// Firmware version string.
	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	// Numeric firmware revision number.
	Numeric uint32 `protobuf:"varint,2,opt,name=numeric,proto3" json:"numeric,omitempty"`
	// Hardware versions supported by this firmware version.
	SupportedHardwareVersions []string `protobuf:"bytes,3,rep,name=supported_hardware_versions,json=supportedHardwareVersions,proto3" json:"supported_hardware_versions,omitempty"`
	// Device profiles for each supported region (band).
	Profiles             map[string]*EndDeviceModel_FirmwareVersion_Profile `protobuf:"bytes,4,rep,name=profiles,proto3" json:"profiles,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                                           `json:"-"`
	XXX_sizecache        int32                                              `json:"-"`
}

func (m *EndDeviceModel_FirmwareVersion) Reset()      { *m = EndDeviceModel_FirmwareVersion{} }
func (*EndDeviceModel_FirmwareVersion) ProtoMessage() {}
func (*EndDeviceModel_FirmwareVersion) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0145ad4e3f42c22, []int{1, 1}
}
func (m *EndDeviceModel_FirmwareVersion) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EndDeviceModel_FirmwareVersion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EndDeviceModel_FirmwareVersion.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EndDeviceModel_FirmwareVersion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EndDeviceModel_FirmwareVersion.Merge(m, src)
}
func (m *EndDeviceModel_FirmwareVersion) XXX_Size() int {
	return m.Size()
}
func (m *EndDeviceModel_FirmwareVersion) XXX_DiscardUnknown() {
	xxx_messageInfo_EndDeviceModel_FirmwareVersion.DiscardUnknown(m)
}

var xxx_messageInfo_EndDeviceModel_FirmwareVersion proto.InternalMessageInfo

func (m *EndDeviceModel_FirmwareVersion) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *EndDeviceModel_FirmwareVersion) GetNumeric() uint32 {
	if m != nil {
		return m.Numeric
	}
	return 0
}

func (m *EndDeviceModel_FirmwareVersion) GetSupportedHardwareVersions() []string {
	if m != nil {
		return m.SupportedHardwareVersions
	}
	return nil
}

func (m *EndDeviceModel_FirmwareVersion) GetProfiles() map[string]*EndDeviceModel_FirmwareVersion_Profile {
	if m != nil {
		return m.Profiles
	}
	return nil
}

type EndDeviceModel_FirmwareVersion_Profile struct {
	// Vendor ID of the profile, as defined in the Device Repository.
	// If this value is set, the profile is loaded from this vendor's folder.
	// If this value is not set, the profile is loaded from the current (end device's) vendor.
	VendorId string `protobuf:"bytes,4,opt,name=vendor_id,json=vendorId,proto3" json:"vendor_id,omitempty"`
	// Profile identifier, as defined in the Device Repository.
	ProfileId string `protobuf:"bytes,1,opt,name=profile_id,json=profileId,proto3" json:"profile_id,omitempty"`
	// Whether the device is LoRaWAN certified.
	LorawanCertified bool `protobuf:"varint,2,opt,name=lorawan_certified,json=lorawanCertified,proto3" json:"lorawan_certified,omitempty"`
	// Payload formatter codec identifier, as defined in the Device Repository.
	CodecId              string   `protobuf:"bytes,3,opt,name=codec_id,json=codecId,proto3" json:"codec_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EndDeviceModel_FirmwareVersion_Profile) Reset() {
	*m = EndDeviceModel_FirmwareVersion_Profile{}
}
func (*EndDeviceModel_FirmwareVersion_Profile) ProtoMessage() {}
func (*EndDeviceModel_FirmwareVersion_Profile) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0145ad4e3f42c22, []int{1, 1, 0}
}
func (m *EndDeviceModel_FirmwareVersion_Profile) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EndDeviceModel_FirmwareVersion_Profile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EndDeviceModel_FirmwareVersion_Profile.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EndDeviceModel_FirmwareVersion_Profile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EndDeviceModel_FirmwareVersion_Profile.Merge(m, src)
}
func (m *EndDeviceModel_FirmwareVersion_Profile) XXX_Size() int {
	return m.Size()
}
func (m *EndDeviceModel_FirmwareVersion_Profile) XXX_DiscardUnknown() {
	xxx_messageInfo_EndDeviceModel_FirmwareVersion_Profile.DiscardUnknown(m)
}

var xxx_messageInfo_EndDeviceModel_FirmwareVersion_Profile proto.InternalMessageInfo

func (m *EndDeviceModel_FirmwareVersion_Profile) GetVendorId() string {
	if m != nil {
		return m.VendorId
	}
	return ""
}

func (m *EndDeviceModel_FirmwareVersion_Profile) GetProfileId() string {
	if m != nil {
		return m.ProfileId
	}
	return ""
}

func (m *EndDeviceModel_FirmwareVersion_Profile) GetLorawanCertified() bool {
	if m != nil {
		return m.LorawanCertified
	}
	return false
}

func (m *EndDeviceModel_FirmwareVersion_Profile) GetCodecId() string {
	if m != nil {
		return m.CodecId
	}
	return ""
}

type EndDeviceModel_Dimensions struct {
	// Device width (mm).
	Width *types.FloatValue `protobuf:"bytes,1,opt,name=width,proto3" json:"width,omitempty"`
	// Device height (mm).
	Height *types.FloatValue `protobuf:"bytes,2,opt,name=height,proto3" json:"height,omitempty"`
	// Device diameter (mm).
	Diameter *types.FloatValue `protobuf:"bytes,3,opt,name=diameter,proto3" json:"diameter,omitempty"`
	// Device length (mm).
	Length               *types.FloatValue `protobuf:"bytes,4,opt,name=length,proto3" json:"length,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *EndDeviceModel_Dimensions) Reset()      { *m = EndDeviceModel_Dimensions{} }
func (*EndDeviceModel_Dimensions) ProtoMessage() {}
func (*EndDeviceModel_Dimensions) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0145ad4e3f42c22, []int{1, 2}
}
func (m *EndDeviceModel_Dimensions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EndDeviceModel_Dimensions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EndDeviceModel_Dimensions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EndDeviceModel_Dimensions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EndDeviceModel_Dimensions.Merge(m, src)
}
func (m *EndDeviceModel_Dimensions) XXX_Size() int {
	return m.Size()
}
func (m *EndDeviceModel_Dimensions) XXX_DiscardUnknown() {
	xxx_messageInfo_EndDeviceModel_Dimensions.DiscardUnknown(m)
}

var xxx_messageInfo_EndDeviceModel_Dimensions proto.InternalMessageInfo

func (m *EndDeviceModel_Dimensions) GetWidth() *types.FloatValue {
	if m != nil {
		return m.Width
	}
	return nil
}

func (m *EndDeviceModel_Dimensions) GetHeight() *types.FloatValue {
	if m != nil {
		return m.Height
	}
	return nil
}

func (m *EndDeviceModel_Dimensions) GetDiameter() *types.FloatValue {
	if m != nil {
		return m.Diameter
	}
	return nil
}

func (m *EndDeviceModel_Dimensions) GetLength() *types.FloatValue {
	if m != nil {
		return m.Length
	}
	return nil
}

type EndDeviceModel_Battery struct {
	// Whether the device battery can be replaced.
	Replaceable *types.BoolValue `protobuf:"bytes,1,opt,name=replaceable,proto3" json:"replaceable,omitempty"`
	// Battery type.
	Type                 string   `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EndDeviceModel_Battery) Reset()      { *m = EndDeviceModel_Battery{} }
func (*EndDeviceModel_Battery) ProtoMessage() {}
func (*EndDeviceModel_Battery) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0145ad4e3f42c22, []int{1, 3}
}
func (m *EndDeviceModel_Battery) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EndDeviceModel_Battery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EndDeviceModel_Battery.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EndDeviceModel_Battery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EndDeviceModel_Battery.Merge(m, src)
}
func (m *EndDeviceModel_Battery) XXX_Size() int {
	return m.Size()
}
func (m *EndDeviceModel_Battery) XXX_DiscardUnknown() {
	xxx_messageInfo_EndDeviceModel_Battery.DiscardUnknown(m)
}

var xxx_messageInfo_EndDeviceModel_Battery proto.InternalMessageInfo

func (m *EndDeviceModel_Battery) GetReplaceable() *types.BoolValue {
	if m != nil {
		return m.Replaceable
	}
	return nil
}

func (m *EndDeviceModel_Battery) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type EndDeviceModel_OperatingConditions struct {
	// Temperature operating conditions (Celsius).
	Temperature *EndDeviceModel_OperatingConditions_Limits `protobuf:"bytes,1,opt,name=temperature,proto3" json:"temperature,omitempty"`
	// Relative humidity operating conditions (Fraction, in range [0, 1]).
	RelativeHumidity     *EndDeviceModel_OperatingConditions_Limits `protobuf:"bytes,2,opt,name=relative_humidity,json=relativeHumidity,proto3" json:"relative_humidity,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                   `json:"-"`
	XXX_sizecache        int32                                      `json:"-"`
}

func (m *EndDeviceModel_OperatingConditions) Reset()      { *m = EndDeviceModel_OperatingConditions{} }
func (*EndDeviceModel_OperatingConditions) ProtoMessage() {}
func (*EndDeviceModel_OperatingConditions) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0145ad4e3f42c22, []int{1, 4}
}
func (m *EndDeviceModel_OperatingConditions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EndDeviceModel_OperatingConditions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EndDeviceModel_OperatingConditions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EndDeviceModel_OperatingConditions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EndDeviceModel_OperatingConditions.Merge(m, src)
}
func (m *EndDeviceModel_OperatingConditions) XXX_Size() int {
	return m.Size()
}
func (m *EndDeviceModel_OperatingConditions) XXX_DiscardUnknown() {
	xxx_messageInfo_EndDeviceModel_OperatingConditions.DiscardUnknown(m)
}

var xxx_messageInfo_EndDeviceModel_OperatingConditions proto.InternalMessageInfo

func (m *EndDeviceModel_OperatingConditions) GetTemperature() *EndDeviceModel_OperatingConditions_Limits {
	if m != nil {
		return m.Temperature
	}
	return nil
}

func (m *EndDeviceModel_OperatingConditions) GetRelativeHumidity() *EndDeviceModel_OperatingConditions_Limits {
	if m != nil {
		return m.RelativeHumidity
	}
	return nil
}

type EndDeviceModel_OperatingConditions_Limits struct {
	// Min value of operating conditions range.
	Min *types.FloatValue `protobuf:"bytes,1,opt,name=min,proto3" json:"min,omitempty"`
	// Max value of operating conditions range.
	Max                  *types.FloatValue `protobuf:"bytes,2,opt,name=max,proto3" json:"max,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *EndDeviceModel_OperatingConditions_Limits) Reset() {
	*m = EndDeviceModel_OperatingConditions_Limits{}
}
func (*EndDeviceModel_OperatingConditions_Limits) ProtoMessage() {}
func (*EndDeviceModel_OperatingConditions_Limits) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0145ad4e3f42c22, []int{1, 4, 0}
}
func (m *EndDeviceModel_OperatingConditions_Limits) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EndDeviceModel_OperatingConditions_Limits) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EndDeviceModel_OperatingConditions_Limits.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EndDeviceModel_OperatingConditions_Limits) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EndDeviceModel_OperatingConditions_Limits.Merge(m, src)
}
func (m *EndDeviceModel_OperatingConditions_Limits) XXX_Size() int {
	return m.Size()
}
func (m *EndDeviceModel_OperatingConditions_Limits) XXX_DiscardUnknown() {
	xxx_messageInfo_EndDeviceModel_OperatingConditions_Limits.DiscardUnknown(m)
}

var xxx_messageInfo_EndDeviceModel_OperatingConditions_Limits proto.InternalMessageInfo

func (m *EndDeviceModel_OperatingConditions_Limits) GetMin() *types.FloatValue {
	if m != nil {
		return m.Min
	}
	return nil
}

func (m *EndDeviceModel_OperatingConditions_Limits) GetMax() *types.FloatValue {
	if m != nil {
		return m.Max
	}
	return nil
}

type EndDeviceModel_Photos struct {
	// Main device photo.
	Main string `protobuf:"bytes,1,opt,name=main,proto3" json:"main,omitempty"`
	// List of other device photos.
	Other                []string `protobuf:"bytes,2,rep,name=other,proto3" json:"other,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EndDeviceModel_Photos) Reset()      { *m = EndDeviceModel_Photos{} }
func (*EndDeviceModel_Photos) ProtoMessage() {}
func (*EndDeviceModel_Photos) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0145ad4e3f42c22, []int{1, 5}
}
func (m *EndDeviceModel_Photos) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EndDeviceModel_Photos) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EndDeviceModel_Photos.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EndDeviceModel_Photos) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EndDeviceModel_Photos.Merge(m, src)
}
func (m *EndDeviceModel_Photos) XXX_Size() int {
	return m.Size()
}
func (m *EndDeviceModel_Photos) XXX_DiscardUnknown() {
	xxx_messageInfo_EndDeviceModel_Photos.DiscardUnknown(m)
}

var xxx_messageInfo_EndDeviceModel_Photos proto.InternalMessageInfo

func (m *EndDeviceModel_Photos) GetMain() string {
	if m != nil {
		return m.Main
	}
	return ""
}

func (m *EndDeviceModel_Photos) GetOther() []string {
	if m != nil {
		return m.Other
	}
	return nil
}

type EndDeviceModel_Videos struct {
	// Link to main device video.
	Main string `protobuf:"bytes,1,opt,name=main,proto3" json:"main,omitempty"`
	// Links to other device videos.
	Other                []string `protobuf:"bytes,2,rep,name=other,proto3" json:"other,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EndDeviceModel_Videos) Reset()      { *m = EndDeviceModel_Videos{} }
func (*EndDeviceModel_Videos) ProtoMessage() {}
func (*EndDeviceModel_Videos) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0145ad4e3f42c22, []int{1, 6}
}
func (m *EndDeviceModel_Videos) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EndDeviceModel_Videos) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EndDeviceModel_Videos.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EndDeviceModel_Videos) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EndDeviceModel_Videos.Merge(m, src)
}
func (m *EndDeviceModel_Videos) XXX_Size() int {
	return m.Size()
}
func (m *EndDeviceModel_Videos) XXX_DiscardUnknown() {
	xxx_messageInfo_EndDeviceModel_Videos.DiscardUnknown(m)
}

var xxx_messageInfo_EndDeviceModel_Videos proto.InternalMessageInfo

func (m *EndDeviceModel_Videos) GetMain() string {
	if m != nil {
		return m.Main
	}
	return ""
}

func (m *EndDeviceModel_Videos) GetOther() []string {
	if m != nil {
		return m.Other
	}
	return nil
}

type EndDeviceModel_Reseller struct {
	// Reseller name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Reseller regions.
	Region []string `protobuf:"bytes,2,rep,name=region,proto3" json:"region,omitempty"`
	// Reseller URL.
	Url                  string   `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EndDeviceModel_Reseller) Reset()      { *m = EndDeviceModel_Reseller{} }
func (*EndDeviceModel_Reseller) ProtoMessage() {}
func (*EndDeviceModel_Reseller) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0145ad4e3f42c22, []int{1, 7}
}
func (m *EndDeviceModel_Reseller) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EndDeviceModel_Reseller) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EndDeviceModel_Reseller.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EndDeviceModel_Reseller) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EndDeviceModel_Reseller.Merge(m, src)
}
func (m *EndDeviceModel_Reseller) XXX_Size() int {
	return m.Size()
}
func (m *EndDeviceModel_Reseller) XXX_DiscardUnknown() {
	xxx_messageInfo_EndDeviceModel_Reseller.DiscardUnknown(m)
}

var xxx_messageInfo_EndDeviceModel_Reseller proto.InternalMessageInfo

func (m *EndDeviceModel_Reseller) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *EndDeviceModel_Reseller) GetRegion() []string {
	if m != nil {
		return m.Region
	}
	return nil
}

func (m *EndDeviceModel_Reseller) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

type EndDeviceModel_Compliances struct {
	// List of safety standards the device is compliant with.
	Safety []*EndDeviceModel_Compliances_Compliance `protobuf:"bytes,1,rep,name=safety,proto3" json:"safety,omitempty"`
	// List of radio equipment standards the device is compliant with.
	RadioEquipment       []*EndDeviceModel_Compliances_Compliance `protobuf:"bytes,2,rep,name=radio_equipment,json=radioEquipment,proto3" json:"radio_equipment,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                 `json:"-"`
	XXX_sizecache        int32                                    `json:"-"`
}

func (m *EndDeviceModel_Compliances) Reset()      { *m = EndDeviceModel_Compliances{} }
func (*EndDeviceModel_Compliances) ProtoMessage() {}
func (*EndDeviceModel_Compliances) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0145ad4e3f42c22, []int{1, 8}
}
func (m *EndDeviceModel_Compliances) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EndDeviceModel_Compliances) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EndDeviceModel_Compliances.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EndDeviceModel_Compliances) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EndDeviceModel_Compliances.Merge(m, src)
}
func (m *EndDeviceModel_Compliances) XXX_Size() int {
	return m.Size()
}
func (m *EndDeviceModel_Compliances) XXX_DiscardUnknown() {
	xxx_messageInfo_EndDeviceModel_Compliances.DiscardUnknown(m)
}

var xxx_messageInfo_EndDeviceModel_Compliances proto.InternalMessageInfo

func (m *EndDeviceModel_Compliances) GetSafety() []*EndDeviceModel_Compliances_Compliance {
	if m != nil {
		return m.Safety
	}
	return nil
}

func (m *EndDeviceModel_Compliances) GetRadioEquipment() []*EndDeviceModel_Compliances_Compliance {
	if m != nil {
		return m.RadioEquipment
	}
	return nil
}

type EndDeviceModel_Compliances_Compliance struct {
	Body                 string   `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
	Norm                 string   `protobuf:"bytes,2,opt,name=norm,proto3" json:"norm,omitempty"`
	Standard             string   `protobuf:"bytes,3,opt,name=standard,proto3" json:"standard,omitempty"`
	Version              string   `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EndDeviceModel_Compliances_Compliance) Reset()      { *m = EndDeviceModel_Compliances_Compliance{} }
func (*EndDeviceModel_Compliances_Compliance) ProtoMessage() {}
func (*EndDeviceModel_Compliances_Compliance) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0145ad4e3f42c22, []int{1, 8, 0}
}
func (m *EndDeviceModel_Compliances_Compliance) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EndDeviceModel_Compliances_Compliance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EndDeviceModel_Compliances_Compliance.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EndDeviceModel_Compliances_Compliance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EndDeviceModel_Compliances_Compliance.Merge(m, src)
}
func (m *EndDeviceModel_Compliances_Compliance) XXX_Size() int {
	return m.Size()
}
func (m *EndDeviceModel_Compliances_Compliance) XXX_DiscardUnknown() {
	xxx_messageInfo_EndDeviceModel_Compliances_Compliance.DiscardUnknown(m)
}

var xxx_messageInfo_EndDeviceModel_Compliances_Compliance proto.InternalMessageInfo

func (m *EndDeviceModel_Compliances_Compliance) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func (m *EndDeviceModel_Compliances_Compliance) GetNorm() string {
	if m != nil {
		return m.Norm
	}
	return ""
}

func (m *EndDeviceModel_Compliances_Compliance) GetStandard() string {
	if m != nil {
		return m.Standard
	}
	return ""
}

func (m *EndDeviceModel_Compliances_Compliance) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type GetEndDeviceBrandRequest struct {
	// Application identifiers.
	ApplicationIds ApplicationIdentifiers `protobuf:"bytes,1,opt,name=application_ids,json=applicationIds,proto3" json:"application_ids"`
	// Brand identifier, as defined in the Device Repository.
	BrandID string `protobuf:"bytes,2,opt,name=brand_id,json=brandId,proto3" json:"brand_id,omitempty"`
	// Field mask paths.
	FieldMask            *types.FieldMask `protobuf:"bytes,3,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *GetEndDeviceBrandRequest) Reset()      { *m = GetEndDeviceBrandRequest{} }
func (*GetEndDeviceBrandRequest) ProtoMessage() {}
func (*GetEndDeviceBrandRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0145ad4e3f42c22, []int{2}
}
func (m *GetEndDeviceBrandRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetEndDeviceBrandRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetEndDeviceBrandRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetEndDeviceBrandRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetEndDeviceBrandRequest.Merge(m, src)
}
func (m *GetEndDeviceBrandRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetEndDeviceBrandRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetEndDeviceBrandRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetEndDeviceBrandRequest proto.InternalMessageInfo

func (m *GetEndDeviceBrandRequest) GetApplicationIds() ApplicationIdentifiers {
	if m != nil {
		return m.ApplicationIds
	}
	return ApplicationIdentifiers{}
}

func (m *GetEndDeviceBrandRequest) GetBrandID() string {
	if m != nil {
		return m.BrandID
	}
	return ""
}

func (m *GetEndDeviceBrandRequest) GetFieldMask() *types.FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

type ListEndDeviceBrandsRequest struct {
	// Application identifiers.
	ApplicationIds ApplicationIdentifiers `protobuf:"bytes,1,opt,name=application_ids,json=applicationIds,proto3" json:"application_ids"`
	// Limit the number of results per page.
	Limit uint32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	// Page number for pagination. 0 is interpreted as 1.
	Page uint32 `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	// Order (for pagination)
	OrderBy string `protobuf:"bytes,4,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	// Search for brands matching a query string.
	Search string `protobuf:"bytes,5,opt,name=search,proto3" json:"search,omitempty"`
	// Field mask paths.
	FieldMask            *types.FieldMask `protobuf:"bytes,6,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ListEndDeviceBrandsRequest) Reset()      { *m = ListEndDeviceBrandsRequest{} }
func (*ListEndDeviceBrandsRequest) ProtoMessage() {}
func (*ListEndDeviceBrandsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0145ad4e3f42c22, []int{3}
}
func (m *ListEndDeviceBrandsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListEndDeviceBrandsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListEndDeviceBrandsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListEndDeviceBrandsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListEndDeviceBrandsRequest.Merge(m, src)
}
func (m *ListEndDeviceBrandsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListEndDeviceBrandsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListEndDeviceBrandsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListEndDeviceBrandsRequest proto.InternalMessageInfo

func (m *ListEndDeviceBrandsRequest) GetApplicationIds() ApplicationIdentifiers {
	if m != nil {
		return m.ApplicationIds
	}
	return ApplicationIdentifiers{}
}

func (m *ListEndDeviceBrandsRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListEndDeviceBrandsRequest) GetPage() uint32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *ListEndDeviceBrandsRequest) GetOrderBy() string {
	if m != nil {
		return m.OrderBy
	}
	return ""
}

func (m *ListEndDeviceBrandsRequest) GetSearch() string {
	if m != nil {
		return m.Search
	}
	return ""
}

func (m *ListEndDeviceBrandsRequest) GetFieldMask() *types.FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

type GetEndDeviceModelRequest struct {
	// Application identifiers.
	ApplicationIds ApplicationIdentifiers `protobuf:"bytes,1,opt,name=application_ids,json=applicationIds,proto3" json:"application_ids"`
	// Brand identifier, as defined in the Device Repository.
	BrandID string `protobuf:"bytes,2,opt,name=brand_id,json=brandId,proto3" json:"brand_id,omitempty"`
	// Model identifier, as defined in the Device Repository.
	ModelID string `protobuf:"bytes,3,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
	// Field mask paths.
	FieldMask            *types.FieldMask `protobuf:"bytes,4,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *GetEndDeviceModelRequest) Reset()      { *m = GetEndDeviceModelRequest{} }
func (*GetEndDeviceModelRequest) ProtoMessage() {}
func (*GetEndDeviceModelRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0145ad4e3f42c22, []int{4}
}
func (m *GetEndDeviceModelRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetEndDeviceModelRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetEndDeviceModelRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetEndDeviceModelRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetEndDeviceModelRequest.Merge(m, src)
}
func (m *GetEndDeviceModelRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetEndDeviceModelRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetEndDeviceModelRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetEndDeviceModelRequest proto.InternalMessageInfo

func (m *GetEndDeviceModelRequest) GetApplicationIds() ApplicationIdentifiers {
	if m != nil {
		return m.ApplicationIds
	}
	return ApplicationIdentifiers{}
}

func (m *GetEndDeviceModelRequest) GetBrandID() string {
	if m != nil {
		return m.BrandID
	}
	return ""
}

func (m *GetEndDeviceModelRequest) GetModelID() string {
	if m != nil {
		return m.ModelID
	}
	return ""
}

func (m *GetEndDeviceModelRequest) GetFieldMask() *types.FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

type ListEndDeviceModelsRequest struct {
	// Application identifiers.
	ApplicationIds ApplicationIdentifiers `protobuf:"bytes,1,opt,name=application_ids,json=applicationIds,proto3" json:"application_ids"`
	// List end devices from a specific brand.
	BrandID string `protobuf:"bytes,2,opt,name=brand_id,json=brandId,proto3" json:"brand_id,omitempty"`
	// Limit the number of results per page.
	Limit uint32 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	// Page number for pagination. 0 is interpreted as 1.
	Page uint32 `protobuf:"varint,4,opt,name=page,proto3" json:"page,omitempty"`
	// Order end devices
	OrderBy string `protobuf:"bytes,5,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	// List end devices matching a query string.
	Search string `protobuf:"bytes,6,opt,name=search,proto3" json:"search,omitempty"`
	// Field mask paths.
	FieldMask            *types.FieldMask `protobuf:"bytes,7,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ListEndDeviceModelsRequest) Reset()      { *m = ListEndDeviceModelsRequest{} }
func (*ListEndDeviceModelsRequest) ProtoMessage() {}
func (*ListEndDeviceModelsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0145ad4e3f42c22, []int{5}
}
func (m *ListEndDeviceModelsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListEndDeviceModelsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListEndDeviceModelsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListEndDeviceModelsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListEndDeviceModelsRequest.Merge(m, src)
}
func (m *ListEndDeviceModelsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListEndDeviceModelsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListEndDeviceModelsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListEndDeviceModelsRequest proto.InternalMessageInfo

func (m *ListEndDeviceModelsRequest) GetApplicationIds() ApplicationIdentifiers {
	if m != nil {
		return m.ApplicationIds
	}
	return ApplicationIdentifiers{}
}

func (m *ListEndDeviceModelsRequest) GetBrandID() string {
	if m != nil {
		return m.BrandID
	}
	return ""
}

func (m *ListEndDeviceModelsRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListEndDeviceModelsRequest) GetPage() uint32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *ListEndDeviceModelsRequest) GetOrderBy() string {
	if m != nil {
		return m.OrderBy
	}
	return ""
}

func (m *ListEndDeviceModelsRequest) GetSearch() string {
	if m != nil {
		return m.Search
	}
	return ""
}

func (m *ListEndDeviceModelsRequest) GetFieldMask() *types.FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

type GetTemplateRequest struct {
	// Application identifiers.
	ApplicationIds ApplicationIdentifiers `protobuf:"bytes,1,opt,name=application_ids,json=applicationIds,proto3" json:"application_ids"`
	// End device version information.
	VersionIds           *EndDeviceVersionIdentifiers `protobuf:"bytes,2,opt,name=version_ids,json=versionIds,proto3" json:"version_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *GetTemplateRequest) Reset()      { *m = GetTemplateRequest{} }
func (*GetTemplateRequest) ProtoMessage() {}
func (*GetTemplateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0145ad4e3f42c22, []int{6}
}
func (m *GetTemplateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTemplateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTemplateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTemplateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTemplateRequest.Merge(m, src)
}
func (m *GetTemplateRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetTemplateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTemplateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTemplateRequest proto.InternalMessageInfo

func (m *GetTemplateRequest) GetApplicationIds() ApplicationIdentifiers {
	if m != nil {
		return m.ApplicationIds
	}
	return ApplicationIdentifiers{}
}

func (m *GetTemplateRequest) GetVersionIds() *EndDeviceVersionIdentifiers {
	if m != nil {
		return m.VersionIds
	}
	return nil
}

type GetPayloadFormatterRequest struct {
	// Application identifiers.
	ApplicationIds ApplicationIdentifiers `protobuf:"bytes,1,opt,name=application_ids,json=applicationIds,proto3" json:"application_ids"`
	// End device version information.
	VersionIDs *EndDeviceVersionIdentifiers `protobuf:"bytes,2,opt,name=version_ids,json=versionIds,proto3" json:"version_ids,omitempty"`
	// Field mask paths.
	FieldMask            *types.FieldMask `protobuf:"bytes,3,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *GetPayloadFormatterRequest) Reset()      { *m = GetPayloadFormatterRequest{} }
func (*GetPayloadFormatterRequest) ProtoMessage() {}
func (*GetPayloadFormatterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0145ad4e3f42c22, []int{7}
}
func (m *GetPayloadFormatterRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPayloadFormatterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPayloadFormatterRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPayloadFormatterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPayloadFormatterRequest.Merge(m, src)
}
func (m *GetPayloadFormatterRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetPayloadFormatterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPayloadFormatterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPayloadFormatterRequest proto.InternalMessageInfo

func (m *GetPayloadFormatterRequest) GetApplicationIds() ApplicationIdentifiers {
	if m != nil {
		return m.ApplicationIds
	}
	return ApplicationIdentifiers{}
}

func (m *GetPayloadFormatterRequest) GetVersionIDs() *EndDeviceVersionIdentifiers {
	if m != nil {
		return m.VersionIDs
	}
	return nil
}

func (m *GetPayloadFormatterRequest) GetFieldMask() *types.FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

type ListEndDeviceBrandsResponse struct {
	Brands               []*EndDeviceBrand `protobuf:"bytes,1,rep,name=brands,proto3" json:"brands,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ListEndDeviceBrandsResponse) Reset()      { *m = ListEndDeviceBrandsResponse{} }
func (*ListEndDeviceBrandsResponse) ProtoMessage() {}
func (*ListEndDeviceBrandsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0145ad4e3f42c22, []int{8}
}
func (m *ListEndDeviceBrandsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListEndDeviceBrandsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListEndDeviceBrandsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListEndDeviceBrandsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListEndDeviceBrandsResponse.Merge(m, src)
}
func (m *ListEndDeviceBrandsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListEndDeviceBrandsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListEndDeviceBrandsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListEndDeviceBrandsResponse proto.InternalMessageInfo

func (m *ListEndDeviceBrandsResponse) GetBrands() []*EndDeviceBrand {
	if m != nil {
		return m.Brands
	}
	return nil
}

type ListEndDeviceModelsResponse struct {
	Models               []*EndDeviceModel `protobuf:"bytes,1,rep,name=models,proto3" json:"models,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ListEndDeviceModelsResponse) Reset()      { *m = ListEndDeviceModelsResponse{} }
func (*ListEndDeviceModelsResponse) ProtoMessage() {}
func (*ListEndDeviceModelsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0145ad4e3f42c22, []int{9}
}
func (m *ListEndDeviceModelsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListEndDeviceModelsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListEndDeviceModelsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListEndDeviceModelsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListEndDeviceModelsResponse.Merge(m, src)
}
func (m *ListEndDeviceModelsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListEndDeviceModelsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListEndDeviceModelsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListEndDeviceModelsResponse proto.InternalMessageInfo

func (m *ListEndDeviceModelsResponse) GetModels() []*EndDeviceModel {
	if m != nil {
		return m.Models
	}
	return nil
}

type EncodedMessagePayload struct {
	FPort                uint32   `protobuf:"varint,1,opt,name=f_port,json=fPort,proto3" json:"f_port,omitempty"`
	FrmPayload           []byte   `protobuf:"bytes,2,opt,name=frm_payload,json=frmPayload,proto3" json:"frm_payload,omitempty"`
	Warnings             []string `protobuf:"bytes,3,rep,name=warnings,proto3" json:"warnings,omitempty"`
	Errors               []string `protobuf:"bytes,4,rep,name=errors,proto3" json:"errors,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EncodedMessagePayload) Reset()      { *m = EncodedMessagePayload{} }
func (*EncodedMessagePayload) ProtoMessage() {}
func (*EncodedMessagePayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0145ad4e3f42c22, []int{10}
}
func (m *EncodedMessagePayload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EncodedMessagePayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EncodedMessagePayload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EncodedMessagePayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EncodedMessagePayload.Merge(m, src)
}
func (m *EncodedMessagePayload) XXX_Size() int {
	return m.Size()
}
func (m *EncodedMessagePayload) XXX_DiscardUnknown() {
	xxx_messageInfo_EncodedMessagePayload.DiscardUnknown(m)
}

var xxx_messageInfo_EncodedMessagePayload proto.InternalMessageInfo

func (m *EncodedMessagePayload) GetFPort() uint32 {
	if m != nil {
		return m.FPort
	}
	return 0
}

func (m *EncodedMessagePayload) GetFrmPayload() []byte {
	if m != nil {
		return m.FrmPayload
	}
	return nil
}

func (m *EncodedMessagePayload) GetWarnings() []string {
	if m != nil {
		return m.Warnings
	}
	return nil
}

func (m *EncodedMessagePayload) GetErrors() []string {
	if m != nil {
		return m.Errors
	}
	return nil
}

type DecodedMessagePayload struct {
	Data                 *types.Struct `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Warnings             []string      `protobuf:"bytes,2,rep,name=warnings,proto3" json:"warnings,omitempty"`
	Errors               []string      `protobuf:"bytes,3,rep,name=errors,proto3" json:"errors,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *DecodedMessagePayload) Reset()      { *m = DecodedMessagePayload{} }
func (*DecodedMessagePayload) ProtoMessage() {}
func (*DecodedMessagePayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0145ad4e3f42c22, []int{11}
}
func (m *DecodedMessagePayload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DecodedMessagePayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DecodedMessagePayload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DecodedMessagePayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DecodedMessagePayload.Merge(m, src)
}
func (m *DecodedMessagePayload) XXX_Size() int {
	return m.Size()
}
func (m *DecodedMessagePayload) XXX_DiscardUnknown() {
	xxx_messageInfo_DecodedMessagePayload.DiscardUnknown(m)
}

var xxx_messageInfo_DecodedMessagePayload proto.InternalMessageInfo

func (m *DecodedMessagePayload) GetData() *types.Struct {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *DecodedMessagePayload) GetWarnings() []string {
	if m != nil {
		return m.Warnings
	}
	return nil
}

func (m *DecodedMessagePayload) GetErrors() []string {
	if m != nil {
		return m.Errors
	}
	return nil
}

type MessagePayloadDecoder struct {
	// Payload formatter type.
	Formatter PayloadFormatter `protobuf:"varint,1,opt,name=formatter,proto3,enum=ttn.lorawan.v3.PayloadFormatter" json:"formatter,omitempty"`
	// Parameter for the formatter, must be set together.
	FormatterParameter   string                           `protobuf:"bytes,2,opt,name=formatter_parameter,json=formatterParameter,proto3" json:"formatter_parameter,omitempty"`
	CodecID              string                           `protobuf:"bytes,3,opt,name=codec_id,json=codecId,proto3" json:"codec_id,omitempty"`
	Examples             []*MessagePayloadDecoder_Example `protobuf:"bytes,4,rep,name=examples,proto3" json:"examples,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *MessagePayloadDecoder) Reset()      { *m = MessagePayloadDecoder{} }
func (*MessagePayloadDecoder) ProtoMessage() {}
func (*MessagePayloadDecoder) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0145ad4e3f42c22, []int{12}
}
func (m *MessagePayloadDecoder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessagePayloadDecoder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessagePayloadDecoder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessagePayloadDecoder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessagePayloadDecoder.Merge(m, src)
}
func (m *MessagePayloadDecoder) XXX_Size() int {
	return m.Size()
}
func (m *MessagePayloadDecoder) XXX_DiscardUnknown() {
	xxx_messageInfo_MessagePayloadDecoder.DiscardUnknown(m)
}

var xxx_messageInfo_MessagePayloadDecoder proto.InternalMessageInfo

func (m *MessagePayloadDecoder) GetFormatter() PayloadFormatter {
	if m != nil {
		return m.Formatter
	}
	return PayloadFormatter_FORMATTER_NONE
}

func (m *MessagePayloadDecoder) GetFormatterParameter() string {
	if m != nil {
		return m.FormatterParameter
	}
	return ""
}

func (m *MessagePayloadDecoder) GetCodecID() string {
	if m != nil {
		return m.CodecID
	}
	return ""
}

func (m *MessagePayloadDecoder) GetExamples() []*MessagePayloadDecoder_Example {
	if m != nil {
		return m.Examples
	}
	return nil
}

type MessagePayloadDecoder_Example struct {
	Description          string                 `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	Input                *EncodedMessagePayload `protobuf:"bytes,2,opt,name=input,proto3" json:"input,omitempty"`
	Output               *DecodedMessagePayload `protobuf:"bytes,3,opt,name=output,proto3" json:"output,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *MessagePayloadDecoder_Example) Reset()      { *m = MessagePayloadDecoder_Example{} }
func (*MessagePayloadDecoder_Example) ProtoMessage() {}
func (*MessagePayloadDecoder_Example) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0145ad4e3f42c22, []int{12, 0}
}
func (m *MessagePayloadDecoder_Example) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessagePayloadDecoder_Example) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessagePayloadDecoder_Example.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessagePayloadDecoder_Example) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessagePayloadDecoder_Example.Merge(m, src)
}
func (m *MessagePayloadDecoder_Example) XXX_Size() int {
	return m.Size()
}
func (m *MessagePayloadDecoder_Example) XXX_DiscardUnknown() {
	xxx_messageInfo_MessagePayloadDecoder_Example.DiscardUnknown(m)
}

var xxx_messageInfo_MessagePayloadDecoder_Example proto.InternalMessageInfo

func (m *MessagePayloadDecoder_Example) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *MessagePayloadDecoder_Example) GetInput() *EncodedMessagePayload {
	if m != nil {
		return m.Input
	}
	return nil
}

func (m *MessagePayloadDecoder_Example) GetOutput() *DecodedMessagePayload {
	if m != nil {
		return m.Output
	}
	return nil
}

type MessagePayloadEncoder struct {
	// Payload formatter type.
	Formatter PayloadFormatter `protobuf:"varint,1,opt,name=formatter,proto3,enum=ttn.lorawan.v3.PayloadFormatter" json:"formatter,omitempty"`
	// Parameter for the formatter, must be set together.
	FormatterParameter   string                           `protobuf:"bytes,2,opt,name=formatter_parameter,json=formatterParameter,proto3" json:"formatter_parameter,omitempty"`
	CodecID              string                           `protobuf:"bytes,3,opt,name=codec_id,json=codecId,proto3" json:"codec_id,omitempty"`
	Examples             []*MessagePayloadEncoder_Example `protobuf:"bytes,4,rep,name=examples,proto3" json:"examples,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *MessagePayloadEncoder) Reset()      { *m = MessagePayloadEncoder{} }
func (*MessagePayloadEncoder) ProtoMessage() {}
func (*MessagePayloadEncoder) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0145ad4e3f42c22, []int{13}
}
func (m *MessagePayloadEncoder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessagePayloadEncoder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessagePayloadEncoder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessagePayloadEncoder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessagePayloadEncoder.Merge(m, src)
}
func (m *MessagePayloadEncoder) XXX_Size() int {
	return m.Size()
}
func (m *MessagePayloadEncoder) XXX_DiscardUnknown() {
	xxx_messageInfo_MessagePayloadEncoder.DiscardUnknown(m)
}

var xxx_messageInfo_MessagePayloadEncoder proto.InternalMessageInfo

func (m *MessagePayloadEncoder) GetFormatter() PayloadFormatter {
	if m != nil {
		return m.Formatter
	}
	return PayloadFormatter_FORMATTER_NONE
}

func (m *MessagePayloadEncoder) GetFormatterParameter() string {
	if m != nil {
		return m.FormatterParameter
	}
	return ""
}

func (m *MessagePayloadEncoder) GetCodecID() string {
	if m != nil {
		return m.CodecID
	}
	return ""
}

func (m *MessagePayloadEncoder) GetExamples() []*MessagePayloadEncoder_Example {
	if m != nil {
		return m.Examples
	}
	return nil
}

type MessagePayloadEncoder_Example struct {
	Description          string                 `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	Input                *DecodedMessagePayload `protobuf:"bytes,2,opt,name=input,proto3" json:"input,omitempty"`
	Output               *EncodedMessagePayload `protobuf:"bytes,3,opt,name=output,proto3" json:"output,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *MessagePayloadEncoder_Example) Reset()      { *m = MessagePayloadEncoder_Example{} }
func (*MessagePayloadEncoder_Example) ProtoMessage() {}
func (*MessagePayloadEncoder_Example) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0145ad4e3f42c22, []int{13, 0}
}
func (m *MessagePayloadEncoder_Example) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessagePayloadEncoder_Example) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessagePayloadEncoder_Example.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessagePayloadEncoder_Example) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessagePayloadEncoder_Example.Merge(m, src)
}
func (m *MessagePayloadEncoder_Example) XXX_Size() int {
	return m.Size()
}
func (m *MessagePayloadEncoder_Example) XXX_DiscardUnknown() {
	xxx_messageInfo_MessagePayloadEncoder_Example.DiscardUnknown(m)
}

var xxx_messageInfo_MessagePayloadEncoder_Example proto.InternalMessageInfo

func (m *MessagePayloadEncoder_Example) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *MessagePayloadEncoder_Example) GetInput() *DecodedMessagePayload {
	if m != nil {
		return m.Input
	}
	return nil
}

func (m *MessagePayloadEncoder_Example) GetOutput() *EncodedMessagePayload {
	if m != nil {
		return m.Output
	}
	return nil
}

func init() {
	proto.RegisterEnum("ttn.lorawan.v3.KeyProvisioning", KeyProvisioning_name, KeyProvisioning_value)
	golang_proto.RegisterEnum("ttn.lorawan.v3.KeyProvisioning", KeyProvisioning_name, KeyProvisioning_value)
	proto.RegisterEnum("ttn.lorawan.v3.KeySecurity", KeySecurity_name, KeySecurity_value)
	golang_proto.RegisterEnum("ttn.lorawan.v3.KeySecurity", KeySecurity_name, KeySecurity_value)
	proto.RegisterType((*EndDeviceBrand)(nil), "ttn.lorawan.v3.EndDeviceBrand")
	golang_proto.RegisterType((*EndDeviceBrand)(nil), "ttn.lorawan.v3.EndDeviceBrand")
	proto.RegisterType((*EndDeviceModel)(nil), "ttn.lorawan.v3.EndDeviceModel")
	golang_proto.RegisterType((*EndDeviceModel)(nil), "ttn.lorawan.v3.EndDeviceModel")
	proto.RegisterType((*EndDeviceModel_HardwareVersion)(nil), "ttn.lorawan.v3.EndDeviceModel.HardwareVersion")
	golang_proto.RegisterType((*EndDeviceModel_HardwareVersion)(nil), "ttn.lorawan.v3.EndDeviceModel.HardwareVersion")
	proto.RegisterType((*EndDeviceModel_FirmwareVersion)(nil), "ttn.lorawan.v3.EndDeviceModel.FirmwareVersion")
	golang_proto.RegisterType((*EndDeviceModel_FirmwareVersion)(nil), "ttn.lorawan.v3.EndDeviceModel.FirmwareVersion")
	proto.RegisterMapType((map[string]*EndDeviceModel_FirmwareVersion_Profile)(nil), "ttn.lorawan.v3.EndDeviceModel.FirmwareVersion.ProfilesEntry")
	golang_proto.RegisterMapType((map[string]*EndDeviceModel_FirmwareVersion_Profile)(nil), "ttn.lorawan.v3.EndDeviceModel.FirmwareVersion.ProfilesEntry")
	proto.RegisterType((*EndDeviceModel_FirmwareVersion_Profile)(nil), "ttn.lorawan.v3.EndDeviceModel.FirmwareVersion.Profile")
	golang_proto.RegisterType((*EndDeviceModel_FirmwareVersion_Profile)(nil), "ttn.lorawan.v3.EndDeviceModel.FirmwareVersion.Profile")
	proto.RegisterType((*EndDeviceModel_Dimensions)(nil), "ttn.lorawan.v3.EndDeviceModel.Dimensions")
	golang_proto.RegisterType((*EndDeviceModel_Dimensions)(nil), "ttn.lorawan.v3.EndDeviceModel.Dimensions")
	proto.RegisterType((*EndDeviceModel_Battery)(nil), "ttn.lorawan.v3.EndDeviceModel.Battery")
	golang_proto.RegisterType((*EndDeviceModel_Battery)(nil), "ttn.lorawan.v3.EndDeviceModel.Battery")
	proto.RegisterType((*EndDeviceModel_OperatingConditions)(nil), "ttn.lorawan.v3.EndDeviceModel.OperatingConditions")
	golang_proto.RegisterType((*EndDeviceModel_OperatingConditions)(nil), "ttn.lorawan.v3.EndDeviceModel.OperatingConditions")
	proto.RegisterType((*EndDeviceModel_OperatingConditions_Limits)(nil), "ttn.lorawan.v3.EndDeviceModel.OperatingConditions.Limits")
	golang_proto.RegisterType((*EndDeviceModel_OperatingConditions_Limits)(nil), "ttn.lorawan.v3.EndDeviceModel.OperatingConditions.Limits")
	proto.RegisterType((*EndDeviceModel_Photos)(nil), "ttn.lorawan.v3.EndDeviceModel.Photos")
	golang_proto.RegisterType((*EndDeviceModel_Photos)(nil), "ttn.lorawan.v3.EndDeviceModel.Photos")
	proto.RegisterType((*EndDeviceModel_Videos)(nil), "ttn.lorawan.v3.EndDeviceModel.Videos")
	golang_proto.RegisterType((*EndDeviceModel_Videos)(nil), "ttn.lorawan.v3.EndDeviceModel.Videos")
	proto.RegisterType((*EndDeviceModel_Reseller)(nil), "ttn.lorawan.v3.EndDeviceModel.Reseller")
	golang_proto.RegisterType((*EndDeviceModel_Reseller)(nil), "ttn.lorawan.v3.EndDeviceModel.Reseller")
	proto.RegisterType((*EndDeviceModel_Compliances)(nil), "ttn.lorawan.v3.EndDeviceModel.Compliances")
	golang_proto.RegisterType((*EndDeviceModel_Compliances)(nil), "ttn.lorawan.v3.EndDeviceModel.Compliances")
	proto.RegisterType((*EndDeviceModel_Compliances_Compliance)(nil), "ttn.lorawan.v3.EndDeviceModel.Compliances.Compliance")
	golang_proto.RegisterType((*EndDeviceModel_Compliances_Compliance)(nil), "ttn.lorawan.v3.EndDeviceModel.Compliances.Compliance")
	proto.RegisterType((*GetEndDeviceBrandRequest)(nil), "ttn.lorawan.v3.GetEndDeviceBrandRequest")
	golang_proto.RegisterType((*GetEndDeviceBrandRequest)(nil), "ttn.lorawan.v3.GetEndDeviceBrandRequest")
	proto.RegisterType((*ListEndDeviceBrandsRequest)(nil), "ttn.lorawan.v3.ListEndDeviceBrandsRequest")
	golang_proto.RegisterType((*ListEndDeviceBrandsRequest)(nil), "ttn.lorawan.v3.ListEndDeviceBrandsRequest")
	proto.RegisterType((*GetEndDeviceModelRequest)(nil), "ttn.lorawan.v3.GetEndDeviceModelRequest")
	golang_proto.RegisterType((*GetEndDeviceModelRequest)(nil), "ttn.lorawan.v3.GetEndDeviceModelRequest")
	proto.RegisterType((*ListEndDeviceModelsRequest)(nil), "ttn.lorawan.v3.ListEndDeviceModelsRequest")
	golang_proto.RegisterType((*ListEndDeviceModelsRequest)(nil), "ttn.lorawan.v3.ListEndDeviceModelsRequest")
	proto.RegisterType((*GetTemplateRequest)(nil), "ttn.lorawan.v3.GetTemplateRequest")
	golang_proto.RegisterType((*GetTemplateRequest)(nil), "ttn.lorawan.v3.GetTemplateRequest")
	proto.RegisterType((*GetPayloadFormatterRequest)(nil), "ttn.lorawan.v3.GetPayloadFormatterRequest")
	golang_proto.RegisterType((*GetPayloadFormatterRequest)(nil), "ttn.lorawan.v3.GetPayloadFormatterRequest")
	proto.RegisterType((*ListEndDeviceBrandsResponse)(nil), "ttn.lorawan.v3.ListEndDeviceBrandsResponse")
	golang_proto.RegisterType((*ListEndDeviceBrandsResponse)(nil), "ttn.lorawan.v3.ListEndDeviceBrandsResponse")
	proto.RegisterType((*ListEndDeviceModelsResponse)(nil), "ttn.lorawan.v3.ListEndDeviceModelsResponse")
	golang_proto.RegisterType((*ListEndDeviceModelsResponse)(nil), "ttn.lorawan.v3.ListEndDeviceModelsResponse")
	proto.RegisterType((*EncodedMessagePayload)(nil), "ttn.lorawan.v3.EncodedMessagePayload")
	golang_proto.RegisterType((*EncodedMessagePayload)(nil), "ttn.lorawan.v3.EncodedMessagePayload")
	proto.RegisterType((*DecodedMessagePayload)(nil), "ttn.lorawan.v3.DecodedMessagePayload")
	golang_proto.RegisterType((*DecodedMessagePayload)(nil), "ttn.lorawan.v3.DecodedMessagePayload")
	proto.RegisterType((*MessagePayloadDecoder)(nil), "ttn.lorawan.v3.MessagePayloadDecoder")
	golang_proto.RegisterType((*MessagePayloadDecoder)(nil), "ttn.lorawan.v3.MessagePayloadDecoder")
	proto.RegisterType((*MessagePayloadDecoder_Example)(nil), "ttn.lorawan.v3.MessagePayloadDecoder.Example")
	golang_proto.RegisterType((*MessagePayloadDecoder_Example)(nil), "ttn.lorawan.v3.MessagePayloadDecoder.Example")
	proto.RegisterType((*MessagePayloadEncoder)(nil), "ttn.lorawan.v3.MessagePayloadEncoder")
	golang_proto.RegisterType((*MessagePayloadEncoder)(nil), "ttn.lorawan.v3.MessagePayloadEncoder")
	proto.RegisterType((*MessagePayloadEncoder_Example)(nil), "ttn.lorawan.v3.MessagePayloadEncoder.Example")
	golang_proto.RegisterType((*MessagePayloadEncoder_Example)(nil), "ttn.lorawan.v3.MessagePayloadEncoder.Example")
}

func init() {
	proto.RegisterFile("lorawan-stack/api/devicerepository.proto", fileDescriptor_c0145ad4e3f42c22)
}
func init() {
	golang_proto.RegisterFile("lorawan-stack/api/devicerepository.proto", fileDescriptor_c0145ad4e3f42c22)
}

var fileDescriptor_c0145ad4e3f42c22 = []byte{
	// 2827 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe4, 0x3a, 0x4b, 0x6c, 0x1b, 0xc7,
	0xd9, 0x5c, 0x52, 0x22, 0xa9, 0xa1, 0x2d, 0xd1, 0x63, 0xfb, 0xf7, 0x9a, 0x4a, 0x56, 0xfa, 0x19,
	0x27, 0x91, 0xed, 0x88, 0x4c, 0x69, 0x24, 0x8d, 0x9d, 0xa7, 0x29, 0xd1, 0x36, 0x63, 0xeb, 0xd1,
	0x95, 0xe5, 0x34, 0x71, 0x13, 0x62, 0xc4, 0x1d, 0x92, 0x5b, 0x91, 0xbb, 0x9b, 0xd9, 0xa1, 0x14,
	0xc5, 0x35, 0x10, 0xe4, 0x50, 0xf8, 0x90, 0xa2, 0x45, 0x72, 0xe9, 0xb1, 0x45, 0x5b, 0x34, 0x40,
	0x81, 0x20, 0x69, 0x51, 0x20, 0x2d, 0x82, 0x36, 0xed, 0xa1, 0x70, 0x7b, 0x0a, 0xd0, 0x4b, 0x4e,
	0x41, 0x44, 0x05, 0x68, 0x4e, 0x45, 0x6e, 0x0d, 0xd4, 0x43, 0x8b, 0x79, 0xec, 0x72, 0xf9, 0x50,
	0x28, 0x39, 0x36, 0x8a, 0xb4, 0x27, 0xcd, 0xcc, 0xf7, 0x98, 0xef, 0x35, 0xdf, 0x63, 0x29, 0x30,
	0x55, 0xb7, 0x09, 0x5a, 0x47, 0xd6, 0xb4, 0x4b, 0x51, 0x79, 0x35, 0x8b, 0x1c, 0x33, 0x6b, 0xe0,
	0x35, 0xb3, 0x8c, 0x09, 0x76, 0x6c, 0xd7, 0xa4, 0x36, 0xd9, 0xc8, 0x38, 0xc4, 0xa6, 0x36, 0x1c,
	0xa5, 0xd4, 0xca, 0x48, 0xec, 0xcc, 0xda, 0xa9, 0xd4, 0xd9, 0xaa, 0x49, 0x6b, 0xcd, 0x95, 0x4c,
	0xd9, 0x6e, 0x64, 0xb1, 0xb5, 0x66, 0x6f, 0x38, 0xc4, 0x7e, 0x69, 0x23, 0xcb, 0x91, 0xcb, 0xd3,
	0x55, 0x6c, 0x4d, 0xaf, 0xa1, 0xba, 0x69, 0x20, 0x8a, 0xb3, 0x3d, 0x0b, 0xc1, 0x32, 0x35, 0x1d,
	0x60, 0x51, 0xb5, 0xab, 0xb6, 0x20, 0x5e, 0x69, 0x56, 0xf8, 0x8e, 0x6f, 0xf8, 0x4a, 0xa2, 0xdf,
	0x55, 0xb5, 0xed, 0x6a, 0x1d, 0x73, 0x21, 0x91, 0x65, 0xd9, 0x14, 0x51, 0xd3, 0xb6, 0x5c, 0x09,
	0x9d, 0x94, 0x50, 0x9f, 0x47, 0xc5, 0xc4, 0x75, 0xa3, 0xd4, 0x40, 0xee, 0x6a, 0x17, 0xbd, 0x8f,
	0xe1, 0x52, 0xd2, 0x2c, 0x53, 0x09, 0xd5, 0xba, 0xa1, 0xeb, 0x04, 0x39, 0x0e, 0x26, 0x1e, 0xff,
	0x74, 0xaf, 0xa5, 0xb0, 0x65, 0x94, 0x84, 0xb5, 0x3c, 0x19, 0x7a, 0x71, 0x1a, 0xd8, 0x75, 0x51,
	0x15, 0x7b, 0x5c, 0xee, 0xe9, 0xc5, 0x30, 0x0d, 0x6c, 0x51, 0xb3, 0x62, 0xfa, 0x57, 0xa5, 0xff,
	0x16, 0x06, 0xa3, 0x05, 0xcb, 0x98, 0xe5, 0xac, 0xf3, 0x04, 0x59, 0x06, 0xcc, 0x83, 0xf8, 0x0a,
	0x5b, 0x94, 0x4c, 0x43, 0x55, 0x26, 0x95, 0xa9, 0x91, 0xfc, 0xfd, 0xdb, 0xf9, 0x63, 0x24, 0xad,
	0x1e, 0xcb, 0x69, 0x2f, 0x5c, 0x45, 0xd3, 0x2f, 0x3f, 0x38, 0x7d, 0xfa, 0xf9, 0xa9, 0x27, 0xcf,
	0x5c, 0x9d, 0x7e, 0xfe, 0x49, 0x6f, 0x7b, 0xfc, 0x5a, 0xee, 0x81, 0xeb, 0xc7, 0xf4, 0x18, 0x27,
	0x2c, 0x1a, 0x10, 0x82, 0x21, 0x0b, 0x35, 0xb0, 0x1a, 0x66, 0xf4, 0x3a, 0x5f, 0xc3, 0x33, 0xe0,
	0xa8, 0x43, 0xcc, 0x35, 0x44, 0x71, 0x09, 0x5b, 0x14, 0x13, 0x87, 0x98, 0x2e, 0x2e, 0x59, 0xcd,
	0xc6, 0x0a, 0x26, 0x6a, 0x64, 0x52, 0x99, 0xda, 0xaf, 0x1f, 0x91, 0x08, 0x05, 0x1f, 0x3e, 0xcf,
	0xc1, 0xf0, 0x1c, 0x98, 0xb0, 0x49, 0x15, 0x59, 0xe6, 0xcb, 0xdc, 0x11, 0xa5, 0xa6, 0x65, 0xbe,
	0xd8, 0xc4, 0xa5, 0x80, 0x3e, 0xea, 0xd0, 0x64, 0x64, 0x6a, 0x44, 0xbf, 0x3b, 0x88, 0xb6, 0xcc,
	0xb1, 0x8a, 0x6d, 0x24, 0xf8, 0x10, 0x38, 0xc2, 0xac, 0x52, 0x42, 0xf5, 0xba, 0x89, 0xac, 0x32,
	0x2e, 0xad, 0x61, 0xcb, 0xb0, 0x09, 0x53, 0x75, 0x98, 0x4b, 0x70, 0x88, 0x81, 0xcf, 0x4a, 0xe8,
	0x15, 0x0e, 0x2c, 0x1a, 0x50, 0x05, 0xb1, 0x75, 0xbc, 0xe2, 0x9a, 0x14, 0xab, 0x51, 0xae, 0x91,
	0xb7, 0x85, 0x87, 0xc0, 0x30, 0x6e, 0x20, 0xb3, 0xae, 0xc6, 0xf8, 0xb9, 0xd8, 0x30, 0xf5, 0xeb,
	0x76, 0xd5, 0x56, 0xe3, 0x42, 0x7d, 0xb6, 0x4e, 0xbf, 0x77, 0x24, 0x60, 0xe9, 0x39, 0xdb, 0xc0,
	0xf5, 0xdb, 0x62, 0xe9, 0x3c, 0x88, 0x37, 0x18, 0x33, 0xc6, 0x23, 0xbc, 0x47, 0x1e, 0x9c, 0xb0,
	0x68, 0xc0, 0x71, 0xe9, 0xad, 0x08, 0xa7, 0x8f, 0x6d, 0xe7, 0x87, 0x48, 0x58, 0xcd, 0x49, 0xb7,
	0x9d, 0x00, 0x09, 0x03, 0xbb, 0x65, 0x62, 0x3a, 0xcc, 0xa4, 0xea, 0x10, 0xc7, 0x89, 0x6f, 0xe7,
	0x87, 0x49, 0x44, 0xfd, 0x60, 0x4c, 0x0f, 0x02, 0xe1, 0x55, 0x70, 0xa0, 0x86, 0x88, 0xb1, 0x8e,
	0x08, 0xb3, 0x2c, 0x71, 0xd9, 0x9b, 0x51, 0x87, 0x27, 0x23, 0x53, 0x89, 0x5c, 0x26, 0xd3, 0xf9,
	0xa8, 0x33, 0x9d, 0xb6, 0xc8, 0x5c, 0x90, 0x74, 0x57, 0x04, 0x99, 0x9e, 0xac, 0x75, 0x1e, 0xb8,
	0x8c, 0x79, 0xc5, 0x24, 0x8d, 0x4e, 0xe6, 0xd1, 0x5d, 0x31, 0x3f, 0x27, 0xe9, 0x7c, 0xe6, 0x95,
	0xce, 0x03, 0x97, 0x79, 0xd8, 0xc5, 0x96, 0x6b, 0x13, 0x57, 0x8d, 0xf1, 0x40, 0xf2, 0xb6, 0xb0,
	0x08, 0x80, 0x61, 0x36, 0xb0, 0x25, 0xee, 0x63, 0x1e, 0x4d, 0xe4, 0x8e, 0x0f, 0xb8, 0x6f, 0xd6,
	0x27, 0xd0, 0x03, 0xc4, 0xf0, 0x14, 0x88, 0xae, 0x63, 0xb3, 0x5a, 0xa3, 0xea, 0x08, 0x67, 0x33,
	0x9e, 0x11, 0x89, 0x20, 0xe3, 0x25, 0x82, 0xcc, 0xb9, 0xba, 0x8d, 0xe8, 0x15, 0x54, 0x6f, 0x62,
	0x5d, 0xa2, 0xc2, 0xa7, 0x40, 0x6c, 0x05, 0x51, 0x8a, 0xc9, 0x86, 0x0a, 0x38, 0xd5, 0x7d, 0x03,
	0x2e, 0xcf, 0x0b, 0x6c, 0xdd, 0x23, 0x83, 0x18, 0x1c, 0xb2, 0x1d, 0x4c, 0x10, 0x35, 0xad, 0x6a,
	0xa9, 0x6c, 0x5b, 0x86, 0xc9, 0x93, 0x99, 0x9a, 0xe0, 0xec, 0x72, 0x03, 0xd8, 0x2d, 0x78, 0xa4,
	0x33, 0x3e, 0xa5, 0x7e, 0xd0, 0xee, 0x3d, 0x84, 0x47, 0x40, 0xcc, 0x74, 0x4a, 0x65, 0xdb, 0xc0,
	0xea, 0x3e, 0x1e, 0xf7, 0x51, 0xd3, 0x99, 0xb1, 0x0d, 0x0c, 0x9f, 0x06, 0xc9, 0x55, 0xbc, 0x51,
	0x72, 0x88, 0xbd, 0x66, 0x32, 0x43, 0x98, 0x56, 0x55, 0xdd, 0x3f, 0x19, 0x99, 0x1a, 0xcd, 0x4d,
	0x74, 0xdf, 0x7d, 0x11, 0x6f, 0x2c, 0x06, 0xd0, 0xf4, 0xb1, 0xd5, 0xce, 0x03, 0xf8, 0x04, 0xd8,
	0xc7, 0x78, 0xb9, 0xb8, 0xdc, 0x24, 0x26, 0xdd, 0x50, 0x47, 0x27, 0x95, 0xa9, 0xd1, 0xdc, 0x78,
	0x1f, 0x3e, 0x4b, 0x12, 0x45, 0x4f, 0xac, 0xb6, 0x37, 0xf0, 0x71, 0x10, 0x75, 0x6a, 0x36, 0xb5,
	0x5d, 0x75, 0x8c, 0x6b, 0x7f, 0xef, 0x00, 0xed, 0x17, 0x39, 0xb2, 0x2e, 0x89, 0x18, 0xf9, 0x9a,
	0x69, 0x60, 0xdb, 0x55, 0x93, 0xbb, 0x22, 0xbf, 0xc2, 0x91, 0x75, 0x49, 0x04, 0x27, 0x40, 0xc2,
	0x21, 0xb6, 0xd1, 0x2c, 0xd3, 0x52, 0x93, 0xd4, 0xd5, 0x03, 0xdc, 0x4c, 0x40, 0x1e, 0x2d, 0x93,
	0x3a, 0xbc, 0x07, 0xec, 0x37, 0x10, 0x45, 0x6e, 0x0d, 0x63, 0x81, 0x02, 0x39, 0xca, 0x3e, 0xff,
	0x90, 0x21, 0x15, 0xc0, 0x08, 0xc1, 0x2e, 0xae, 0xd7, 0x59, 0xda, 0x3b, 0xc8, 0x1f, 0xc0, 0xfd,
	0x03, 0xe4, 0xd0, 0x25, 0xbe, 0xde, 0xa6, 0x84, 0x97, 0x40, 0xa2, 0x6c, 0x37, 0x1c, 0x91, 0xea,
	0x5c, 0xf5, 0x10, 0x57, 0xe8, 0xc4, 0x00, 0x46, 0x33, 0x6d, 0x0a, 0x3d, 0x48, 0x0e, 0x4f, 0x82,
	0x03, 0xc8, 0x10, 0xa1, 0x80, 0xea, 0x25, 0x82, 0x0c, 0xd3, 0x76, 0xd5, 0xc3, 0xfc, 0x29, 0x25,
	0xdb, 0x00, 0x9d, 0x9f, 0xa7, 0x2a, 0x60, 0xac, 0xeb, 0xbd, 0xb3, 0x07, 0x28, 0x1f, 0xb5, 0x48,
	0x85, 0xba, 0xb7, 0x65, 0x10, 0xab, 0xd9, 0xc0, 0xc4, 0x2c, 0xf3, 0x04, 0xb7, 0x5f, 0xf7, 0xb6,
	0xdc, 0x9c, 0x88, 0xd0, 0x60, 0x0d, 0x61, 0xe6, 0x44, 0x84, 0x8a, 0xb2, 0x91, 0xfa, 0x24, 0x02,
	0xc6, 0xba, 0xde, 0xfe, 0x2d, 0x5d, 0xf4, 0x04, 0x18, 0x77, 0x9b, 0x8e, 0x63, 0x13, 0x8a, 0x8d,
	0x52, 0x6f, 0x86, 0x8b, 0x70, 0x35, 0x8f, 0xfa, 0x28, 0x17, 0xba, 0x53, 0xd7, 0x37, 0x41, 0xdc,
	0x21, 0x76, 0xc5, 0xac, 0x63, 0x51, 0xa7, 0x12, 0xb9, 0xc7, 0xf6, 0x96, 0xb1, 0x32, 0x8b, 0x92,
	0xbc, 0x60, 0x51, 0xb2, 0xa1, 0xfb, 0xdc, 0x52, 0xdf, 0x53, 0x40, 0x4c, 0xc2, 0xe0, 0x38, 0x18,
	0x69, 0x97, 0x33, 0x9e, 0xa7, 0xf5, 0xf8, 0x9a, 0x57, 0xc2, 0xee, 0x06, 0x40, 0x12, 0xf9, 0xd5,
	0x46, 0x1f, 0x91, 0x27, 0x45, 0x83, 0xb9, 0x4f, 0x0a, 0x53, 0x2a, 0x63, 0xc2, 0xcb, 0xa5, 0xa8,
	0x27, 0x71, 0x3d, 0x29, 0x01, 0x33, 0xde, 0x39, 0x3c, 0x0a, 0xe2, 0xec, 0x99, 0x97, 0x19, 0x27,
	0x61, 0xf4, 0x18, 0xdf, 0x17, 0x8d, 0x94, 0x0b, 0xf6, 0x77, 0x88, 0x0a, 0x93, 0x20, 0xb2, 0x8a,
	0x37, 0xe4, 0x85, 0x6c, 0x09, 0x2f, 0x81, 0xe1, 0x35, 0x96, 0xe1, 0x38, 0xfb, 0x44, 0xee, 0xe1,
	0x5b, 0xb3, 0x84, 0x2e, 0x98, 0x9c, 0x09, 0x3f, 0xa2, 0xa4, 0x5a, 0x0a, 0x00, 0xed, 0x94, 0x0b,
	0xbf, 0x06, 0x86, 0xd7, 0x4d, 0x83, 0xd6, 0xf8, 0xa5, 0x03, 0xb2, 0xac, 0xc0, 0x64, 0x99, 0xb9,
	0x26, 0x32, 0x73, 0x78, 0x17, 0x99, 0x59, 0xa0, 0xc2, 0xaf, 0x83, 0xb8, 0x61, 0xa2, 0x06, 0xa6,
	0x32, 0xf6, 0x06, 0x90, 0xf9, 0xc8, 0xec, 0xb6, 0x3a, 0xb6, 0xaa, 0xb4, 0xc6, 0xbd, 0x34, 0xe8,
	0x36, 0x81, 0x9a, 0xba, 0x0a, 0x62, 0x32, 0xb3, 0xc3, 0xc7, 0x40, 0x82, 0x60, 0xa7, 0x8e, 0xca,
	0x18, 0xad, 0xd4, 0xb1, 0x54, 0x33, 0xd5, 0xc3, 0x24, 0x6f, 0xdb, 0x75, 0xc1, 0x23, 0x88, 0xce,
	0x9a, 0x13, 0xba, 0xe1, 0xf8, 0xbd, 0x19, 0x5b, 0xa7, 0xfe, 0x18, 0x06, 0x07, 0xfb, 0x24, 0x7a,
	0x78, 0x15, 0x24, 0x28, 0x6e, 0x70, 0x40, 0x93, 0x78, 0x37, 0x9d, 0xde, 0x7b, 0xc5, 0xc8, 0x5c,
	0x32, 0x1b, 0x26, 0x75, 0xf5, 0x20, 0x37, 0x58, 0x01, 0x07, 0x08, 0xae, 0x23, 0x6a, 0xae, 0xe1,
	0x52, 0xad, 0xd9, 0x30, 0x0d, 0x96, 0xd0, 0xc3, 0x5f, 0xf6, 0x8a, 0xa4, 0xc7, 0xf3, 0x82, 0x64,
	0x99, 0xaa, 0x80, 0xa8, 0x80, 0xc1, 0x69, 0x10, 0x69, 0x98, 0xd6, 0x6e, 0xe2, 0x82, 0xe1, 0x71,
	0x74, 0xf4, 0xd2, 0x6e, 0x42, 0x82, 0xe1, 0xa5, 0x72, 0x20, 0x2a, 0xca, 0x05, 0x33, 0x71, 0x03,
	0x99, 0x5e, 0x82, 0xe1, 0x6b, 0xd6, 0x29, 0xda, 0xb4, 0x86, 0x89, 0x1a, 0xe6, 0xd9, 0x42, 0x6c,
	0x18, 0x8d, 0xa8, 0x11, 0x7b, 0xa0, 0xb9, 0x00, 0xe2, 0x5e, 0x3e, 0xf7, 0x1b, 0x6d, 0x25, 0xd0,
	0x68, 0xff, 0x1f, 0x88, 0x12, 0x5c, 0x65, 0x09, 0x4e, 0x90, 0xc9, 0x1d, 0x7b, 0x8a, 0xac, 0xa4,
	0x88, 0x17, 0xcb, 0x96, 0xa9, 0x37, 0xc3, 0x20, 0x11, 0xc8, 0xe8, 0x70, 0x0e, 0x44, 0x5d, 0x54,
	0xc1, 0x94, 0xbd, 0x57, 0x96, 0xa5, 0x1e, 0xda, 0x7d, 0x35, 0x08, 0xac, 0x75, 0xc9, 0x04, 0xbe,
	0x00, 0xc6, 0x78, 0x21, 0x28, 0xe1, 0x17, 0x9b, 0xa6, 0xd3, 0xc0, 0x16, 0xe5, 0x12, 0xdd, 0x32,
	0xdf, 0x51, 0xce, 0xad, 0xe0, 0x31, 0x4b, 0x7d, 0x1b, 0x80, 0x36, 0x94, 0x99, 0x62, 0xc5, 0x36,
	0xbc, 0x54, 0xc3, 0xd7, 0xdc, 0x3c, 0x36, 0x69, 0xf8, 0x73, 0x88, 0x4d, 0x1a, 0x30, 0x05, 0xe2,
	0x2e, 0x45, 0x96, 0x81, 0x88, 0x97, 0xbd, 0xfc, 0x7d, 0xb0, 0x38, 0x0c, 0x75, 0x14, 0x87, 0xf4,
	0x3f, 0x15, 0xa0, 0x9e, 0xc7, 0xb4, 0x73, 0x56, 0xd2, 0xf1, 0x8b, 0x4d, 0xec, 0x52, 0xb8, 0x0c,
	0xc6, 0x90, 0xe3, 0xd4, 0xcd, 0xb2, 0x98, 0x4e, 0x4c, 0xc3, 0x95, 0x31, 0xd6, 0xd3, 0xab, 0x9d,
	0x6d, 0xa3, 0x05, 0xe6, 0x92, 0xfc, 0xd0, 0xcd, 0x8f, 0x26, 0x42, 0xfa, 0x28, 0x0a, 0x42, 0x99,
	0x3b, 0xda, 0xf3, 0x81, 0xe8, 0xed, 0x73, 0xbb, 0xec, 0xed, 0x5b, 0x1f, 0x4d, 0xc4, 0xb8, 0x84,
	0xc5, 0xd9, 0xf6, 0xa8, 0x70, 0x1a, 0x80, 0xf6, 0xa0, 0x2a, 0x33, 0x56, 0x6f, 0xd6, 0x38, 0xc7,
	0x50, 0xe6, 0x90, 0xbb, 0xaa, 0x8f, 0x54, 0xbc, 0x65, 0xfa, 0xcf, 0x61, 0x90, 0xba, 0x64, 0xba,
	0x5d, 0xea, 0xbb, 0x77, 0x58, 0x7f, 0x0d, 0x0c, 0xd7, 0xd9, 0xc3, 0x15, 0xe5, 0x98, 0x0f, 0x1d,
	0x27, 0x22, 0xea, 0xa7, 0x31, 0x5d, 0x1c, 0x33, 0xef, 0x3a, 0xa8, 0x8a, 0xe5, 0xf0, 0xc8, 0xd7,
	0x70, 0x16, 0xc4, 0x6d, 0x62, 0x60, 0x52, 0x5a, 0xd9, 0x90, 0xb3, 0xca, 0xf1, 0xed, 0xfc, 0x7d,
	0xe4, 0x98, 0x1e, 0xd2, 0x7d, 0x63, 0xea, 0x23, 0xd3, 0xfe, 0x92, 0x3f, 0x19, 0x7d, 0x78, 0x9a,
	0xff, 0x89, 0x71, 0xd2, 0xfc, 0x06, 0x9c, 0x00, 0x51, 0x17, 0x23, 0x52, 0xae, 0xf1, 0xb1, 0xd0,
	0x9f, 0x89, 0x0c, 0x5d, 0x1e, 0x77, 0xd9, 0x32, 0xba, 0x17, 0x5b, 0xfe, 0x25, 0xdc, 0x19, 0x49,
	0x3c, 0xe4, 0xbf, 0x5a, 0x91, 0x34, 0x17, 0x18, 0x3a, 0x23, 0x7b, 0x66, 0xc7, 0x15, 0x66, 0xec,
	0xbc, 0xf9, 0xb3, 0xd3, 0x98, 0x43, 0x7b, 0x31, 0xe6, 0x3b, 0x91, 0xae, 0xc0, 0xe4, 0xcc, 0xef,
	0x74, 0x60, 0x7e, 0xa3, 0xc7, 0x9c, 0x0f, 0x6f, 0xe7, 0xa7, 0xc8, 0x7d, 0xea, 0xb1, 0x5c, 0xfa,
	0x85, 0xa9, 0x2f, 0x32, 0xc0, 0x77, 0x8e, 0x3f, 0xd9, 0xdf, 0xa4, 0x7e, 0xac, 0x47, 0xbe, 0x38,
	0xd6, 0x87, 0x02, 0xb1, 0xfe, 0x6c, 0x20, 0xd6, 0x45, 0x9c, 0x3e, 0xb1, 0x9d, 0x7f, 0x94, 0x9c,
	0xde, 0x29, 0xd6, 0x7d, 0xa7, 0xe9, 0x23, 0xd3, 0xfe, 0x72, 0xd0, 0x03, 0x88, 0xee, 0xe6, 0x01,
	0xc4, 0xf6, 0xe2, 0xb3, 0xdf, 0x28, 0x00, 0x9e, 0xc7, 0xf4, 0x32, 0x6e, 0x38, 0x75, 0x44, 0xf1,
	0x1d, 0xf6, 0xd5, 0x25, 0x90, 0x90, 0x39, 0x9c, 0xb3, 0x14, 0xc5, 0xfc, 0xe4, 0x8e, 0x05, 0x48,
	0xb6, 0x99, 0x01, 0xbe, 0x3a, 0x58, 0xf3, 0xce, 0xdc, 0xf4, 0x6b, 0x61, 0x90, 0x3a, 0x8f, 0xe9,
	0x22, 0xda, 0xa8, 0xdb, 0xc8, 0x38, 0x67, 0x93, 0x06, 0xef, 0xc9, 0xee, 0xb0, 0x0e, 0xdf, 0xfa,
	0xb2, 0x3a, 0xe4, 0x47, 0x5b, 0x1f, 0x4d, 0x00, 0xef, 0x7c, 0xb6, 0x43, 0xa7, 0x2f, 0x53, 0x17,
	0x96, 0xc1, 0x78, 0xdf, 0xb2, 0xe0, 0x3a, 0xb6, 0xe5, 0x62, 0xf8, 0x30, 0x88, 0xf2, 0xe0, 0x73,
	0x65, 0x3f, 0xa1, 0xed, 0x28, 0xb2, 0x28, 0xa7, 0x12, 0xbb, 0x87, 0xad, 0xf7, 0xa8, 0xdb, 0x6c,
	0x79, 0xf8, 0x0e, 0x66, 0x2b, 0x72, 0xab, 0xc4, 0x66, 0x81, 0x77, 0xb8, 0x60, 0xb1, 0x51, 0xc5,
	0x98, 0x13, 0xdf, 0x4a, 0xa5, 0x1f, 0x59, 0xb8, 0x57, 0x4a, 0x6c, 0x78, 0xe3, 0xee, 0xf2, 0x9f,
	0xdf, 0xbf, 0x14, 0x7d, 0xb8, 0xb2, 0x68, 0x13, 0xca, 0x46, 0xcd, 0x0a, 0x69, 0x94, 0x1c, 0x81,
	0xcf, 0x3d, 0xb0, 0x4f, 0x07, 0x15, 0xd2, 0xf0, 0x38, 0x3c, 0x08, 0xe2, 0xeb, 0x88, 0x58, 0xa6,
	0x55, 0x95, 0xf3, 0x60, 0xfe, 0xd0, 0x76, 0x7e, 0xf8, 0x75, 0x25, 0x9c, 0x04, 0xdb, 0xf9, 0x91,
	0xd7, 0x95, 0x68, 0x5a, 0xbc, 0x1f, 0x1f, 0x0b, 0x3e, 0x00, 0xa2, 0x98, 0x10, 0xdb, 0xfb, 0x74,
	0xb9, 0x03, 0xbe, 0xc4, 0x49, 0xff, 0x54, 0x01, 0x87, 0x67, 0x71, 0x3f, 0xd9, 0x4f, 0x82, 0x21,
	0x03, 0x51, 0x24, 0x03, 0xed, 0x48, 0x8f, 0xe3, 0x96, 0xf8, 0xa7, 0x67, 0x9d, 0x23, 0x75, 0x88,
	0x19, 0xde, 0xa3, 0x98, 0x91, 0x5d, 0x88, 0xf9, 0xf7, 0x08, 0x38, 0xdc, 0x29, 0x9f, 0x10, 0x9a,
	0xc0, 0x0b, 0x60, 0xa4, 0xe2, 0x3d, 0x17, 0x2e, 0xeb, 0x68, 0x6e, 0xb2, 0xdb, 0x6f, 0xdd, 0xcf,
	0x8a, 0xfb, 0xe1, 0x55, 0x25, 0x9c, 0x54, 0xf4, 0x36, 0x31, 0xcc, 0x82, 0x83, 0xfe, 0xa6, 0xe4,
	0x20, 0x22, 0x47, 0x30, 0xd1, 0xe3, 0x41, 0x1f, 0xb4, 0xe8, 0x41, 0x58, 0xba, 0xee, 0x9c, 0x57,
	0xf7, 0x9c, 0xae, 0x67, 0xf8, 0x78, 0x3b, 0xeb, 0xcf, 0xb9, 0x70, 0x09, 0xc4, 0xf1, 0x4b, 0xa8,
	0xe1, 0xb4, 0x27, 0xfa, 0xe9, 0x6e, 0x65, 0xfa, 0x9a, 0x21, 0x53, 0x10, 0x54, 0x5c, 0x33, 0x66,
	0xc6, 0x43, 0xba, 0xcf, 0x28, 0xf5, 0x8e, 0x02, 0x62, 0x12, 0xde, 0xfd, 0xd9, 0x55, 0x09, 0x7e,
	0x76, 0xbd, 0xa9, 0x74, 0x7e, 0x76, 0x7d, 0x14, 0x0c, 0x9b, 0x96, 0xd3, 0xf4, 0x86, 0xd7, 0x3e,
	0x1f, 0xa5, 0xfa, 0xc4, 0x8d, 0x2e, 0x68, 0xe0, 0xe3, 0x20, 0x6a, 0x37, 0x29, 0xa3, 0x8e, 0xf4,
	0xa7, 0xee, 0x1b, 0x75, 0xba, 0x24, 0xea, 0xe3, 0x70, 0x71, 0xdb, 0xff, 0xbc, 0xc3, 0xa5, 0x19,
	0xfe, 0x23, 0x0e, 0xef, 0xef, 0xb2, 0xdd, 0x3a, 0xbc, 0x7f, 0xb8, 0x48, 0xa2, 0x13, 0x6f, 0x28,
	0x60, 0xac, 0xeb, 0x33, 0x2d, 0xbc, 0x0b, 0xa8, 0x17, 0x0b, 0xcf, 0x96, 0x16, 0xf5, 0x85, 0x2b,
	0xc5, 0xa5, 0xe2, 0xc2, 0x7c, 0x71, 0xfe, 0x7c, 0x69, 0x79, 0xfe, 0xe2, 0xfc, 0xc2, 0x33, 0xf3,
	0xc9, 0x10, 0x1c, 0x07, 0x47, 0x7a, 0xa0, 0x33, 0xcb, 0x4b, 0x97, 0x17, 0xe6, 0x92, 0x0a, 0x9c,
	0x04, 0x77, 0xf5, 0x00, 0x9f, 0x5e, 0x28, 0xce, 0x97, 0x96, 0x0a, 0xfa, 0x95, 0x82, 0x9e, 0x0c,
	0xc3, 0xbb, 0xc1, 0xd1, 0x1e, 0x8c, 0xb9, 0xb3, 0xf3, 0xc5, 0x73, 0x85, 0xa5, 0xcb, 0xc9, 0x48,
	0x6a, 0xe8, 0xc6, 0x4f, 0xb4, 0xd0, 0x89, 0xef, 0x2a, 0x20, 0x11, 0xf8, 0xe8, 0x0b, 0x55, 0x70,
	0x88, 0x11, 0x2d, 0x15, 0x66, 0x96, 0xf5, 0xe2, 0xe5, 0x67, 0x03, 0xd2, 0x1c, 0x06, 0x07, 0x3a,
	0x20, 0xf3, 0x0b, 0xf3, 0x85, 0xa4, 0x02, 0x27, 0xc0, 0x78, 0xc7, 0xb1, 0x5e, 0x38, 0x3b, 0xcb,
	0xee, 0xbc, 0x5c, 0x98, 0xb9, 0x5c, 0x98, 0x4d, 0x86, 0x7b, 0x10, 0xf8, 0xa2, 0x50, 0x2a, 0x5c,
	0x2a, 0xcc, 0x15, 0xe6, 0x7d, 0x41, 0x72, 0xbf, 0x1d, 0x03, 0x49, 0x51, 0x7b, 0x74, 0xff, 0x67,
	0x4d, 0xf8, 0x73, 0x05, 0x00, 0x56, 0xd0, 0x44, 0x79, 0x84, 0x3d, 0x1f, 0x59, 0x77, 0x1e, 0xad,
	0x52, 0x27, 0x77, 0x85, 0x2b, 0x0a, 0x63, 0xfa, 0xa9, 0x57, 0xff, 0xfa, 0xc9, 0x1b, 0xe1, 0x33,
	0xf0, 0x91, 0xac, 0x41, 0xb2, 0x81, 0x1e, 0xc2, 0xcd, 0x5e, 0xeb, 0x6a, 0x4b, 0x32, 0x9d, 0xfb,
	0xeb, 0x59, 0x51, 0x79, 0xe1, 0x8f, 0x15, 0x10, 0x3f, 0x8f, 0x85, 0xa0, 0x70, 0xaa, 0xfb, 0xee,
	0x9d, 0x06, 0xe0, 0xd4, 0x80, 0xc2, 0x9e, 0xbe, 0xc8, 0x05, 0x2b, 0xc0, 0x99, 0x5b, 0x15, 0x2c,
	0x7b, 0xcd, 0xeb, 0x62, 0xaf, 0xc3, 0x7f, 0x48, 0x6b, 0x8a, 0xae, 0x60, 0x80, 0x35, 0x3b, 0xe6,
	0x81, 0x01, 0xd6, 0xec, 0x6c, 0x33, 0xd2, 0xdf, 0x57, 0xb8, 0xd4, 0x37, 0x14, 0xf8, 0xf4, 0x6d,
	0x10, 0x3b, 0x2b, 0x9a, 0x90, 0xe7, 0x6e, 0xc9, 0x3b, 0x82, 0x16, 0xfe, 0x4a, 0x78, 0x47, 0xfc,
	0x7a, 0xf8, 0x85, 0xde, 0x09, 0x0e, 0x95, 0xa9, 0x01, 0xfd, 0x51, 0xfa, 0x79, 0xae, 0xe7, 0x33,
	0x70, 0xf9, 0xf6, 0xa9, 0x99, 0xbd, 0xe6, 0x0d, 0x18, 0xd7, 0xe1, 0x6b, 0x61, 0x90, 0x08, 0xf4,
	0xfb, 0x30, 0xdd, 0x47, 0xf0, 0xae, 0x61, 0x20, 0xf5, 0xff, 0x3b, 0x8a, 0xec, 0x61, 0xa6, 0x7f,
	0x2d, 0xdc, 0xf3, 0x96, 0x02, 0x7f, 0xa1, 0xdc, 0xba, 0xe0, 0x81, 0xbe, 0x3a, 0xd3, 0xab, 0x44,
	0x10, 0xea, 0x2b, 0xd4, 0x79, 0xdc, 0xfd, 0x9b, 0x64, 0x17, 0x78, 0xc5, 0x63, 0x49, 0x3d, 0xf5,
	0xdf, 0x0a, 0x83, 0xe4, 0x79, 0x4c, 0x97, 0x9d, 0xba, 0x69, 0xad, 0x7a, 0xdd, 0xd1, 0x89, 0x3e,
	0x36, 0xd9, 0x61, 0xc8, 0x48, 0xdd, 0xbb, 0xab, 0x4e, 0x23, 0xfd, 0x27, 0x61, 0x9f, 0xdf, 0x2b,
	0xf0, 0xbd, 0xaf, 0x82, 0x7d, 0xfc, 0x32, 0xee, 0x66, 0x9b, 0xdc, 0x34, 0x59, 0x43, 0xda, 0xe6,
	0x97, 0x61, 0x3e, 0x2f, 0xce, 0xda, 0xeb, 0xd6, 0x1d, 0x36, 0xd9, 0x4d, 0x61, 0xb2, 0x3f, 0x28,
	0xf0, 0x77, 0x5f, 0x31, 0x93, 0x19, 0xd2, 0x38, 0x3b, 0x19, 0xcd, 0x6b, 0xca, 0x6e, 0xa3, 0xd1,
	0x24, 0xcb, 0xff, 0x06, 0xa3, 0x61, 0xa1, 0x4a, 0xfe, 0x67, 0xca, 0xcd, 0x4d, 0x4d, 0xf9, 0x60,
	0x53, 0x53, 0x3e, 0xdc, 0xd4, 0x42, 0x1f, 0x6f, 0x6a, 0xa1, 0x4f, 0x37, 0xb5, 0xd0, 0x67, 0x9b,
	0x5a, 0xe8, 0xf3, 0x4d, 0x4d, 0x79, 0xa5, 0xa5, 0x29, 0x37, 0x5a, 0x5a, 0xe8, 0xcd, 0x96, 0xa6,
	0xbc, 0xdd, 0xd2, 0x42, 0xef, 0xb6, 0xb4, 0xd0, 0xfb, 0x2d, 0x2d, 0x74, 0xb3, 0xa5, 0x29, 0x1f,
	0xb4, 0x34, 0xe5, 0xc3, 0x96, 0x16, 0xfa, 0xb8, 0xa5, 0x29, 0x9f, 0xb6, 0xb4, 0xd0, 0x67, 0x2d,
	0x4d, 0xf9, 0xbc, 0xa5, 0x85, 0x5e, 0xd9, 0xd2, 0x42, 0x37, 0xb6, 0x34, 0xe5, 0x07, 0x5b, 0x5a,
	0xe8, 0x87, 0x5b, 0x9a, 0xf2, 0xa3, 0x2d, 0x2d, 0xf4, 0xe6, 0x96, 0x16, 0x7a, 0x7b, 0x4b, 0x53,
	0xde, 0xdd, 0xd2, 0x94, 0xf7, 0xb7, 0x34, 0xe5, 0xb9, 0x6c, 0xd5, 0xce, 0xd0, 0x1a, 0xa6, 0x35,
	0x36, 0x70, 0x65, 0x2c, 0x4c, 0xd7, 0x6d, 0xb2, 0x9a, 0xed, 0xfc, 0xf7, 0x9d, 0xb5, 0x53, 0x59,
	0x67, 0xb5, 0x9a, 0xa5, 0xd4, 0x72, 0x56, 0x56, 0xa2, 0x7c, 0xb8, 0x3b, 0xf5, 0xef, 0x00, 0x00,
	0x00, 0xff, 0xff, 0xf1, 0x53, 0x12, 0x00, 0x53, 0x25, 0x00, 0x00,
}

func (x KeyProvisioning) String() string {
	s, ok := KeyProvisioning_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x KeySecurity) String() string {
	s, ok := KeySecurity_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *EndDeviceBrand) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EndDeviceBrand)
	if !ok {
		that2, ok := that.(EndDeviceBrand)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BrandId != that1.BrandId {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.PrivateEnterpriseNumber != that1.PrivateEnterpriseNumber {
		return false
	}
	if len(this.OrganizationUniqueIdentifiers) != len(that1.OrganizationUniqueIdentifiers) {
		return false
	}
	for i := range this.OrganizationUniqueIdentifiers {
		if this.OrganizationUniqueIdentifiers[i] != that1.OrganizationUniqueIdentifiers[i] {
			return false
		}
	}
	if this.LoraAllianceVendorId != that1.LoraAllianceVendorId {
		return false
	}
	if this.Website != that1.Website {
		return false
	}
	if this.Email != that1.Email {
		return false
	}
	if this.Logo != that1.Logo {
		return false
	}
	return true
}
func (this *EndDeviceModel) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EndDeviceModel)
	if !ok {
		that2, ok := that.(EndDeviceModel)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BrandId != that1.BrandId {
		return false
	}
	if this.ModelId != that1.ModelId {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if len(this.HardwareVersions) != len(that1.HardwareVersions) {
		return false
	}
	for i := range this.HardwareVersions {
		if !this.HardwareVersions[i].Equal(that1.HardwareVersions[i]) {
			return false
		}
	}
	if len(this.FirmwareVersions) != len(that1.FirmwareVersions) {
		return false
	}
	for i := range this.FirmwareVersions {
		if !this.FirmwareVersions[i].Equal(that1.FirmwareVersions[i]) {
			return false
		}
	}
	if len(this.Sensors) != len(that1.Sensors) {
		return false
	}
	for i := range this.Sensors {
		if this.Sensors[i] != that1.Sensors[i] {
			return false
		}
	}
	if !this.Dimensions.Equal(that1.Dimensions) {
		return false
	}
	if !this.Weight.Equal(that1.Weight) {
		return false
	}
	if !this.Battery.Equal(that1.Battery) {
		return false
	}
	if !this.OperatingConditions.Equal(that1.OperatingConditions) {
		return false
	}
	if this.IpCode != that1.IpCode {
		return false
	}
	if len(this.KeyProvisioning) != len(that1.KeyProvisioning) {
		return false
	}
	for i := range this.KeyProvisioning {
		if this.KeyProvisioning[i] != that1.KeyProvisioning[i] {
			return false
		}
	}
	if this.KeySecurity != that1.KeySecurity {
		return false
	}
	if !this.Photos.Equal(that1.Photos) {
		return false
	}
	if !this.Videos.Equal(that1.Videos) {
		return false
	}
	if this.ProductUrl != that1.ProductUrl {
		return false
	}
	if this.DatasheetUrl != that1.DatasheetUrl {
		return false
	}
	if len(this.Resellers) != len(that1.Resellers) {
		return false
	}
	for i := range this.Resellers {
		if !this.Resellers[i].Equal(that1.Resellers[i]) {
			return false
		}
	}
	if !this.Compliances.Equal(that1.Compliances) {
		return false
	}
	if len(this.AdditionalRadios) != len(that1.AdditionalRadios) {
		return false
	}
	for i := range this.AdditionalRadios {
		if this.AdditionalRadios[i] != that1.AdditionalRadios[i] {
			return false
		}
	}
	return true
}
func (this *EndDeviceModel_HardwareVersion) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EndDeviceModel_HardwareVersion)
	if !ok {
		that2, ok := that.(EndDeviceModel_HardwareVersion)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	if this.Numeric != that1.Numeric {
		return false
	}
	if this.PartNumber != that1.PartNumber {
		return false
	}
	return true
}
func (this *EndDeviceModel_FirmwareVersion) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EndDeviceModel_FirmwareVersion)
	if !ok {
		that2, ok := that.(EndDeviceModel_FirmwareVersion)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	if this.Numeric != that1.Numeric {
		return false
	}
	if len(this.SupportedHardwareVersions) != len(that1.SupportedHardwareVersions) {
		return false
	}
	for i := range this.SupportedHardwareVersions {
		if this.SupportedHardwareVersions[i] != that1.SupportedHardwareVersions[i] {
			return false
		}
	}
	if len(this.Profiles) != len(that1.Profiles) {
		return false
	}
	for i := range this.Profiles {
		if !this.Profiles[i].Equal(that1.Profiles[i]) {
			return false
		}
	}
	return true
}
func (this *EndDeviceModel_FirmwareVersion_Profile) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EndDeviceModel_FirmwareVersion_Profile)
	if !ok {
		that2, ok := that.(EndDeviceModel_FirmwareVersion_Profile)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.VendorId != that1.VendorId {
		return false
	}
	if this.ProfileId != that1.ProfileId {
		return false
	}
	if this.LorawanCertified != that1.LorawanCertified {
		return false
	}
	if this.CodecId != that1.CodecId {
		return false
	}
	return true
}
func (this *EndDeviceModel_Dimensions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EndDeviceModel_Dimensions)
	if !ok {
		that2, ok := that.(EndDeviceModel_Dimensions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Width.Equal(that1.Width) {
		return false
	}
	if !this.Height.Equal(that1.Height) {
		return false
	}
	if !this.Diameter.Equal(that1.Diameter) {
		return false
	}
	if !this.Length.Equal(that1.Length) {
		return false
	}
	return true
}
func (this *EndDeviceModel_Battery) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EndDeviceModel_Battery)
	if !ok {
		that2, ok := that.(EndDeviceModel_Battery)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Replaceable.Equal(that1.Replaceable) {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	return true
}
func (this *EndDeviceModel_OperatingConditions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EndDeviceModel_OperatingConditions)
	if !ok {
		that2, ok := that.(EndDeviceModel_OperatingConditions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Temperature.Equal(that1.Temperature) {
		return false
	}
	if !this.RelativeHumidity.Equal(that1.RelativeHumidity) {
		return false
	}
	return true
}
func (this *EndDeviceModel_OperatingConditions_Limits) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EndDeviceModel_OperatingConditions_Limits)
	if !ok {
		that2, ok := that.(EndDeviceModel_OperatingConditions_Limits)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Min.Equal(that1.Min) {
		return false
	}
	if !this.Max.Equal(that1.Max) {
		return false
	}
	return true
}
func (this *EndDeviceModel_Photos) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EndDeviceModel_Photos)
	if !ok {
		that2, ok := that.(EndDeviceModel_Photos)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Main != that1.Main {
		return false
	}
	if len(this.Other) != len(that1.Other) {
		return false
	}
	for i := range this.Other {
		if this.Other[i] != that1.Other[i] {
			return false
		}
	}
	return true
}
func (this *EndDeviceModel_Videos) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EndDeviceModel_Videos)
	if !ok {
		that2, ok := that.(EndDeviceModel_Videos)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Main != that1.Main {
		return false
	}
	if len(this.Other) != len(that1.Other) {
		return false
	}
	for i := range this.Other {
		if this.Other[i] != that1.Other[i] {
			return false
		}
	}
	return true
}
func (this *EndDeviceModel_Reseller) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EndDeviceModel_Reseller)
	if !ok {
		that2, ok := that.(EndDeviceModel_Reseller)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.Region) != len(that1.Region) {
		return false
	}
	for i := range this.Region {
		if this.Region[i] != that1.Region[i] {
			return false
		}
	}
	if this.Url != that1.Url {
		return false
	}
	return true
}
func (this *EndDeviceModel_Compliances) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EndDeviceModel_Compliances)
	if !ok {
		that2, ok := that.(EndDeviceModel_Compliances)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Safety) != len(that1.Safety) {
		return false
	}
	for i := range this.Safety {
		if !this.Safety[i].Equal(that1.Safety[i]) {
			return false
		}
	}
	if len(this.RadioEquipment) != len(that1.RadioEquipment) {
		return false
	}
	for i := range this.RadioEquipment {
		if !this.RadioEquipment[i].Equal(that1.RadioEquipment[i]) {
			return false
		}
	}
	return true
}
func (this *EndDeviceModel_Compliances_Compliance) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EndDeviceModel_Compliances_Compliance)
	if !ok {
		that2, ok := that.(EndDeviceModel_Compliances_Compliance)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Body != that1.Body {
		return false
	}
	if this.Norm != that1.Norm {
		return false
	}
	if this.Standard != that1.Standard {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	return true
}
func (this *GetEndDeviceBrandRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetEndDeviceBrandRequest)
	if !ok {
		that2, ok := that.(GetEndDeviceBrandRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApplicationIds.Equal(&that1.ApplicationIds) {
		return false
	}
	if this.BrandID != that1.BrandID {
		return false
	}
	if !this.FieldMask.Equal(that1.FieldMask) {
		return false
	}
	return true
}
func (this *ListEndDeviceBrandsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListEndDeviceBrandsRequest)
	if !ok {
		that2, ok := that.(ListEndDeviceBrandsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApplicationIds.Equal(&that1.ApplicationIds) {
		return false
	}
	if this.Limit != that1.Limit {
		return false
	}
	if this.Page != that1.Page {
		return false
	}
	if this.OrderBy != that1.OrderBy {
		return false
	}
	if this.Search != that1.Search {
		return false
	}
	if !this.FieldMask.Equal(that1.FieldMask) {
		return false
	}
	return true
}
func (this *GetEndDeviceModelRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetEndDeviceModelRequest)
	if !ok {
		that2, ok := that.(GetEndDeviceModelRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApplicationIds.Equal(&that1.ApplicationIds) {
		return false
	}
	if this.BrandID != that1.BrandID {
		return false
	}
	if this.ModelID != that1.ModelID {
		return false
	}
	if !this.FieldMask.Equal(that1.FieldMask) {
		return false
	}
	return true
}
func (this *ListEndDeviceModelsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListEndDeviceModelsRequest)
	if !ok {
		that2, ok := that.(ListEndDeviceModelsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApplicationIds.Equal(&that1.ApplicationIds) {
		return false
	}
	if this.BrandID != that1.BrandID {
		return false
	}
	if this.Limit != that1.Limit {
		return false
	}
	if this.Page != that1.Page {
		return false
	}
	if this.OrderBy != that1.OrderBy {
		return false
	}
	if this.Search != that1.Search {
		return false
	}
	if !this.FieldMask.Equal(that1.FieldMask) {
		return false
	}
	return true
}
func (this *GetTemplateRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetTemplateRequest)
	if !ok {
		that2, ok := that.(GetTemplateRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApplicationIds.Equal(&that1.ApplicationIds) {
		return false
	}
	if !this.VersionIds.Equal(that1.VersionIds) {
		return false
	}
	return true
}
func (this *GetPayloadFormatterRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetPayloadFormatterRequest)
	if !ok {
		that2, ok := that.(GetPayloadFormatterRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApplicationIds.Equal(&that1.ApplicationIds) {
		return false
	}
	if !this.VersionIDs.Equal(that1.VersionIDs) {
		return false
	}
	if !this.FieldMask.Equal(that1.FieldMask) {
		return false
	}
	return true
}
func (this *ListEndDeviceBrandsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListEndDeviceBrandsResponse)
	if !ok {
		that2, ok := that.(ListEndDeviceBrandsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Brands) != len(that1.Brands) {
		return false
	}
	for i := range this.Brands {
		if !this.Brands[i].Equal(that1.Brands[i]) {
			return false
		}
	}
	return true
}
func (this *ListEndDeviceModelsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListEndDeviceModelsResponse)
	if !ok {
		that2, ok := that.(ListEndDeviceModelsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Models) != len(that1.Models) {
		return false
	}
	for i := range this.Models {
		if !this.Models[i].Equal(that1.Models[i]) {
			return false
		}
	}
	return true
}
func (this *EncodedMessagePayload) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EncodedMessagePayload)
	if !ok {
		that2, ok := that.(EncodedMessagePayload)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.FPort != that1.FPort {
		return false
	}
	if !bytes.Equal(this.FrmPayload, that1.FrmPayload) {
		return false
	}
	if len(this.Warnings) != len(that1.Warnings) {
		return false
	}
	for i := range this.Warnings {
		if this.Warnings[i] != that1.Warnings[i] {
			return false
		}
	}
	if len(this.Errors) != len(that1.Errors) {
		return false
	}
	for i := range this.Errors {
		if this.Errors[i] != that1.Errors[i] {
			return false
		}
	}
	return true
}
func (this *DecodedMessagePayload) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DecodedMessagePayload)
	if !ok {
		that2, ok := that.(DecodedMessagePayload)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Data.Equal(that1.Data) {
		return false
	}
	if len(this.Warnings) != len(that1.Warnings) {
		return false
	}
	for i := range this.Warnings {
		if this.Warnings[i] != that1.Warnings[i] {
			return false
		}
	}
	if len(this.Errors) != len(that1.Errors) {
		return false
	}
	for i := range this.Errors {
		if this.Errors[i] != that1.Errors[i] {
			return false
		}
	}
	return true
}
func (this *MessagePayloadDecoder) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MessagePayloadDecoder)
	if !ok {
		that2, ok := that.(MessagePayloadDecoder)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Formatter != that1.Formatter {
		return false
	}
	if this.FormatterParameter != that1.FormatterParameter {
		return false
	}
	if this.CodecID != that1.CodecID {
		return false
	}
	if len(this.Examples) != len(that1.Examples) {
		return false
	}
	for i := range this.Examples {
		if !this.Examples[i].Equal(that1.Examples[i]) {
			return false
		}
	}
	return true
}
func (this *MessagePayloadDecoder_Example) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MessagePayloadDecoder_Example)
	if !ok {
		that2, ok := that.(MessagePayloadDecoder_Example)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if !this.Input.Equal(that1.Input) {
		return false
	}
	if !this.Output.Equal(that1.Output) {
		return false
	}
	return true
}
func (this *MessagePayloadEncoder) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MessagePayloadEncoder)
	if !ok {
		that2, ok := that.(MessagePayloadEncoder)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Formatter != that1.Formatter {
		return false
	}
	if this.FormatterParameter != that1.FormatterParameter {
		return false
	}
	if this.CodecID != that1.CodecID {
		return false
	}
	if len(this.Examples) != len(that1.Examples) {
		return false
	}
	for i := range this.Examples {
		if !this.Examples[i].Equal(that1.Examples[i]) {
			return false
		}
	}
	return true
}
func (this *MessagePayloadEncoder_Example) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MessagePayloadEncoder_Example)
	if !ok {
		that2, ok := that.(MessagePayloadEncoder_Example)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if !this.Input.Equal(that1.Input) {
		return false
	}
	if !this.Output.Equal(that1.Output) {
		return false
	}
	return true
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DeviceRepositoryClient is the client API for DeviceRepository service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DeviceRepositoryClient interface {
	ListBrands(ctx context.Context, in *ListEndDeviceBrandsRequest, opts ...grpc.CallOption) (*ListEndDeviceBrandsResponse, error)
	GetBrand(ctx context.Context, in *GetEndDeviceBrandRequest, opts ...grpc.CallOption) (*EndDeviceBrand, error)
	ListModels(ctx context.Context, in *ListEndDeviceModelsRequest, opts ...grpc.CallOption) (*ListEndDeviceModelsResponse, error)
	GetModel(ctx context.Context, in *GetEndDeviceModelRequest, opts ...grpc.CallOption) (*EndDeviceModel, error)
	GetTemplate(ctx context.Context, in *GetTemplateRequest, opts ...grpc.CallOption) (*EndDeviceTemplate, error)
	GetUplinkDecoder(ctx context.Context, in *GetPayloadFormatterRequest, opts ...grpc.CallOption) (*MessagePayloadDecoder, error)
	GetDownlinkDecoder(ctx context.Context, in *GetPayloadFormatterRequest, opts ...grpc.CallOption) (*MessagePayloadDecoder, error)
	GetDownlinkEncoder(ctx context.Context, in *GetPayloadFormatterRequest, opts ...grpc.CallOption) (*MessagePayloadEncoder, error)
}

type deviceRepositoryClient struct {
	cc *grpc.ClientConn
}

func NewDeviceRepositoryClient(cc *grpc.ClientConn) DeviceRepositoryClient {
	return &deviceRepositoryClient{cc}
}

func (c *deviceRepositoryClient) ListBrands(ctx context.Context, in *ListEndDeviceBrandsRequest, opts ...grpc.CallOption) (*ListEndDeviceBrandsResponse, error) {
	out := new(ListEndDeviceBrandsResponse)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.DeviceRepository/ListBrands", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceRepositoryClient) GetBrand(ctx context.Context, in *GetEndDeviceBrandRequest, opts ...grpc.CallOption) (*EndDeviceBrand, error) {
	out := new(EndDeviceBrand)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.DeviceRepository/GetBrand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceRepositoryClient) ListModels(ctx context.Context, in *ListEndDeviceModelsRequest, opts ...grpc.CallOption) (*ListEndDeviceModelsResponse, error) {
	out := new(ListEndDeviceModelsResponse)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.DeviceRepository/ListModels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceRepositoryClient) GetModel(ctx context.Context, in *GetEndDeviceModelRequest, opts ...grpc.CallOption) (*EndDeviceModel, error) {
	out := new(EndDeviceModel)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.DeviceRepository/GetModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceRepositoryClient) GetTemplate(ctx context.Context, in *GetTemplateRequest, opts ...grpc.CallOption) (*EndDeviceTemplate, error) {
	out := new(EndDeviceTemplate)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.DeviceRepository/GetTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceRepositoryClient) GetUplinkDecoder(ctx context.Context, in *GetPayloadFormatterRequest, opts ...grpc.CallOption) (*MessagePayloadDecoder, error) {
	out := new(MessagePayloadDecoder)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.DeviceRepository/GetUplinkDecoder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceRepositoryClient) GetDownlinkDecoder(ctx context.Context, in *GetPayloadFormatterRequest, opts ...grpc.CallOption) (*MessagePayloadDecoder, error) {
	out := new(MessagePayloadDecoder)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.DeviceRepository/GetDownlinkDecoder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceRepositoryClient) GetDownlinkEncoder(ctx context.Context, in *GetPayloadFormatterRequest, opts ...grpc.CallOption) (*MessagePayloadEncoder, error) {
	out := new(MessagePayloadEncoder)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.DeviceRepository/GetDownlinkEncoder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeviceRepositoryServer is the server API for DeviceRepository service.
type DeviceRepositoryServer interface {
	ListBrands(context.Context, *ListEndDeviceBrandsRequest) (*ListEndDeviceBrandsResponse, error)
	GetBrand(context.Context, *GetEndDeviceBrandRequest) (*EndDeviceBrand, error)
	ListModels(context.Context, *ListEndDeviceModelsRequest) (*ListEndDeviceModelsResponse, error)
	GetModel(context.Context, *GetEndDeviceModelRequest) (*EndDeviceModel, error)
	GetTemplate(context.Context, *GetTemplateRequest) (*EndDeviceTemplate, error)
	GetUplinkDecoder(context.Context, *GetPayloadFormatterRequest) (*MessagePayloadDecoder, error)
	GetDownlinkDecoder(context.Context, *GetPayloadFormatterRequest) (*MessagePayloadDecoder, error)
	GetDownlinkEncoder(context.Context, *GetPayloadFormatterRequest) (*MessagePayloadEncoder, error)
}

// UnimplementedDeviceRepositoryServer can be embedded to have forward compatible implementations.
type UnimplementedDeviceRepositoryServer struct {
}

func (*UnimplementedDeviceRepositoryServer) ListBrands(ctx context.Context, req *ListEndDeviceBrandsRequest) (*ListEndDeviceBrandsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBrands not implemented")
}
func (*UnimplementedDeviceRepositoryServer) GetBrand(ctx context.Context, req *GetEndDeviceBrandRequest) (*EndDeviceBrand, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBrand not implemented")
}
func (*UnimplementedDeviceRepositoryServer) ListModels(ctx context.Context, req *ListEndDeviceModelsRequest) (*ListEndDeviceModelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListModels not implemented")
}
func (*UnimplementedDeviceRepositoryServer) GetModel(ctx context.Context, req *GetEndDeviceModelRequest) (*EndDeviceModel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModel not implemented")
}
func (*UnimplementedDeviceRepositoryServer) GetTemplate(ctx context.Context, req *GetTemplateRequest) (*EndDeviceTemplate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTemplate not implemented")
}
func (*UnimplementedDeviceRepositoryServer) GetUplinkDecoder(ctx context.Context, req *GetPayloadFormatterRequest) (*MessagePayloadDecoder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUplinkDecoder not implemented")
}
func (*UnimplementedDeviceRepositoryServer) GetDownlinkDecoder(ctx context.Context, req *GetPayloadFormatterRequest) (*MessagePayloadDecoder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDownlinkDecoder not implemented")
}
func (*UnimplementedDeviceRepositoryServer) GetDownlinkEncoder(ctx context.Context, req *GetPayloadFormatterRequest) (*MessagePayloadEncoder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDownlinkEncoder not implemented")
}

func RegisterDeviceRepositoryServer(s *grpc.Server, srv DeviceRepositoryServer) {
	s.RegisterService(&_DeviceRepository_serviceDesc, srv)
}

func _DeviceRepository_ListBrands_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEndDeviceBrandsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceRepositoryServer).ListBrands(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.DeviceRepository/ListBrands",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceRepositoryServer).ListBrands(ctx, req.(*ListEndDeviceBrandsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceRepository_GetBrand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEndDeviceBrandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceRepositoryServer).GetBrand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.DeviceRepository/GetBrand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceRepositoryServer).GetBrand(ctx, req.(*GetEndDeviceBrandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceRepository_ListModels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEndDeviceModelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceRepositoryServer).ListModels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.DeviceRepository/ListModels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceRepositoryServer).ListModels(ctx, req.(*ListEndDeviceModelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceRepository_GetModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEndDeviceModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceRepositoryServer).GetModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.DeviceRepository/GetModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceRepositoryServer).GetModel(ctx, req.(*GetEndDeviceModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceRepository_GetTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceRepositoryServer).GetTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.DeviceRepository/GetTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceRepositoryServer).GetTemplate(ctx, req.(*GetTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceRepository_GetUplinkDecoder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPayloadFormatterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceRepositoryServer).GetUplinkDecoder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.DeviceRepository/GetUplinkDecoder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceRepositoryServer).GetUplinkDecoder(ctx, req.(*GetPayloadFormatterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceRepository_GetDownlinkDecoder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPayloadFormatterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceRepositoryServer).GetDownlinkDecoder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.DeviceRepository/GetDownlinkDecoder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceRepositoryServer).GetDownlinkDecoder(ctx, req.(*GetPayloadFormatterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceRepository_GetDownlinkEncoder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPayloadFormatterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceRepositoryServer).GetDownlinkEncoder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.DeviceRepository/GetDownlinkEncoder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceRepositoryServer).GetDownlinkEncoder(ctx, req.(*GetPayloadFormatterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DeviceRepository_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.lorawan.v3.DeviceRepository",
	HandlerType: (*DeviceRepositoryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListBrands",
			Handler:    _DeviceRepository_ListBrands_Handler,
		},
		{
			MethodName: "GetBrand",
			Handler:    _DeviceRepository_GetBrand_Handler,
		},
		{
			MethodName: "ListModels",
			Handler:    _DeviceRepository_ListModels_Handler,
		},
		{
			MethodName: "GetModel",
			Handler:    _DeviceRepository_GetModel_Handler,
		},
		{
			MethodName: "GetTemplate",
			Handler:    _DeviceRepository_GetTemplate_Handler,
		},
		{
			MethodName: "GetUplinkDecoder",
			Handler:    _DeviceRepository_GetUplinkDecoder_Handler,
		},
		{
			MethodName: "GetDownlinkDecoder",
			Handler:    _DeviceRepository_GetDownlinkDecoder_Handler,
		},
		{
			MethodName: "GetDownlinkEncoder",
			Handler:    _DeviceRepository_GetDownlinkEncoder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lorawan-stack/api/devicerepository.proto",
}

func (m *EndDeviceBrand) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndDeviceBrand) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EndDeviceBrand) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Logo) > 0 {
		i -= len(m.Logo)
		copy(dAtA[i:], m.Logo)
		i = encodeVarintDevicerepository(dAtA, i, uint64(len(m.Logo)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Email) > 0 {
		i -= len(m.Email)
		copy(dAtA[i:], m.Email)
		i = encodeVarintDevicerepository(dAtA, i, uint64(len(m.Email)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Website) > 0 {
		i -= len(m.Website)
		copy(dAtA[i:], m.Website)
		i = encodeVarintDevicerepository(dAtA, i, uint64(len(m.Website)))
		i--
		dAtA[i] = 0x32
	}
	if m.LoraAllianceVendorId != 0 {
		i = encodeVarintDevicerepository(dAtA, i, uint64(m.LoraAllianceVendorId))
		i--
		dAtA[i] = 0x28
	}
	if len(m.OrganizationUniqueIdentifiers) > 0 {
		for iNdEx := len(m.OrganizationUniqueIdentifiers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.OrganizationUniqueIdentifiers[iNdEx])
			copy(dAtA[i:], m.OrganizationUniqueIdentifiers[iNdEx])
			i = encodeVarintDevicerepository(dAtA, i, uint64(len(m.OrganizationUniqueIdentifiers[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.PrivateEnterpriseNumber != 0 {
		i = encodeVarintDevicerepository(dAtA, i, uint64(m.PrivateEnterpriseNumber))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintDevicerepository(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.BrandId) > 0 {
		i -= len(m.BrandId)
		copy(dAtA[i:], m.BrandId)
		i = encodeVarintDevicerepository(dAtA, i, uint64(len(m.BrandId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EndDeviceModel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndDeviceModel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EndDeviceModel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AdditionalRadios) > 0 {
		for iNdEx := len(m.AdditionalRadios) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AdditionalRadios[iNdEx])
			copy(dAtA[i:], m.AdditionalRadios[iNdEx])
			i = encodeVarintDevicerepository(dAtA, i, uint64(len(m.AdditionalRadios[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xaa
		}
	}
	if m.Compliances != nil {
		{
			size, err := m.Compliances.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDevicerepository(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if len(m.Resellers) > 0 {
		for iNdEx := len(m.Resellers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Resellers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDevicerepository(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x9a
		}
	}
	if len(m.DatasheetUrl) > 0 {
		i -= len(m.DatasheetUrl)
		copy(dAtA[i:], m.DatasheetUrl)
		i = encodeVarintDevicerepository(dAtA, i, uint64(len(m.DatasheetUrl)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if len(m.ProductUrl) > 0 {
		i -= len(m.ProductUrl)
		copy(dAtA[i:], m.ProductUrl)
		i = encodeVarintDevicerepository(dAtA, i, uint64(len(m.ProductUrl)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if m.Videos != nil {
		{
			size, err := m.Videos.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDevicerepository(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.Photos != nil {
		{
			size, err := m.Photos.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDevicerepository(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	if m.KeySecurity != 0 {
		i = encodeVarintDevicerepository(dAtA, i, uint64(m.KeySecurity))
		i--
		dAtA[i] = 0x70
	}
	if len(m.KeyProvisioning) > 0 {
		dAtA5 := make([]byte, len(m.KeyProvisioning)*10)
		var j4 int
		for _, num := range m.KeyProvisioning {
			for num >= 1<<7 {
				dAtA5[j4] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j4++
			}
			dAtA5[j4] = uint8(num)
			j4++
		}
		i -= j4
		copy(dAtA[i:], dAtA5[:j4])
		i = encodeVarintDevicerepository(dAtA, i, uint64(j4))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.IpCode) > 0 {
		i -= len(m.IpCode)
		copy(dAtA[i:], m.IpCode)
		i = encodeVarintDevicerepository(dAtA, i, uint64(len(m.IpCode)))
		i--
		dAtA[i] = 0x62
	}
	if m.OperatingConditions != nil {
		{
			size, err := m.OperatingConditions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDevicerepository(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.Battery != nil {
		{
			size, err := m.Battery.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDevicerepository(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.Weight != nil {
		{
			size, err := m.Weight.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDevicerepository(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.Dimensions != nil {
		{
			size, err := m.Dimensions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDevicerepository(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if len(m.Sensors) > 0 {
		for iNdEx := len(m.Sensors) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Sensors[iNdEx])
			copy(dAtA[i:], m.Sensors[iNdEx])
			i = encodeVarintDevicerepository(dAtA, i, uint64(len(m.Sensors[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.FirmwareVersions) > 0 {
		for iNdEx := len(m.FirmwareVersions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FirmwareVersions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDevicerepository(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.HardwareVersions) > 0 {
		for iNdEx := len(m.HardwareVersions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.HardwareVersions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDevicerepository(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintDevicerepository(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintDevicerepository(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ModelId) > 0 {
		i -= len(m.ModelId)
		copy(dAtA[i:], m.ModelId)
		i = encodeVarintDevicerepository(dAtA, i, uint64(len(m.ModelId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.BrandId) > 0 {
		i -= len(m.BrandId)
		copy(dAtA[i:], m.BrandId)
		i = encodeVarintDevicerepository(dAtA, i, uint64(len(m.BrandId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EndDeviceModel_HardwareVersion) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndDeviceModel_HardwareVersion) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EndDeviceModel_HardwareVersion) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PartNumber) > 0 {
		i -= len(m.PartNumber)
		copy(dAtA[i:], m.PartNumber)
		i = encodeVarintDevicerepository(dAtA, i, uint64(len(m.PartNumber)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Numeric != 0 {
		i = encodeVarintDevicerepository(dAtA, i, uint64(m.Numeric))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintDevicerepository(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EndDeviceModel_FirmwareVersion) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndDeviceModel_FirmwareVersion) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EndDeviceModel_FirmwareVersion) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Profiles) > 0 {
		for k := range m.Profiles {
			v := m.Profiles[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintDevicerepository(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintDevicerepository(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintDevicerepository(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.SupportedHardwareVersions) > 0 {
		for iNdEx := len(m.SupportedHardwareVersions) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SupportedHardwareVersions[iNdEx])
			copy(dAtA[i:], m.SupportedHardwareVersions[iNdEx])
			i = encodeVarintDevicerepository(dAtA, i, uint64(len(m.SupportedHardwareVersions[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Numeric != 0 {
		i = encodeVarintDevicerepository(dAtA, i, uint64(m.Numeric))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintDevicerepository(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EndDeviceModel_FirmwareVersion_Profile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndDeviceModel_FirmwareVersion_Profile) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EndDeviceModel_FirmwareVersion_Profile) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VendorId) > 0 {
		i -= len(m.VendorId)
		copy(dAtA[i:], m.VendorId)
		i = encodeVarintDevicerepository(dAtA, i, uint64(len(m.VendorId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.CodecId) > 0 {
		i -= len(m.CodecId)
		copy(dAtA[i:], m.CodecId)
		i = encodeVarintDevicerepository(dAtA, i, uint64(len(m.CodecId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.LorawanCertified {
		i--
		if m.LorawanCertified {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.ProfileId) > 0 {
		i -= len(m.ProfileId)
		copy(dAtA[i:], m.ProfileId)
		i = encodeVarintDevicerepository(dAtA, i, uint64(len(m.ProfileId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EndDeviceModel_Dimensions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndDeviceModel_Dimensions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EndDeviceModel_Dimensions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Length != nil {
		{
			size, err := m.Length.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDevicerepository(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Diameter != nil {
		{
			size, err := m.Diameter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDevicerepository(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Height != nil {
		{
			size, err := m.Height.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDevicerepository(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Width != nil {
		{
			size, err := m.Width.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDevicerepository(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EndDeviceModel_Battery) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndDeviceModel_Battery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EndDeviceModel_Battery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintDevicerepository(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x12
	}
	if m.Replaceable != nil {
		{
			size, err := m.Replaceable.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDevicerepository(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EndDeviceModel_OperatingConditions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndDeviceModel_OperatingConditions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EndDeviceModel_OperatingConditions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RelativeHumidity != nil {
		{
			size, err := m.RelativeHumidity.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDevicerepository(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Temperature != nil {
		{
			size, err := m.Temperature.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDevicerepository(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EndDeviceModel_OperatingConditions_Limits) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndDeviceModel_OperatingConditions_Limits) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EndDeviceModel_OperatingConditions_Limits) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Max != nil {
		{
			size, err := m.Max.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDevicerepository(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Min != nil {
		{
			size, err := m.Min.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDevicerepository(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EndDeviceModel_Photos) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndDeviceModel_Photos) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EndDeviceModel_Photos) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Other) > 0 {
		for iNdEx := len(m.Other) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Other[iNdEx])
			copy(dAtA[i:], m.Other[iNdEx])
			i = encodeVarintDevicerepository(dAtA, i, uint64(len(m.Other[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Main) > 0 {
		i -= len(m.Main)
		copy(dAtA[i:], m.Main)
		i = encodeVarintDevicerepository(dAtA, i, uint64(len(m.Main)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EndDeviceModel_Videos) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndDeviceModel_Videos) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EndDeviceModel_Videos) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Other) > 0 {
		for iNdEx := len(m.Other) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Other[iNdEx])
			copy(dAtA[i:], m.Other[iNdEx])
			i = encodeVarintDevicerepository(dAtA, i, uint64(len(m.Other[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Main) > 0 {
		i -= len(m.Main)
		copy(dAtA[i:], m.Main)
		i = encodeVarintDevicerepository(dAtA, i, uint64(len(m.Main)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EndDeviceModel_Reseller) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndDeviceModel_Reseller) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EndDeviceModel_Reseller) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintDevicerepository(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Region) > 0 {
		for iNdEx := len(m.Region) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Region[iNdEx])
			copy(dAtA[i:], m.Region[iNdEx])
			i = encodeVarintDevicerepository(dAtA, i, uint64(len(m.Region[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintDevicerepository(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EndDeviceModel_Compliances) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndDeviceModel_Compliances) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EndDeviceModel_Compliances) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RadioEquipment) > 0 {
		for iNdEx := len(m.RadioEquipment) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RadioEquipment[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDevicerepository(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Safety) > 0 {
		for iNdEx := len(m.Safety) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Safety[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDevicerepository(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *EndDeviceModel_Compliances_Compliance) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndDeviceModel_Compliances_Compliance) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EndDeviceModel_Compliances_Compliance) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintDevicerepository(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Standard) > 0 {
		i -= len(m.Standard)
		copy(dAtA[i:], m.Standard)
		i = encodeVarintDevicerepository(dAtA, i, uint64(len(m.Standard)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Norm) > 0 {
		i -= len(m.Norm)
		copy(dAtA[i:], m.Norm)
		i = encodeVarintDevicerepository(dAtA, i, uint64(len(m.Norm)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Body) > 0 {
		i -= len(m.Body)
		copy(dAtA[i:], m.Body)
		i = encodeVarintDevicerepository(dAtA, i, uint64(len(m.Body)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetEndDeviceBrandRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetEndDeviceBrandRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetEndDeviceBrandRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FieldMask != nil {
		{
			size, err := m.FieldMask.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDevicerepository(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.BrandID) > 0 {
		i -= len(m.BrandID)
		copy(dAtA[i:], m.BrandID)
		i = encodeVarintDevicerepository(dAtA, i, uint64(len(m.BrandID)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.ApplicationIds.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintDevicerepository(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ListEndDeviceBrandsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListEndDeviceBrandsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListEndDeviceBrandsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FieldMask != nil {
		{
			size, err := m.FieldMask.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDevicerepository(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.Search) > 0 {
		i -= len(m.Search)
		copy(dAtA[i:], m.Search)
		i = encodeVarintDevicerepository(dAtA, i, uint64(len(m.Search)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.OrderBy) > 0 {
		i -= len(m.OrderBy)
		copy(dAtA[i:], m.OrderBy)
		i = encodeVarintDevicerepository(dAtA, i, uint64(len(m.OrderBy)))
		i--
		dAtA[i] = 0x22
	}
	if m.Page != 0 {
		i = encodeVarintDevicerepository(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x18
	}
	if m.Limit != 0 {
		i = encodeVarintDevicerepository(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.ApplicationIds.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintDevicerepository(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *GetEndDeviceModelRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetEndDeviceModelRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetEndDeviceModelRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FieldMask != nil {
		{
			size, err := m.FieldMask.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDevicerepository(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.ModelID) > 0 {
		i -= len(m.ModelID)
		copy(dAtA[i:], m.ModelID)
		i = encodeVarintDevicerepository(dAtA, i, uint64(len(m.ModelID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.BrandID) > 0 {
		i -= len(m.BrandID)
		copy(dAtA[i:], m.BrandID)
		i = encodeVarintDevicerepository(dAtA, i, uint64(len(m.BrandID)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.ApplicationIds.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintDevicerepository(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ListEndDeviceModelsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListEndDeviceModelsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListEndDeviceModelsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FieldMask != nil {
		{
			size, err := m.FieldMask.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDevicerepository(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Search) > 0 {
		i -= len(m.Search)
		copy(dAtA[i:], m.Search)
		i = encodeVarintDevicerepository(dAtA, i, uint64(len(m.Search)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.OrderBy) > 0 {
		i -= len(m.OrderBy)
		copy(dAtA[i:], m.OrderBy)
		i = encodeVarintDevicerepository(dAtA, i, uint64(len(m.OrderBy)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Page != 0 {
		i = encodeVarintDevicerepository(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x20
	}
	if m.Limit != 0 {
		i = encodeVarintDevicerepository(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x18
	}
	if len(m.BrandID) > 0 {
		i -= len(m.BrandID)
		copy(dAtA[i:], m.BrandID)
		i = encodeVarintDevicerepository(dAtA, i, uint64(len(m.BrandID)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.ApplicationIds.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintDevicerepository(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *GetTemplateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTemplateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTemplateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VersionIds != nil {
		{
			size, err := m.VersionIds.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDevicerepository(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.ApplicationIds.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintDevicerepository(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *GetPayloadFormatterRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPayloadFormatterRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPayloadFormatterRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FieldMask != nil {
		{
			size, err := m.FieldMask.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDevicerepository(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.VersionIDs != nil {
		{
			size, err := m.VersionIDs.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDevicerepository(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.ApplicationIds.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintDevicerepository(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ListEndDeviceBrandsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListEndDeviceBrandsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListEndDeviceBrandsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Brands) > 0 {
		for iNdEx := len(m.Brands) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Brands[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDevicerepository(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ListEndDeviceModelsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListEndDeviceModelsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListEndDeviceModelsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Models) > 0 {
		for iNdEx := len(m.Models) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Models[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDevicerepository(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *EncodedMessagePayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EncodedMessagePayload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EncodedMessagePayload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Errors) > 0 {
		for iNdEx := len(m.Errors) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Errors[iNdEx])
			copy(dAtA[i:], m.Errors[iNdEx])
			i = encodeVarintDevicerepository(dAtA, i, uint64(len(m.Errors[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Warnings) > 0 {
		for iNdEx := len(m.Warnings) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Warnings[iNdEx])
			copy(dAtA[i:], m.Warnings[iNdEx])
			i = encodeVarintDevicerepository(dAtA, i, uint64(len(m.Warnings[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.FrmPayload) > 0 {
		i -= len(m.FrmPayload)
		copy(dAtA[i:], m.FrmPayload)
		i = encodeVarintDevicerepository(dAtA, i, uint64(len(m.FrmPayload)))
		i--
		dAtA[i] = 0x12
	}
	if m.FPort != 0 {
		i = encodeVarintDevicerepository(dAtA, i, uint64(m.FPort))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DecodedMessagePayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DecodedMessagePayload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DecodedMessagePayload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Errors) > 0 {
		for iNdEx := len(m.Errors) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Errors[iNdEx])
			copy(dAtA[i:], m.Errors[iNdEx])
			i = encodeVarintDevicerepository(dAtA, i, uint64(len(m.Errors[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Warnings) > 0 {
		for iNdEx := len(m.Warnings) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Warnings[iNdEx])
			copy(dAtA[i:], m.Warnings[iNdEx])
			i = encodeVarintDevicerepository(dAtA, i, uint64(len(m.Warnings[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDevicerepository(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MessagePayloadDecoder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessagePayloadDecoder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessagePayloadDecoder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Examples) > 0 {
		for iNdEx := len(m.Examples) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Examples[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDevicerepository(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.CodecID) > 0 {
		i -= len(m.CodecID)
		copy(dAtA[i:], m.CodecID)
		i = encodeVarintDevicerepository(dAtA, i, uint64(len(m.CodecID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.FormatterParameter) > 0 {
		i -= len(m.FormatterParameter)
		copy(dAtA[i:], m.FormatterParameter)
		i = encodeVarintDevicerepository(dAtA, i, uint64(len(m.FormatterParameter)))
		i--
		dAtA[i] = 0x12
	}
	if m.Formatter != 0 {
		i = encodeVarintDevicerepository(dAtA, i, uint64(m.Formatter))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MessagePayloadDecoder_Example) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessagePayloadDecoder_Example) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessagePayloadDecoder_Example) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Output != nil {
		{
			size, err := m.Output.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDevicerepository(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Input != nil {
		{
			size, err := m.Input.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDevicerepository(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintDevicerepository(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MessagePayloadEncoder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessagePayloadEncoder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessagePayloadEncoder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Examples) > 0 {
		for iNdEx := len(m.Examples) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Examples[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDevicerepository(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.CodecID) > 0 {
		i -= len(m.CodecID)
		copy(dAtA[i:], m.CodecID)
		i = encodeVarintDevicerepository(dAtA, i, uint64(len(m.CodecID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.FormatterParameter) > 0 {
		i -= len(m.FormatterParameter)
		copy(dAtA[i:], m.FormatterParameter)
		i = encodeVarintDevicerepository(dAtA, i, uint64(len(m.FormatterParameter)))
		i--
		dAtA[i] = 0x12
	}
	if m.Formatter != 0 {
		i = encodeVarintDevicerepository(dAtA, i, uint64(m.Formatter))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MessagePayloadEncoder_Example) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessagePayloadEncoder_Example) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessagePayloadEncoder_Example) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Output != nil {
		{
			size, err := m.Output.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDevicerepository(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Input != nil {
		{
			size, err := m.Input.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDevicerepository(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintDevicerepository(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintDevicerepository(dAtA []byte, offset int, v uint64) int {
	offset -= sovDevicerepository(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedEndDeviceBrand(r randyDevicerepository, easy bool) *EndDeviceBrand {
	this := &EndDeviceBrand{}
	this.BrandId = string(randStringDevicerepository(r))
	this.Name = string(randStringDevicerepository(r))
	this.PrivateEnterpriseNumber = uint32(r.Uint32())
	v1 := r.Intn(10)
	this.OrganizationUniqueIdentifiers = make([]string, v1)
	for i := 0; i < v1; i++ {
		this.OrganizationUniqueIdentifiers[i] = string(randStringDevicerepository(r))
	}
	this.LoraAllianceVendorId = uint32(r.Uint32())
	this.Website = string(randStringDevicerepository(r))
	this.Email = string(randStringDevicerepository(r))
	this.Logo = string(randStringDevicerepository(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedEndDeviceModel(r randyDevicerepository, easy bool) *EndDeviceModel {
	this := &EndDeviceModel{}
	this.BrandId = string(randStringDevicerepository(r))
	this.ModelId = string(randStringDevicerepository(r))
	this.Name = string(randStringDevicerepository(r))
	this.Description = string(randStringDevicerepository(r))
	if r.Intn(5) != 0 {
		v2 := r.Intn(5)
		this.HardwareVersions = make([]*EndDeviceModel_HardwareVersion, v2)
		for i := 0; i < v2; i++ {
			this.HardwareVersions[i] = NewPopulatedEndDeviceModel_HardwareVersion(r, easy)
		}
	}
	if r.Intn(5) != 0 {
		v3 := r.Intn(5)
		this.FirmwareVersions = make([]*EndDeviceModel_FirmwareVersion, v3)
		for i := 0; i < v3; i++ {
			this.FirmwareVersions[i] = NewPopulatedEndDeviceModel_FirmwareVersion(r, easy)
		}
	}
	v4 := r.Intn(10)
	this.Sensors = make([]string, v4)
	for i := 0; i < v4; i++ {
		this.Sensors[i] = string(randStringDevicerepository(r))
	}
	if r.Intn(5) != 0 {
		this.Dimensions = NewPopulatedEndDeviceModel_Dimensions(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Weight = types.NewPopulatedFloatValue(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Battery = NewPopulatedEndDeviceModel_Battery(r, easy)
	}
	if r.Intn(5) != 0 {
		this.OperatingConditions = NewPopulatedEndDeviceModel_OperatingConditions(r, easy)
	}
	this.IpCode = string(randStringDevicerepository(r))
	v5 := r.Intn(10)
	this.KeyProvisioning = make([]KeyProvisioning, v5)
	for i := 0; i < v5; i++ {
		this.KeyProvisioning[i] = KeyProvisioning([]int32{0, 1, 2, 3}[r.Intn(4)])
	}
	this.KeySecurity = KeySecurity([]int32{0, 1, 2, 3}[r.Intn(4)])
	if r.Intn(5) != 0 {
		this.Photos = NewPopulatedEndDeviceModel_Photos(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Videos = NewPopulatedEndDeviceModel_Videos(r, easy)
	}
	this.ProductUrl = string(randStringDevicerepository(r))
	this.DatasheetUrl = string(randStringDevicerepository(r))
	if r.Intn(5) != 0 {
		v6 := r.Intn(5)
		this.Resellers = make([]*EndDeviceModel_Reseller, v6)
		for i := 0; i < v6; i++ {
			this.Resellers[i] = NewPopulatedEndDeviceModel_Reseller(r, easy)
		}
	}
	if r.Intn(5) != 0 {
		this.Compliances = NewPopulatedEndDeviceModel_Compliances(r, easy)
	}
	v7 := r.Intn(10)
	this.AdditionalRadios = make([]string, v7)
	for i := 0; i < v7; i++ {
		this.AdditionalRadios[i] = string(randStringDevicerepository(r))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedEndDeviceModel_HardwareVersion(r randyDevicerepository, easy bool) *EndDeviceModel_HardwareVersion {
	this := &EndDeviceModel_HardwareVersion{}
	this.Version = string(randStringDevicerepository(r))
	this.Numeric = uint32(r.Uint32())
	this.PartNumber = string(randStringDevicerepository(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedEndDeviceModel_FirmwareVersion(r randyDevicerepository, easy bool) *EndDeviceModel_FirmwareVersion {
	this := &EndDeviceModel_FirmwareVersion{}
	this.Version = string(randStringDevicerepository(r))
	this.Numeric = uint32(r.Uint32())
	v8 := r.Intn(10)
	this.SupportedHardwareVersions = make([]string, v8)
	for i := 0; i < v8; i++ {
		this.SupportedHardwareVersions[i] = string(randStringDevicerepository(r))
	}
	if r.Intn(5) != 0 {
		v9 := r.Intn(10)
		this.Profiles = make(map[string]*EndDeviceModel_FirmwareVersion_Profile)
		for i := 0; i < v9; i++ {
			this.Profiles[randStringDevicerepository(r)] = NewPopulatedEndDeviceModel_FirmwareVersion_Profile(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedEndDeviceModel_FirmwareVersion_Profile(r randyDevicerepository, easy bool) *EndDeviceModel_FirmwareVersion_Profile {
	this := &EndDeviceModel_FirmwareVersion_Profile{}
	this.ProfileId = string(randStringDevicerepository(r))
	this.LorawanCertified = bool(bool(r.Intn(2) == 0))
	this.CodecId = string(randStringDevicerepository(r))
	this.VendorId = string(randStringDevicerepository(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedEndDeviceModel_Dimensions(r randyDevicerepository, easy bool) *EndDeviceModel_Dimensions {
	this := &EndDeviceModel_Dimensions{}
	if r.Intn(5) != 0 {
		this.Width = types.NewPopulatedFloatValue(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Height = types.NewPopulatedFloatValue(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Diameter = types.NewPopulatedFloatValue(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Length = types.NewPopulatedFloatValue(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedEndDeviceModel_Battery(r randyDevicerepository, easy bool) *EndDeviceModel_Battery {
	this := &EndDeviceModel_Battery{}
	if r.Intn(5) != 0 {
		this.Replaceable = types.NewPopulatedBoolValue(r, easy)
	}
	this.Type = string(randStringDevicerepository(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedEndDeviceModel_OperatingConditions(r randyDevicerepository, easy bool) *EndDeviceModel_OperatingConditions {
	this := &EndDeviceModel_OperatingConditions{}
	if r.Intn(5) != 0 {
		this.Temperature = NewPopulatedEndDeviceModel_OperatingConditions_Limits(r, easy)
	}
	if r.Intn(5) != 0 {
		this.RelativeHumidity = NewPopulatedEndDeviceModel_OperatingConditions_Limits(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedEndDeviceModel_OperatingConditions_Limits(r randyDevicerepository, easy bool) *EndDeviceModel_OperatingConditions_Limits {
	this := &EndDeviceModel_OperatingConditions_Limits{}
	if r.Intn(5) != 0 {
		this.Min = types.NewPopulatedFloatValue(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Max = types.NewPopulatedFloatValue(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedEndDeviceModel_Photos(r randyDevicerepository, easy bool) *EndDeviceModel_Photos {
	this := &EndDeviceModel_Photos{}
	this.Main = string(randStringDevicerepository(r))
	v10 := r.Intn(10)
	this.Other = make([]string, v10)
	for i := 0; i < v10; i++ {
		this.Other[i] = string(randStringDevicerepository(r))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedEndDeviceModel_Videos(r randyDevicerepository, easy bool) *EndDeviceModel_Videos {
	this := &EndDeviceModel_Videos{}
	this.Main = string(randStringDevicerepository(r))
	v11 := r.Intn(10)
	this.Other = make([]string, v11)
	for i := 0; i < v11; i++ {
		this.Other[i] = string(randStringDevicerepository(r))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedEndDeviceModel_Reseller(r randyDevicerepository, easy bool) *EndDeviceModel_Reseller {
	this := &EndDeviceModel_Reseller{}
	this.Name = string(randStringDevicerepository(r))
	v12 := r.Intn(10)
	this.Region = make([]string, v12)
	for i := 0; i < v12; i++ {
		this.Region[i] = string(randStringDevicerepository(r))
	}
	this.Url = string(randStringDevicerepository(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedEndDeviceModel_Compliances(r randyDevicerepository, easy bool) *EndDeviceModel_Compliances {
	this := &EndDeviceModel_Compliances{}
	if r.Intn(5) != 0 {
		v13 := r.Intn(5)
		this.Safety = make([]*EndDeviceModel_Compliances_Compliance, v13)
		for i := 0; i < v13; i++ {
			this.Safety[i] = NewPopulatedEndDeviceModel_Compliances_Compliance(r, easy)
		}
	}
	if r.Intn(5) != 0 {
		v14 := r.Intn(5)
		this.RadioEquipment = make([]*EndDeviceModel_Compliances_Compliance, v14)
		for i := 0; i < v14; i++ {
			this.RadioEquipment[i] = NewPopulatedEndDeviceModel_Compliances_Compliance(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedEndDeviceModel_Compliances_Compliance(r randyDevicerepository, easy bool) *EndDeviceModel_Compliances_Compliance {
	this := &EndDeviceModel_Compliances_Compliance{}
	this.Body = string(randStringDevicerepository(r))
	this.Norm = string(randStringDevicerepository(r))
	this.Standard = string(randStringDevicerepository(r))
	this.Version = string(randStringDevicerepository(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetEndDeviceBrandRequest(r randyDevicerepository, easy bool) *GetEndDeviceBrandRequest {
	this := &GetEndDeviceBrandRequest{}
	v15 := NewPopulatedApplicationIdentifiers(r, easy)
	this.ApplicationIds = *v15
	this.BrandID = string(randStringDevicerepository(r))
	if r.Intn(5) != 0 {
		this.FieldMask = types.NewPopulatedFieldMask(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedListEndDeviceBrandsRequest(r randyDevicerepository, easy bool) *ListEndDeviceBrandsRequest {
	this := &ListEndDeviceBrandsRequest{}
	v16 := NewPopulatedApplicationIdentifiers(r, easy)
	this.ApplicationIds = *v16
	this.Limit = uint32(r.Uint32())
	this.Page = uint32(r.Uint32())
	this.OrderBy = string(randStringDevicerepository(r))
	this.Search = string(randStringDevicerepository(r))
	if r.Intn(5) != 0 {
		this.FieldMask = types.NewPopulatedFieldMask(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetEndDeviceModelRequest(r randyDevicerepository, easy bool) *GetEndDeviceModelRequest {
	this := &GetEndDeviceModelRequest{}
	v17 := NewPopulatedApplicationIdentifiers(r, easy)
	this.ApplicationIds = *v17
	this.BrandID = string(randStringDevicerepository(r))
	this.ModelID = string(randStringDevicerepository(r))
	if r.Intn(5) != 0 {
		this.FieldMask = types.NewPopulatedFieldMask(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedListEndDeviceModelsRequest(r randyDevicerepository, easy bool) *ListEndDeviceModelsRequest {
	this := &ListEndDeviceModelsRequest{}
	v18 := NewPopulatedApplicationIdentifiers(r, easy)
	this.ApplicationIds = *v18
	this.BrandID = string(randStringDevicerepository(r))
	this.Limit = uint32(r.Uint32())
	this.Page = uint32(r.Uint32())
	this.OrderBy = string(randStringDevicerepository(r))
	this.Search = string(randStringDevicerepository(r))
	if r.Intn(5) != 0 {
		this.FieldMask = types.NewPopulatedFieldMask(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetTemplateRequest(r randyDevicerepository, easy bool) *GetTemplateRequest {
	this := &GetTemplateRequest{}
	v19 := NewPopulatedApplicationIdentifiers(r, easy)
	this.ApplicationIds = *v19
	if r.Intn(5) != 0 {
		this.VersionIds = NewPopulatedEndDeviceVersionIdentifiers(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetPayloadFormatterRequest(r randyDevicerepository, easy bool) *GetPayloadFormatterRequest {
	this := &GetPayloadFormatterRequest{}
	v20 := NewPopulatedApplicationIdentifiers(r, easy)
	this.ApplicationIds = *v20
	if r.Intn(5) != 0 {
		this.VersionIDs = NewPopulatedEndDeviceVersionIdentifiers(r, easy)
	}
	if r.Intn(5) != 0 {
		this.FieldMask = types.NewPopulatedFieldMask(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedListEndDeviceBrandsResponse(r randyDevicerepository, easy bool) *ListEndDeviceBrandsResponse {
	this := &ListEndDeviceBrandsResponse{}
	if r.Intn(5) != 0 {
		v21 := r.Intn(5)
		this.Brands = make([]*EndDeviceBrand, v21)
		for i := 0; i < v21; i++ {
			this.Brands[i] = NewPopulatedEndDeviceBrand(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedListEndDeviceModelsResponse(r randyDevicerepository, easy bool) *ListEndDeviceModelsResponse {
	this := &ListEndDeviceModelsResponse{}
	if r.Intn(5) != 0 {
		v22 := r.Intn(5)
		this.Models = make([]*EndDeviceModel, v22)
		for i := 0; i < v22; i++ {
			this.Models[i] = NewPopulatedEndDeviceModel(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedEncodedMessagePayload(r randyDevicerepository, easy bool) *EncodedMessagePayload {
	this := &EncodedMessagePayload{}
	this.FPort = uint32(r.Uint32())
	v23 := r.Intn(100)
	this.FrmPayload = make([]byte, v23)
	for i := 0; i < v23; i++ {
		this.FrmPayload[i] = byte(r.Intn(256))
	}
	v24 := r.Intn(10)
	this.Warnings = make([]string, v24)
	for i := 0; i < v24; i++ {
		this.Warnings[i] = string(randStringDevicerepository(r))
	}
	v25 := r.Intn(10)
	this.Errors = make([]string, v25)
	for i := 0; i < v25; i++ {
		this.Errors[i] = string(randStringDevicerepository(r))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedDecodedMessagePayload(r randyDevicerepository, easy bool) *DecodedMessagePayload {
	this := &DecodedMessagePayload{}
	if r.Intn(5) != 0 {
		this.Data = types.NewPopulatedStruct(r, easy)
	}
	v26 := r.Intn(10)
	this.Warnings = make([]string, v26)
	for i := 0; i < v26; i++ {
		this.Warnings[i] = string(randStringDevicerepository(r))
	}
	v27 := r.Intn(10)
	this.Errors = make([]string, v27)
	for i := 0; i < v27; i++ {
		this.Errors[i] = string(randStringDevicerepository(r))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedMessagePayloadDecoder(r randyDevicerepository, easy bool) *MessagePayloadDecoder {
	this := &MessagePayloadDecoder{}
	this.Formatter = PayloadFormatter([]int32{0, 1, 2, 3, 4}[r.Intn(5)])
	this.FormatterParameter = string(randStringDevicerepository(r))
	this.CodecID = string(randStringDevicerepository(r))
	if r.Intn(5) != 0 {
		v28 := r.Intn(5)
		this.Examples = make([]*MessagePayloadDecoder_Example, v28)
		for i := 0; i < v28; i++ {
			this.Examples[i] = NewPopulatedMessagePayloadDecoder_Example(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedMessagePayloadDecoder_Example(r randyDevicerepository, easy bool) *MessagePayloadDecoder_Example {
	this := &MessagePayloadDecoder_Example{}
	this.Description = string(randStringDevicerepository(r))
	if r.Intn(5) != 0 {
		this.Input = NewPopulatedEncodedMessagePayload(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Output = NewPopulatedDecodedMessagePayload(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedMessagePayloadEncoder(r randyDevicerepository, easy bool) *MessagePayloadEncoder {
	this := &MessagePayloadEncoder{}
	this.Formatter = PayloadFormatter([]int32{0, 1, 2, 3, 4}[r.Intn(5)])
	this.FormatterParameter = string(randStringDevicerepository(r))
	this.CodecID = string(randStringDevicerepository(r))
	if r.Intn(5) != 0 {
		v29 := r.Intn(5)
		this.Examples = make([]*MessagePayloadEncoder_Example, v29)
		for i := 0; i < v29; i++ {
			this.Examples[i] = NewPopulatedMessagePayloadEncoder_Example(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedMessagePayloadEncoder_Example(r randyDevicerepository, easy bool) *MessagePayloadEncoder_Example {
	this := &MessagePayloadEncoder_Example{}
	this.Description = string(randStringDevicerepository(r))
	if r.Intn(5) != 0 {
		this.Input = NewPopulatedDecodedMessagePayload(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Output = NewPopulatedEncodedMessagePayload(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyDevicerepository interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneDevicerepository(r randyDevicerepository) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringDevicerepository(r randyDevicerepository) string {
	v30 := r.Intn(100)
	tmps := make([]rune, v30)
	for i := 0; i < v30; i++ {
		tmps[i] = randUTF8RuneDevicerepository(r)
	}
	return string(tmps)
}
func randUnrecognizedDevicerepository(r randyDevicerepository, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldDevicerepository(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldDevicerepository(dAtA []byte, r randyDevicerepository, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateDevicerepository(dAtA, uint64(key))
		v31 := r.Int63()
		if r.Intn(2) == 0 {
			v31 *= -1
		}
		dAtA = encodeVarintPopulateDevicerepository(dAtA, uint64(v31))
	case 1:
		dAtA = encodeVarintPopulateDevicerepository(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateDevicerepository(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateDevicerepository(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateDevicerepository(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateDevicerepository(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *EndDeviceBrand) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BrandId)
	if l > 0 {
		n += 1 + l + sovDevicerepository(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovDevicerepository(uint64(l))
	}
	if m.PrivateEnterpriseNumber != 0 {
		n += 1 + sovDevicerepository(uint64(m.PrivateEnterpriseNumber))
	}
	if len(m.OrganizationUniqueIdentifiers) > 0 {
		for _, s := range m.OrganizationUniqueIdentifiers {
			l = len(s)
			n += 1 + l + sovDevicerepository(uint64(l))
		}
	}
	if m.LoraAllianceVendorId != 0 {
		n += 1 + sovDevicerepository(uint64(m.LoraAllianceVendorId))
	}
	l = len(m.Website)
	if l > 0 {
		n += 1 + l + sovDevicerepository(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovDevicerepository(uint64(l))
	}
	l = len(m.Logo)
	if l > 0 {
		n += 1 + l + sovDevicerepository(uint64(l))
	}
	return n
}

func (m *EndDeviceModel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BrandId)
	if l > 0 {
		n += 1 + l + sovDevicerepository(uint64(l))
	}
	l = len(m.ModelId)
	if l > 0 {
		n += 1 + l + sovDevicerepository(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovDevicerepository(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovDevicerepository(uint64(l))
	}
	if len(m.HardwareVersions) > 0 {
		for _, e := range m.HardwareVersions {
			l = e.Size()
			n += 1 + l + sovDevicerepository(uint64(l))
		}
	}
	if len(m.FirmwareVersions) > 0 {
		for _, e := range m.FirmwareVersions {
			l = e.Size()
			n += 1 + l + sovDevicerepository(uint64(l))
		}
	}
	if len(m.Sensors) > 0 {
		for _, s := range m.Sensors {
			l = len(s)
			n += 1 + l + sovDevicerepository(uint64(l))
		}
	}
	if m.Dimensions != nil {
		l = m.Dimensions.Size()
		n += 1 + l + sovDevicerepository(uint64(l))
	}
	if m.Weight != nil {
		l = m.Weight.Size()
		n += 1 + l + sovDevicerepository(uint64(l))
	}
	if m.Battery != nil {
		l = m.Battery.Size()
		n += 1 + l + sovDevicerepository(uint64(l))
	}
	if m.OperatingConditions != nil {
		l = m.OperatingConditions.Size()
		n += 1 + l + sovDevicerepository(uint64(l))
	}
	l = len(m.IpCode)
	if l > 0 {
		n += 1 + l + sovDevicerepository(uint64(l))
	}
	if len(m.KeyProvisioning) > 0 {
		l = 0
		for _, e := range m.KeyProvisioning {
			l += sovDevicerepository(uint64(e))
		}
		n += 1 + sovDevicerepository(uint64(l)) + l
	}
	if m.KeySecurity != 0 {
		n += 1 + sovDevicerepository(uint64(m.KeySecurity))
	}
	if m.Photos != nil {
		l = m.Photos.Size()
		n += 1 + l + sovDevicerepository(uint64(l))
	}
	if m.Videos != nil {
		l = m.Videos.Size()
		n += 2 + l + sovDevicerepository(uint64(l))
	}
	l = len(m.ProductUrl)
	if l > 0 {
		n += 2 + l + sovDevicerepository(uint64(l))
	}
	l = len(m.DatasheetUrl)
	if l > 0 {
		n += 2 + l + sovDevicerepository(uint64(l))
	}
	if len(m.Resellers) > 0 {
		for _, e := range m.Resellers {
			l = e.Size()
			n += 2 + l + sovDevicerepository(uint64(l))
		}
	}
	if m.Compliances != nil {
		l = m.Compliances.Size()
		n += 2 + l + sovDevicerepository(uint64(l))
	}
	if len(m.AdditionalRadios) > 0 {
		for _, s := range m.AdditionalRadios {
			l = len(s)
			n += 2 + l + sovDevicerepository(uint64(l))
		}
	}
	return n
}

func (m *EndDeviceModel_HardwareVersion) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovDevicerepository(uint64(l))
	}
	if m.Numeric != 0 {
		n += 1 + sovDevicerepository(uint64(m.Numeric))
	}
	l = len(m.PartNumber)
	if l > 0 {
		n += 1 + l + sovDevicerepository(uint64(l))
	}
	return n
}

func (m *EndDeviceModel_FirmwareVersion) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovDevicerepository(uint64(l))
	}
	if m.Numeric != 0 {
		n += 1 + sovDevicerepository(uint64(m.Numeric))
	}
	if len(m.SupportedHardwareVersions) > 0 {
		for _, s := range m.SupportedHardwareVersions {
			l = len(s)
			n += 1 + l + sovDevicerepository(uint64(l))
		}
	}
	if len(m.Profiles) > 0 {
		for k, v := range m.Profiles {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovDevicerepository(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovDevicerepository(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovDevicerepository(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *EndDeviceModel_FirmwareVersion_Profile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProfileId)
	if l > 0 {
		n += 1 + l + sovDevicerepository(uint64(l))
	}
	if m.LorawanCertified {
		n += 2
	}
	l = len(m.CodecId)
	if l > 0 {
		n += 1 + l + sovDevicerepository(uint64(l))
	}
	l = len(m.VendorId)
	if l > 0 {
		n += 1 + l + sovDevicerepository(uint64(l))
	}
	return n
}

func (m *EndDeviceModel_Dimensions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Width != nil {
		l = m.Width.Size()
		n += 1 + l + sovDevicerepository(uint64(l))
	}
	if m.Height != nil {
		l = m.Height.Size()
		n += 1 + l + sovDevicerepository(uint64(l))
	}
	if m.Diameter != nil {
		l = m.Diameter.Size()
		n += 1 + l + sovDevicerepository(uint64(l))
	}
	if m.Length != nil {
		l = m.Length.Size()
		n += 1 + l + sovDevicerepository(uint64(l))
	}
	return n
}

func (m *EndDeviceModel_Battery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Replaceable != nil {
		l = m.Replaceable.Size()
		n += 1 + l + sovDevicerepository(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovDevicerepository(uint64(l))
	}
	return n
}

func (m *EndDeviceModel_OperatingConditions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Temperature != nil {
		l = m.Temperature.Size()
		n += 1 + l + sovDevicerepository(uint64(l))
	}
	if m.RelativeHumidity != nil {
		l = m.RelativeHumidity.Size()
		n += 1 + l + sovDevicerepository(uint64(l))
	}
	return n
}

func (m *EndDeviceModel_OperatingConditions_Limits) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Min != nil {
		l = m.Min.Size()
		n += 1 + l + sovDevicerepository(uint64(l))
	}
	if m.Max != nil {
		l = m.Max.Size()
		n += 1 + l + sovDevicerepository(uint64(l))
	}
	return n
}

func (m *EndDeviceModel_Photos) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Main)
	if l > 0 {
		n += 1 + l + sovDevicerepository(uint64(l))
	}
	if len(m.Other) > 0 {
		for _, s := range m.Other {
			l = len(s)
			n += 1 + l + sovDevicerepository(uint64(l))
		}
	}
	return n
}

func (m *EndDeviceModel_Videos) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Main)
	if l > 0 {
		n += 1 + l + sovDevicerepository(uint64(l))
	}
	if len(m.Other) > 0 {
		for _, s := range m.Other {
			l = len(s)
			n += 1 + l + sovDevicerepository(uint64(l))
		}
	}
	return n
}

func (m *EndDeviceModel_Reseller) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovDevicerepository(uint64(l))
	}
	if len(m.Region) > 0 {
		for _, s := range m.Region {
			l = len(s)
			n += 1 + l + sovDevicerepository(uint64(l))
		}
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovDevicerepository(uint64(l))
	}
	return n
}

func (m *EndDeviceModel_Compliances) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Safety) > 0 {
		for _, e := range m.Safety {
			l = e.Size()
			n += 1 + l + sovDevicerepository(uint64(l))
		}
	}
	if len(m.RadioEquipment) > 0 {
		for _, e := range m.RadioEquipment {
			l = e.Size()
			n += 1 + l + sovDevicerepository(uint64(l))
		}
	}
	return n
}

func (m *EndDeviceModel_Compliances_Compliance) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Body)
	if l > 0 {
		n += 1 + l + sovDevicerepository(uint64(l))
	}
	l = len(m.Norm)
	if l > 0 {
		n += 1 + l + sovDevicerepository(uint64(l))
	}
	l = len(m.Standard)
	if l > 0 {
		n += 1 + l + sovDevicerepository(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovDevicerepository(uint64(l))
	}
	return n
}

func (m *GetEndDeviceBrandRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ApplicationIds.Size()
	n += 1 + l + sovDevicerepository(uint64(l))
	l = len(m.BrandID)
	if l > 0 {
		n += 1 + l + sovDevicerepository(uint64(l))
	}
	if m.FieldMask != nil {
		l = m.FieldMask.Size()
		n += 1 + l + sovDevicerepository(uint64(l))
	}
	return n
}

func (m *ListEndDeviceBrandsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ApplicationIds.Size()
	n += 1 + l + sovDevicerepository(uint64(l))
	if m.Limit != 0 {
		n += 1 + sovDevicerepository(uint64(m.Limit))
	}
	if m.Page != 0 {
		n += 1 + sovDevicerepository(uint64(m.Page))
	}
	l = len(m.OrderBy)
	if l > 0 {
		n += 1 + l + sovDevicerepository(uint64(l))
	}
	l = len(m.Search)
	if l > 0 {
		n += 1 + l + sovDevicerepository(uint64(l))
	}
	if m.FieldMask != nil {
		l = m.FieldMask.Size()
		n += 1 + l + sovDevicerepository(uint64(l))
	}
	return n
}

func (m *GetEndDeviceModelRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ApplicationIds.Size()
	n += 1 + l + sovDevicerepository(uint64(l))
	l = len(m.BrandID)
	if l > 0 {
		n += 1 + l + sovDevicerepository(uint64(l))
	}
	l = len(m.ModelID)
	if l > 0 {
		n += 1 + l + sovDevicerepository(uint64(l))
	}
	if m.FieldMask != nil {
		l = m.FieldMask.Size()
		n += 1 + l + sovDevicerepository(uint64(l))
	}
	return n
}

func (m *ListEndDeviceModelsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ApplicationIds.Size()
	n += 1 + l + sovDevicerepository(uint64(l))
	l = len(m.BrandID)
	if l > 0 {
		n += 1 + l + sovDevicerepository(uint64(l))
	}
	if m.Limit != 0 {
		n += 1 + sovDevicerepository(uint64(m.Limit))
	}
	if m.Page != 0 {
		n += 1 + sovDevicerepository(uint64(m.Page))
	}
	l = len(m.OrderBy)
	if l > 0 {
		n += 1 + l + sovDevicerepository(uint64(l))
	}
	l = len(m.Search)
	if l > 0 {
		n += 1 + l + sovDevicerepository(uint64(l))
	}
	if m.FieldMask != nil {
		l = m.FieldMask.Size()
		n += 1 + l + sovDevicerepository(uint64(l))
	}
	return n
}

func (m *GetTemplateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ApplicationIds.Size()
	n += 1 + l + sovDevicerepository(uint64(l))
	if m.VersionIds != nil {
		l = m.VersionIds.Size()
		n += 1 + l + sovDevicerepository(uint64(l))
	}
	return n
}

func (m *GetPayloadFormatterRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ApplicationIds.Size()
	n += 1 + l + sovDevicerepository(uint64(l))
	if m.VersionIDs != nil {
		l = m.VersionIDs.Size()
		n += 1 + l + sovDevicerepository(uint64(l))
	}
	if m.FieldMask != nil {
		l = m.FieldMask.Size()
		n += 1 + l + sovDevicerepository(uint64(l))
	}
	return n
}

func (m *ListEndDeviceBrandsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Brands) > 0 {
		for _, e := range m.Brands {
			l = e.Size()
			n += 1 + l + sovDevicerepository(uint64(l))
		}
	}
	return n
}

func (m *ListEndDeviceModelsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Models) > 0 {
		for _, e := range m.Models {
			l = e.Size()
			n += 1 + l + sovDevicerepository(uint64(l))
		}
	}
	return n
}

func (m *EncodedMessagePayload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FPort != 0 {
		n += 1 + sovDevicerepository(uint64(m.FPort))
	}
	l = len(m.FrmPayload)
	if l > 0 {
		n += 1 + l + sovDevicerepository(uint64(l))
	}
	if len(m.Warnings) > 0 {
		for _, s := range m.Warnings {
			l = len(s)
			n += 1 + l + sovDevicerepository(uint64(l))
		}
	}
	if len(m.Errors) > 0 {
		for _, s := range m.Errors {
			l = len(s)
			n += 1 + l + sovDevicerepository(uint64(l))
		}
	}
	return n
}

func (m *DecodedMessagePayload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovDevicerepository(uint64(l))
	}
	if len(m.Warnings) > 0 {
		for _, s := range m.Warnings {
			l = len(s)
			n += 1 + l + sovDevicerepository(uint64(l))
		}
	}
	if len(m.Errors) > 0 {
		for _, s := range m.Errors {
			l = len(s)
			n += 1 + l + sovDevicerepository(uint64(l))
		}
	}
	return n
}

func (m *MessagePayloadDecoder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Formatter != 0 {
		n += 1 + sovDevicerepository(uint64(m.Formatter))
	}
	l = len(m.FormatterParameter)
	if l > 0 {
		n += 1 + l + sovDevicerepository(uint64(l))
	}
	l = len(m.CodecID)
	if l > 0 {
		n += 1 + l + sovDevicerepository(uint64(l))
	}
	if len(m.Examples) > 0 {
		for _, e := range m.Examples {
			l = e.Size()
			n += 1 + l + sovDevicerepository(uint64(l))
		}
	}
	return n
}

func (m *MessagePayloadDecoder_Example) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovDevicerepository(uint64(l))
	}
	if m.Input != nil {
		l = m.Input.Size()
		n += 1 + l + sovDevicerepository(uint64(l))
	}
	if m.Output != nil {
		l = m.Output.Size()
		n += 1 + l + sovDevicerepository(uint64(l))
	}
	return n
}

func (m *MessagePayloadEncoder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Formatter != 0 {
		n += 1 + sovDevicerepository(uint64(m.Formatter))
	}
	l = len(m.FormatterParameter)
	if l > 0 {
		n += 1 + l + sovDevicerepository(uint64(l))
	}
	l = len(m.CodecID)
	if l > 0 {
		n += 1 + l + sovDevicerepository(uint64(l))
	}
	if len(m.Examples) > 0 {
		for _, e := range m.Examples {
			l = e.Size()
			n += 1 + l + sovDevicerepository(uint64(l))
		}
	}
	return n
}

func (m *MessagePayloadEncoder_Example) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovDevicerepository(uint64(l))
	}
	if m.Input != nil {
		l = m.Input.Size()
		n += 1 + l + sovDevicerepository(uint64(l))
	}
	if m.Output != nil {
		l = m.Output.Size()
		n += 1 + l + sovDevicerepository(uint64(l))
	}
	return n
}

func sovDevicerepository(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDevicerepository(x uint64) (n int) {
	return sovDevicerepository(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *EndDeviceBrand) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EndDeviceBrand{`,
		`BrandId:` + fmt.Sprintf("%v", this.BrandId) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`PrivateEnterpriseNumber:` + fmt.Sprintf("%v", this.PrivateEnterpriseNumber) + `,`,
		`OrganizationUniqueIdentifiers:` + fmt.Sprintf("%v", this.OrganizationUniqueIdentifiers) + `,`,
		`LoraAllianceVendorId:` + fmt.Sprintf("%v", this.LoraAllianceVendorId) + `,`,
		`Website:` + fmt.Sprintf("%v", this.Website) + `,`,
		`Email:` + fmt.Sprintf("%v", this.Email) + `,`,
		`Logo:` + fmt.Sprintf("%v", this.Logo) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EndDeviceModel) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForHardwareVersions := "[]*EndDeviceModel_HardwareVersion{"
	for _, f := range this.HardwareVersions {
		repeatedStringForHardwareVersions += strings.Replace(fmt.Sprintf("%v", f), "EndDeviceModel_HardwareVersion", "EndDeviceModel_HardwareVersion", 1) + ","
	}
	repeatedStringForHardwareVersions += "}"
	repeatedStringForFirmwareVersions := "[]*EndDeviceModel_FirmwareVersion{"
	for _, f := range this.FirmwareVersions {
		repeatedStringForFirmwareVersions += strings.Replace(fmt.Sprintf("%v", f), "EndDeviceModel_FirmwareVersion", "EndDeviceModel_FirmwareVersion", 1) + ","
	}
	repeatedStringForFirmwareVersions += "}"
	repeatedStringForResellers := "[]*EndDeviceModel_Reseller{"
	for _, f := range this.Resellers {
		repeatedStringForResellers += strings.Replace(fmt.Sprintf("%v", f), "EndDeviceModel_Reseller", "EndDeviceModel_Reseller", 1) + ","
	}
	repeatedStringForResellers += "}"
	s := strings.Join([]string{`&EndDeviceModel{`,
		`BrandId:` + fmt.Sprintf("%v", this.BrandId) + `,`,
		`ModelId:` + fmt.Sprintf("%v", this.ModelId) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`HardwareVersions:` + repeatedStringForHardwareVersions + `,`,
		`FirmwareVersions:` + repeatedStringForFirmwareVersions + `,`,
		`Sensors:` + fmt.Sprintf("%v", this.Sensors) + `,`,
		`Dimensions:` + strings.Replace(fmt.Sprintf("%v", this.Dimensions), "EndDeviceModel_Dimensions", "EndDeviceModel_Dimensions", 1) + `,`,
		`Weight:` + strings.Replace(fmt.Sprintf("%v", this.Weight), "FloatValue", "types.FloatValue", 1) + `,`,
		`Battery:` + strings.Replace(fmt.Sprintf("%v", this.Battery), "EndDeviceModel_Battery", "EndDeviceModel_Battery", 1) + `,`,
		`OperatingConditions:` + strings.Replace(fmt.Sprintf("%v", this.OperatingConditions), "EndDeviceModel_OperatingConditions", "EndDeviceModel_OperatingConditions", 1) + `,`,
		`IpCode:` + fmt.Sprintf("%v", this.IpCode) + `,`,
		`KeyProvisioning:` + fmt.Sprintf("%v", this.KeyProvisioning) + `,`,
		`KeySecurity:` + fmt.Sprintf("%v", this.KeySecurity) + `,`,
		`Photos:` + strings.Replace(fmt.Sprintf("%v", this.Photos), "EndDeviceModel_Photos", "EndDeviceModel_Photos", 1) + `,`,
		`Videos:` + strings.Replace(fmt.Sprintf("%v", this.Videos), "EndDeviceModel_Videos", "EndDeviceModel_Videos", 1) + `,`,
		`ProductUrl:` + fmt.Sprintf("%v", this.ProductUrl) + `,`,
		`DatasheetUrl:` + fmt.Sprintf("%v", this.DatasheetUrl) + `,`,
		`Resellers:` + repeatedStringForResellers + `,`,
		`Compliances:` + strings.Replace(fmt.Sprintf("%v", this.Compliances), "EndDeviceModel_Compliances", "EndDeviceModel_Compliances", 1) + `,`,
		`AdditionalRadios:` + fmt.Sprintf("%v", this.AdditionalRadios) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EndDeviceModel_HardwareVersion) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EndDeviceModel_HardwareVersion{`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`Numeric:` + fmt.Sprintf("%v", this.Numeric) + `,`,
		`PartNumber:` + fmt.Sprintf("%v", this.PartNumber) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EndDeviceModel_FirmwareVersion) String() string {
	if this == nil {
		return "nil"
	}
	keysForProfiles := make([]string, 0, len(this.Profiles))
	for k := range this.Profiles {
		keysForProfiles = append(keysForProfiles, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForProfiles)
	mapStringForProfiles := "map[string]*EndDeviceModel_FirmwareVersion_Profile{"
	for _, k := range keysForProfiles {
		mapStringForProfiles += fmt.Sprintf("%v: %v,", k, this.Profiles[k])
	}
	mapStringForProfiles += "}"
	s := strings.Join([]string{`&EndDeviceModel_FirmwareVersion{`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`Numeric:` + fmt.Sprintf("%v", this.Numeric) + `,`,
		`SupportedHardwareVersions:` + fmt.Sprintf("%v", this.SupportedHardwareVersions) + `,`,
		`Profiles:` + mapStringForProfiles + `,`,
		`}`,
	}, "")
	return s
}
func (this *EndDeviceModel_FirmwareVersion_Profile) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EndDeviceModel_FirmwareVersion_Profile{`,
		`ProfileId:` + fmt.Sprintf("%v", this.ProfileId) + `,`,
		`LorawanCertified:` + fmt.Sprintf("%v", this.LorawanCertified) + `,`,
		`CodecId:` + fmt.Sprintf("%v", this.CodecId) + `,`,
		`VendorId:` + fmt.Sprintf("%v", this.VendorId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EndDeviceModel_Dimensions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EndDeviceModel_Dimensions{`,
		`Width:` + strings.Replace(fmt.Sprintf("%v", this.Width), "FloatValue", "types.FloatValue", 1) + `,`,
		`Height:` + strings.Replace(fmt.Sprintf("%v", this.Height), "FloatValue", "types.FloatValue", 1) + `,`,
		`Diameter:` + strings.Replace(fmt.Sprintf("%v", this.Diameter), "FloatValue", "types.FloatValue", 1) + `,`,
		`Length:` + strings.Replace(fmt.Sprintf("%v", this.Length), "FloatValue", "types.FloatValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EndDeviceModel_Battery) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EndDeviceModel_Battery{`,
		`Replaceable:` + strings.Replace(fmt.Sprintf("%v", this.Replaceable), "BoolValue", "types.BoolValue", 1) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EndDeviceModel_OperatingConditions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EndDeviceModel_OperatingConditions{`,
		`Temperature:` + strings.Replace(fmt.Sprintf("%v", this.Temperature), "EndDeviceModel_OperatingConditions_Limits", "EndDeviceModel_OperatingConditions_Limits", 1) + `,`,
		`RelativeHumidity:` + strings.Replace(fmt.Sprintf("%v", this.RelativeHumidity), "EndDeviceModel_OperatingConditions_Limits", "EndDeviceModel_OperatingConditions_Limits", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EndDeviceModel_OperatingConditions_Limits) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EndDeviceModel_OperatingConditions_Limits{`,
		`Min:` + strings.Replace(fmt.Sprintf("%v", this.Min), "FloatValue", "types.FloatValue", 1) + `,`,
		`Max:` + strings.Replace(fmt.Sprintf("%v", this.Max), "FloatValue", "types.FloatValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EndDeviceModel_Photos) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EndDeviceModel_Photos{`,
		`Main:` + fmt.Sprintf("%v", this.Main) + `,`,
		`Other:` + fmt.Sprintf("%v", this.Other) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EndDeviceModel_Videos) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EndDeviceModel_Videos{`,
		`Main:` + fmt.Sprintf("%v", this.Main) + `,`,
		`Other:` + fmt.Sprintf("%v", this.Other) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EndDeviceModel_Reseller) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EndDeviceModel_Reseller{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Region:` + fmt.Sprintf("%v", this.Region) + `,`,
		`Url:` + fmt.Sprintf("%v", this.Url) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EndDeviceModel_Compliances) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForSafety := "[]*EndDeviceModel_Compliances_Compliance{"
	for _, f := range this.Safety {
		repeatedStringForSafety += strings.Replace(fmt.Sprintf("%v", f), "EndDeviceModel_Compliances_Compliance", "EndDeviceModel_Compliances_Compliance", 1) + ","
	}
	repeatedStringForSafety += "}"
	repeatedStringForRadioEquipment := "[]*EndDeviceModel_Compliances_Compliance{"
	for _, f := range this.RadioEquipment {
		repeatedStringForRadioEquipment += strings.Replace(fmt.Sprintf("%v", f), "EndDeviceModel_Compliances_Compliance", "EndDeviceModel_Compliances_Compliance", 1) + ","
	}
	repeatedStringForRadioEquipment += "}"
	s := strings.Join([]string{`&EndDeviceModel_Compliances{`,
		`Safety:` + repeatedStringForSafety + `,`,
		`RadioEquipment:` + repeatedStringForRadioEquipment + `,`,
		`}`,
	}, "")
	return s
}
func (this *EndDeviceModel_Compliances_Compliance) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EndDeviceModel_Compliances_Compliance{`,
		`Body:` + fmt.Sprintf("%v", this.Body) + `,`,
		`Norm:` + fmt.Sprintf("%v", this.Norm) + `,`,
		`Standard:` + fmt.Sprintf("%v", this.Standard) + `,`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetEndDeviceBrandRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetEndDeviceBrandRequest{`,
		`ApplicationIds:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ApplicationIds), "ApplicationIdentifiers", "ApplicationIdentifiers", 1), `&`, ``, 1) + `,`,
		`BrandID:` + fmt.Sprintf("%v", this.BrandID) + `,`,
		`FieldMask:` + strings.Replace(fmt.Sprintf("%v", this.FieldMask), "FieldMask", "types.FieldMask", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListEndDeviceBrandsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListEndDeviceBrandsRequest{`,
		`ApplicationIds:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ApplicationIds), "ApplicationIdentifiers", "ApplicationIdentifiers", 1), `&`, ``, 1) + `,`,
		`Limit:` + fmt.Sprintf("%v", this.Limit) + `,`,
		`Page:` + fmt.Sprintf("%v", this.Page) + `,`,
		`OrderBy:` + fmt.Sprintf("%v", this.OrderBy) + `,`,
		`Search:` + fmt.Sprintf("%v", this.Search) + `,`,
		`FieldMask:` + strings.Replace(fmt.Sprintf("%v", this.FieldMask), "FieldMask", "types.FieldMask", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetEndDeviceModelRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetEndDeviceModelRequest{`,
		`ApplicationIds:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ApplicationIds), "ApplicationIdentifiers", "ApplicationIdentifiers", 1), `&`, ``, 1) + `,`,
		`BrandID:` + fmt.Sprintf("%v", this.BrandID) + `,`,
		`ModelID:` + fmt.Sprintf("%v", this.ModelID) + `,`,
		`FieldMask:` + strings.Replace(fmt.Sprintf("%v", this.FieldMask), "FieldMask", "types.FieldMask", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListEndDeviceModelsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListEndDeviceModelsRequest{`,
		`ApplicationIds:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ApplicationIds), "ApplicationIdentifiers", "ApplicationIdentifiers", 1), `&`, ``, 1) + `,`,
		`BrandID:` + fmt.Sprintf("%v", this.BrandID) + `,`,
		`Limit:` + fmt.Sprintf("%v", this.Limit) + `,`,
		`Page:` + fmt.Sprintf("%v", this.Page) + `,`,
		`OrderBy:` + fmt.Sprintf("%v", this.OrderBy) + `,`,
		`Search:` + fmt.Sprintf("%v", this.Search) + `,`,
		`FieldMask:` + strings.Replace(fmt.Sprintf("%v", this.FieldMask), "FieldMask", "types.FieldMask", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetTemplateRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetTemplateRequest{`,
		`ApplicationIds:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ApplicationIds), "ApplicationIdentifiers", "ApplicationIdentifiers", 1), `&`, ``, 1) + `,`,
		`VersionIds:` + strings.Replace(fmt.Sprintf("%v", this.VersionIds), "EndDeviceVersionIdentifiers", "EndDeviceVersionIdentifiers", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetPayloadFormatterRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetPayloadFormatterRequest{`,
		`ApplicationIds:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ApplicationIds), "ApplicationIdentifiers", "ApplicationIdentifiers", 1), `&`, ``, 1) + `,`,
		`VersionIDs:` + strings.Replace(fmt.Sprintf("%v", this.VersionIDs), "EndDeviceVersionIdentifiers", "EndDeviceVersionIdentifiers", 1) + `,`,
		`FieldMask:` + strings.Replace(fmt.Sprintf("%v", this.FieldMask), "FieldMask", "types.FieldMask", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListEndDeviceBrandsResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForBrands := "[]*EndDeviceBrand{"
	for _, f := range this.Brands {
		repeatedStringForBrands += strings.Replace(f.String(), "EndDeviceBrand", "EndDeviceBrand", 1) + ","
	}
	repeatedStringForBrands += "}"
	s := strings.Join([]string{`&ListEndDeviceBrandsResponse{`,
		`Brands:` + repeatedStringForBrands + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListEndDeviceModelsResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForModels := "[]*EndDeviceModel{"
	for _, f := range this.Models {
		repeatedStringForModels += strings.Replace(f.String(), "EndDeviceModel", "EndDeviceModel", 1) + ","
	}
	repeatedStringForModels += "}"
	s := strings.Join([]string{`&ListEndDeviceModelsResponse{`,
		`Models:` + repeatedStringForModels + `,`,
		`}`,
	}, "")
	return s
}
func (this *EncodedMessagePayload) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EncodedMessagePayload{`,
		`FPort:` + fmt.Sprintf("%v", this.FPort) + `,`,
		`FrmPayload:` + fmt.Sprintf("%v", this.FrmPayload) + `,`,
		`Warnings:` + fmt.Sprintf("%v", this.Warnings) + `,`,
		`Errors:` + fmt.Sprintf("%v", this.Errors) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DecodedMessagePayload) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DecodedMessagePayload{`,
		`Data:` + strings.Replace(fmt.Sprintf("%v", this.Data), "Struct", "types.Struct", 1) + `,`,
		`Warnings:` + fmt.Sprintf("%v", this.Warnings) + `,`,
		`Errors:` + fmt.Sprintf("%v", this.Errors) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MessagePayloadDecoder) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForExamples := "[]*MessagePayloadDecoder_Example{"
	for _, f := range this.Examples {
		repeatedStringForExamples += strings.Replace(fmt.Sprintf("%v", f), "MessagePayloadDecoder_Example", "MessagePayloadDecoder_Example", 1) + ","
	}
	repeatedStringForExamples += "}"
	s := strings.Join([]string{`&MessagePayloadDecoder{`,
		`Formatter:` + fmt.Sprintf("%v", this.Formatter) + `,`,
		`FormatterParameter:` + fmt.Sprintf("%v", this.FormatterParameter) + `,`,
		`CodecID:` + fmt.Sprintf("%v", this.CodecID) + `,`,
		`Examples:` + repeatedStringForExamples + `,`,
		`}`,
	}, "")
	return s
}
func (this *MessagePayloadDecoder_Example) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MessagePayloadDecoder_Example{`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`Input:` + strings.Replace(this.Input.String(), "EncodedMessagePayload", "EncodedMessagePayload", 1) + `,`,
		`Output:` + strings.Replace(this.Output.String(), "DecodedMessagePayload", "DecodedMessagePayload", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MessagePayloadEncoder) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForExamples := "[]*MessagePayloadEncoder_Example{"
	for _, f := range this.Examples {
		repeatedStringForExamples += strings.Replace(fmt.Sprintf("%v", f), "MessagePayloadEncoder_Example", "MessagePayloadEncoder_Example", 1) + ","
	}
	repeatedStringForExamples += "}"
	s := strings.Join([]string{`&MessagePayloadEncoder{`,
		`Formatter:` + fmt.Sprintf("%v", this.Formatter) + `,`,
		`FormatterParameter:` + fmt.Sprintf("%v", this.FormatterParameter) + `,`,
		`CodecID:` + fmt.Sprintf("%v", this.CodecID) + `,`,
		`Examples:` + repeatedStringForExamples + `,`,
		`}`,
	}, "")
	return s
}
func (this *MessagePayloadEncoder_Example) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MessagePayloadEncoder_Example{`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`Input:` + strings.Replace(this.Input.String(), "DecodedMessagePayload", "DecodedMessagePayload", 1) + `,`,
		`Output:` + strings.Replace(this.Output.String(), "EncodedMessagePayload", "EncodedMessagePayload", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringDevicerepository(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *EndDeviceBrand) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevicerepository
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EndDeviceBrand: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EndDeviceBrand: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BrandId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BrandId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateEnterpriseNumber", wireType)
			}
			m.PrivateEnterpriseNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrivateEnterpriseNumber |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationUniqueIdentifiers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrganizationUniqueIdentifiers = append(m.OrganizationUniqueIdentifiers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoraAllianceVendorId", wireType)
			}
			m.LoraAllianceVendorId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoraAllianceVendorId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Website", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Website = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Logo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevicerepository(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndDeviceModel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevicerepository
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EndDeviceModel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EndDeviceModel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BrandId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BrandId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HardwareVersions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HardwareVersions = append(m.HardwareVersions, &EndDeviceModel_HardwareVersion{})
			if err := m.HardwareVersions[len(m.HardwareVersions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirmwareVersions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirmwareVersions = append(m.FirmwareVersions, &EndDeviceModel_FirmwareVersion{})
			if err := m.FirmwareVersions[len(m.FirmwareVersions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sensors", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sensors = append(m.Sensors, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dimensions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dimensions == nil {
				m.Dimensions = &EndDeviceModel_Dimensions{}
			}
			if err := m.Dimensions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Weight == nil {
				m.Weight = &types.FloatValue{}
			}
			if err := m.Weight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Battery", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Battery == nil {
				m.Battery = &EndDeviceModel_Battery{}
			}
			if err := m.Battery.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatingConditions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OperatingConditions == nil {
				m.OperatingConditions = &EndDeviceModel_OperatingConditions{}
			}
			if err := m.OperatingConditions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IpCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType == 0 {
				var v KeyProvisioning
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDevicerepository
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= KeyProvisioning(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.KeyProvisioning = append(m.KeyProvisioning, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDevicerepository
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthDevicerepository
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthDevicerepository
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.KeyProvisioning) == 0 {
					m.KeyProvisioning = make([]KeyProvisioning, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v KeyProvisioning
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDevicerepository
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= KeyProvisioning(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.KeyProvisioning = append(m.KeyProvisioning, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyProvisioning", wireType)
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeySecurity", wireType)
			}
			m.KeySecurity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeySecurity |= KeySecurity(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Photos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Photos == nil {
				m.Photos = &EndDeviceModel_Photos{}
			}
			if err := m.Photos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Videos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Videos == nil {
				m.Videos = &EndDeviceModel_Videos{}
			}
			if err := m.Videos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProductUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DatasheetUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DatasheetUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resellers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Resellers = append(m.Resellers, &EndDeviceModel_Reseller{})
			if err := m.Resellers[len(m.Resellers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Compliances", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Compliances == nil {
				m.Compliances = &EndDeviceModel_Compliances{}
			}
			if err := m.Compliances.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdditionalRadios", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdditionalRadios = append(m.AdditionalRadios, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevicerepository(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndDeviceModel_HardwareVersion) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevicerepository
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HardwareVersion: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HardwareVersion: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Numeric", wireType)
			}
			m.Numeric = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Numeric |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PartNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevicerepository(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndDeviceModel_FirmwareVersion) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevicerepository
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FirmwareVersion: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FirmwareVersion: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Numeric", wireType)
			}
			m.Numeric = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Numeric |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupportedHardwareVersions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SupportedHardwareVersions = append(m.SupportedHardwareVersions, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profiles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Profiles == nil {
				m.Profiles = make(map[string]*EndDeviceModel_FirmwareVersion_Profile)
			}
			var mapkey string
			var mapvalue *EndDeviceModel_FirmwareVersion_Profile
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDevicerepository
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDevicerepository
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthDevicerepository
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthDevicerepository
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDevicerepository
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthDevicerepository
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthDevicerepository
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &EndDeviceModel_FirmwareVersion_Profile{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipDevicerepository(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthDevicerepository
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Profiles[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevicerepository(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndDeviceModel_FirmwareVersion_Profile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevicerepository
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Profile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Profile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProfileId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProfileId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LorawanCertified", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LorawanCertified = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CodecId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CodecId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VendorId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VendorId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevicerepository(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndDeviceModel_Dimensions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevicerepository
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Dimensions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Dimensions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Width", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Width == nil {
				m.Width = &types.FloatValue{}
			}
			if err := m.Width.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Height == nil {
				m.Height = &types.FloatValue{}
			}
			if err := m.Height.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Diameter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Diameter == nil {
				m.Diameter = &types.FloatValue{}
			}
			if err := m.Diameter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Length", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Length == nil {
				m.Length = &types.FloatValue{}
			}
			if err := m.Length.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevicerepository(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndDeviceModel_Battery) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevicerepository
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Battery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Battery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Replaceable", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Replaceable == nil {
				m.Replaceable = &types.BoolValue{}
			}
			if err := m.Replaceable.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevicerepository(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndDeviceModel_OperatingConditions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevicerepository
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OperatingConditions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OperatingConditions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Temperature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Temperature == nil {
				m.Temperature = &EndDeviceModel_OperatingConditions_Limits{}
			}
			if err := m.Temperature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelativeHumidity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RelativeHumidity == nil {
				m.RelativeHumidity = &EndDeviceModel_OperatingConditions_Limits{}
			}
			if err := m.RelativeHumidity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevicerepository(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndDeviceModel_OperatingConditions_Limits) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevicerepository
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Limits: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Limits: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Min", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Min == nil {
				m.Min = &types.FloatValue{}
			}
			if err := m.Min.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Max", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Max == nil {
				m.Max = &types.FloatValue{}
			}
			if err := m.Max.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevicerepository(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndDeviceModel_Photos) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevicerepository
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Photos: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Photos: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Main", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Main = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Other", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Other = append(m.Other, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevicerepository(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndDeviceModel_Videos) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevicerepository
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Videos: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Videos: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Main", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Main = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Other", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Other = append(m.Other, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevicerepository(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndDeviceModel_Reseller) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevicerepository
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reseller: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reseller: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Region = append(m.Region, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevicerepository(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndDeviceModel_Compliances) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevicerepository
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Compliances: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Compliances: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Safety", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Safety = append(m.Safety, &EndDeviceModel_Compliances_Compliance{})
			if err := m.Safety[len(m.Safety)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RadioEquipment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RadioEquipment = append(m.RadioEquipment, &EndDeviceModel_Compliances_Compliance{})
			if err := m.RadioEquipment[len(m.RadioEquipment)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevicerepository(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndDeviceModel_Compliances_Compliance) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevicerepository
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Compliance: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Compliance: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Body = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Norm", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Norm = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Standard", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Standard = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevicerepository(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetEndDeviceBrandRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevicerepository
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetEndDeviceBrandRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetEndDeviceBrandRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicationIds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ApplicationIds.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BrandID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BrandID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldMask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FieldMask == nil {
				m.FieldMask = &types.FieldMask{}
			}
			if err := m.FieldMask.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevicerepository(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListEndDeviceBrandsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevicerepository
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListEndDeviceBrandsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListEndDeviceBrandsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicationIds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ApplicationIds.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Search", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Search = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldMask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FieldMask == nil {
				m.FieldMask = &types.FieldMask{}
			}
			if err := m.FieldMask.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevicerepository(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetEndDeviceModelRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevicerepository
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetEndDeviceModelRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetEndDeviceModelRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicationIds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ApplicationIds.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BrandID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BrandID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModelID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModelID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldMask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FieldMask == nil {
				m.FieldMask = &types.FieldMask{}
			}
			if err := m.FieldMask.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevicerepository(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListEndDeviceModelsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevicerepository
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListEndDeviceModelsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListEndDeviceModelsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicationIds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ApplicationIds.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BrandID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BrandID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Search", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Search = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldMask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FieldMask == nil {
				m.FieldMask = &types.FieldMask{}
			}
			if err := m.FieldMask.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevicerepository(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTemplateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevicerepository
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTemplateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTemplateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicationIds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ApplicationIds.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VersionIds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VersionIds == nil {
				m.VersionIds = &EndDeviceVersionIdentifiers{}
			}
			if err := m.VersionIds.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevicerepository(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPayloadFormatterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevicerepository
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPayloadFormatterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPayloadFormatterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicationIds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ApplicationIds.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VersionIDs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VersionIDs == nil {
				m.VersionIDs = &EndDeviceVersionIdentifiers{}
			}
			if err := m.VersionIDs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldMask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FieldMask == nil {
				m.FieldMask = &types.FieldMask{}
			}
			if err := m.FieldMask.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevicerepository(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListEndDeviceBrandsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevicerepository
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListEndDeviceBrandsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListEndDeviceBrandsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Brands", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Brands = append(m.Brands, &EndDeviceBrand{})
			if err := m.Brands[len(m.Brands)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevicerepository(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListEndDeviceModelsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevicerepository
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListEndDeviceModelsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListEndDeviceModelsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Models", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Models = append(m.Models, &EndDeviceModel{})
			if err := m.Models[len(m.Models)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevicerepository(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EncodedMessagePayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevicerepository
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EncodedMessagePayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EncodedMessagePayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FPort", wireType)
			}
			m.FPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FPort |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrmPayload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FrmPayload = append(m.FrmPayload[:0], dAtA[iNdEx:postIndex]...)
			if m.FrmPayload == nil {
				m.FrmPayload = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Warnings", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Warnings = append(m.Warnings, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errors", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Errors = append(m.Errors, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevicerepository(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DecodedMessagePayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevicerepository
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DecodedMessagePayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DecodedMessagePayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &types.Struct{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Warnings", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Warnings = append(m.Warnings, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errors", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Errors = append(m.Errors, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevicerepository(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessagePayloadDecoder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevicerepository
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessagePayloadDecoder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessagePayloadDecoder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Formatter", wireType)
			}
			m.Formatter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Formatter |= PayloadFormatter(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FormatterParameter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FormatterParameter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CodecID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CodecID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Examples", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Examples = append(m.Examples, &MessagePayloadDecoder_Example{})
			if err := m.Examples[len(m.Examples)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevicerepository(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessagePayloadDecoder_Example) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevicerepository
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Example: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Example: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Input", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Input == nil {
				m.Input = &EncodedMessagePayload{}
			}
			if err := m.Input.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Output", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Output == nil {
				m.Output = &DecodedMessagePayload{}
			}
			if err := m.Output.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevicerepository(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessagePayloadEncoder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevicerepository
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessagePayloadEncoder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessagePayloadEncoder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Formatter", wireType)
			}
			m.Formatter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Formatter |= PayloadFormatter(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FormatterParameter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FormatterParameter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CodecID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CodecID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Examples", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Examples = append(m.Examples, &MessagePayloadEncoder_Example{})
			if err := m.Examples[len(m.Examples)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevicerepository(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessagePayloadEncoder_Example) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevicerepository
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Example: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Example: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Input", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Input == nil {
				m.Input = &DecodedMessagePayload{}
			}
			if err := m.Input.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Output", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevicerepository
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Output == nil {
				m.Output = &EncodedMessagePayload{}
			}
			if err := m.Output.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevicerepository(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDevicerepository
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDevicerepository(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDevicerepository
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDevicerepository
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDevicerepository
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDevicerepository
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDevicerepository
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDevicerepository        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDevicerepository          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDevicerepository = fmt.Errorf("proto: unexpected end of group")
)
