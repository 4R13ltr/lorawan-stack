// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lorawan-stack/api/packetbrokeragent.proto

package ttnpb

import (
	context "context"
	fmt "fmt"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	go_thethings_network_lorawan_stack_v3_pkg_types "go.thethings.network/lorawan-stack/v3/pkg/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Gateway respresentation for Packet Broker.
// This is a subset and superset of the Gateway message using the same data types and field tags to achieve initial wire compatibility.
// There is no (longer) wire compatibility needed; new fields may use any tag.
type PacketBrokerGateway struct {
	Ids *PacketBrokerGateway_GatewayIdentifiers `protobuf:"bytes,1,opt,name=ids,proto3" json:"ids,omitempty"`
	// This field is deprecated. Use administrative_contact and technical_contact instead.
	ContactInfo              []*ContactInfo                 `protobuf:"bytes,7,rep,name=contact_info,json=contactInfo,proto3" json:"contact_info,omitempty"` // Deprecated: Do not use.
	AdministrativeContact    *OrganizationOrUserIdentifiers `protobuf:"bytes,10,opt,name=administrative_contact,json=administrativeContact,proto3" json:"administrative_contact,omitempty"`
	TechnicalContact         *OrganizationOrUserIdentifiers `protobuf:"bytes,11,opt,name=technical_contact,json=technicalContact,proto3" json:"technical_contact,omitempty"`
	Antennas                 []*GatewayAntenna              `protobuf:"bytes,13,rep,name=antennas,proto3" json:"antennas,omitempty"`
	StatusPublic             bool                           `protobuf:"varint,14,opt,name=status_public,json=statusPublic,proto3" json:"status_public,omitempty"`
	LocationPublic           bool                           `protobuf:"varint,15,opt,name=location_public,json=locationPublic,proto3" json:"location_public,omitempty"`
	FrequencyPlanIds         []string                       `protobuf:"bytes,20,rep,name=frequency_plan_ids,json=frequencyPlanIds,proto3" json:"frequency_plan_ids,omitempty"`
	UpdateLocationFromStatus bool                           `protobuf:"varint,21,opt,name=update_location_from_status,json=updateLocationFromStatus,proto3" json:"update_location_from_status,omitempty"`
	Online                   bool                           `protobuf:"varint,28,opt,name=online,proto3" json:"online,omitempty"`
	// Received packets rate (number of packets per hour).
	// This field gets updated when a value is set.
	RxRate *types.FloatValue `protobuf:"bytes,29,opt,name=rx_rate,json=rxRate,proto3" json:"rx_rate,omitempty"`
	// Transmitted packets rate (number of packets per hour).
	// This field gets updated when a value is set.
	TxRate               *types.FloatValue `protobuf:"bytes,30,opt,name=tx_rate,json=txRate,proto3" json:"tx_rate,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *PacketBrokerGateway) Reset()         { *m = PacketBrokerGateway{} }
func (m *PacketBrokerGateway) String() string { return proto.CompactTextString(m) }
func (*PacketBrokerGateway) ProtoMessage()    {}
func (*PacketBrokerGateway) Descriptor() ([]byte, []int) {
	return fileDescriptor_1a44242dc5cd678e, []int{0}
}
func (m *PacketBrokerGateway) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PacketBrokerGateway.Unmarshal(m, b)
}
func (m *PacketBrokerGateway) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PacketBrokerGateway.Marshal(b, m, deterministic)
}
func (m *PacketBrokerGateway) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PacketBrokerGateway.Merge(m, src)
}
func (m *PacketBrokerGateway) XXX_Size() int {
	return xxx_messageInfo_PacketBrokerGateway.Size(m)
}
func (m *PacketBrokerGateway) XXX_DiscardUnknown() {
	xxx_messageInfo_PacketBrokerGateway.DiscardUnknown(m)
}

var xxx_messageInfo_PacketBrokerGateway proto.InternalMessageInfo

func (m *PacketBrokerGateway) GetIds() *PacketBrokerGateway_GatewayIdentifiers {
	if m != nil {
		return m.Ids
	}
	return nil
}

// Deprecated: Do not use.
func (m *PacketBrokerGateway) GetContactInfo() []*ContactInfo {
	if m != nil {
		return m.ContactInfo
	}
	return nil
}

func (m *PacketBrokerGateway) GetAdministrativeContact() *OrganizationOrUserIdentifiers {
	if m != nil {
		return m.AdministrativeContact
	}
	return nil
}

func (m *PacketBrokerGateway) GetTechnicalContact() *OrganizationOrUserIdentifiers {
	if m != nil {
		return m.TechnicalContact
	}
	return nil
}

func (m *PacketBrokerGateway) GetAntennas() []*GatewayAntenna {
	if m != nil {
		return m.Antennas
	}
	return nil
}

func (m *PacketBrokerGateway) GetStatusPublic() bool {
	if m != nil {
		return m.StatusPublic
	}
	return false
}

func (m *PacketBrokerGateway) GetLocationPublic() bool {
	if m != nil {
		return m.LocationPublic
	}
	return false
}

func (m *PacketBrokerGateway) GetFrequencyPlanIds() []string {
	if m != nil {
		return m.FrequencyPlanIds
	}
	return nil
}

func (m *PacketBrokerGateway) GetUpdateLocationFromStatus() bool {
	if m != nil {
		return m.UpdateLocationFromStatus
	}
	return false
}

func (m *PacketBrokerGateway) GetOnline() bool {
	if m != nil {
		return m.Online
	}
	return false
}

func (m *PacketBrokerGateway) GetRxRate() *types.FloatValue {
	if m != nil {
		return m.RxRate
	}
	return nil
}

func (m *PacketBrokerGateway) GetTxRate() *types.FloatValue {
	if m != nil {
		return m.TxRate
	}
	return nil
}

type PacketBrokerGateway_GatewayIdentifiers struct {
	GatewayId            string                                                 `protobuf:"bytes,1,opt,name=gateway_id,json=gatewayId,proto3" json:"gateway_id,omitempty"`
	Eui                  *go_thethings_network_lorawan_stack_v3_pkg_types.EUI64 `protobuf:"bytes,2,opt,name=eui,proto3,customtype=go.thethings.network/lorawan-stack/v3/pkg/types.EUI64" json:"eui,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                               `json:"-"`
	XXX_sizecache        int32                                                  `json:"-"`
}

func (m *PacketBrokerGateway_GatewayIdentifiers) Reset() {
	*m = PacketBrokerGateway_GatewayIdentifiers{}
}
func (m *PacketBrokerGateway_GatewayIdentifiers) String() string { return proto.CompactTextString(m) }
func (*PacketBrokerGateway_GatewayIdentifiers) ProtoMessage()    {}
func (*PacketBrokerGateway_GatewayIdentifiers) Descriptor() ([]byte, []int) {
	return fileDescriptor_1a44242dc5cd678e, []int{0, 0}
}
func (m *PacketBrokerGateway_GatewayIdentifiers) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PacketBrokerGateway_GatewayIdentifiers.Unmarshal(m, b)
}
func (m *PacketBrokerGateway_GatewayIdentifiers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PacketBrokerGateway_GatewayIdentifiers.Marshal(b, m, deterministic)
}
func (m *PacketBrokerGateway_GatewayIdentifiers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PacketBrokerGateway_GatewayIdentifiers.Merge(m, src)
}
func (m *PacketBrokerGateway_GatewayIdentifiers) XXX_Size() int {
	return xxx_messageInfo_PacketBrokerGateway_GatewayIdentifiers.Size(m)
}
func (m *PacketBrokerGateway_GatewayIdentifiers) XXX_DiscardUnknown() {
	xxx_messageInfo_PacketBrokerGateway_GatewayIdentifiers.DiscardUnknown(m)
}

var xxx_messageInfo_PacketBrokerGateway_GatewayIdentifiers proto.InternalMessageInfo

func (m *PacketBrokerGateway_GatewayIdentifiers) GetGatewayId() string {
	if m != nil {
		return m.GatewayId
	}
	return ""
}

type UpdatePacketBrokerGatewayRequest struct {
	Gateway *PacketBrokerGateway `protobuf:"bytes,1,opt,name=gateway,proto3" json:"gateway,omitempty"`
	// The names of the gateway fields that are considered for update.
	//
	// Online status is only updated if status_public is set. If status_public is set and false, the status will be reset.
	// If status_public is set and true, the online status is taken from the online field. The return message contains
	// the duration online_ttl for how long the gateway is considered online.
	//
	// Location is only updated if location_public is set. If location_public is set and false, the location will be reset.
	// If location_public is set and true, the first antenna location will be used as gateway location.
	FieldMask            *types.FieldMask `protobuf:"bytes,5,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *UpdatePacketBrokerGatewayRequest) Reset()         { *m = UpdatePacketBrokerGatewayRequest{} }
func (m *UpdatePacketBrokerGatewayRequest) String() string { return proto.CompactTextString(m) }
func (*UpdatePacketBrokerGatewayRequest) ProtoMessage()    {}
func (*UpdatePacketBrokerGatewayRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1a44242dc5cd678e, []int{1}
}
func (m *UpdatePacketBrokerGatewayRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdatePacketBrokerGatewayRequest.Unmarshal(m, b)
}
func (m *UpdatePacketBrokerGatewayRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdatePacketBrokerGatewayRequest.Marshal(b, m, deterministic)
}
func (m *UpdatePacketBrokerGatewayRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdatePacketBrokerGatewayRequest.Merge(m, src)
}
func (m *UpdatePacketBrokerGatewayRequest) XXX_Size() int {
	return xxx_messageInfo_UpdatePacketBrokerGatewayRequest.Size(m)
}
func (m *UpdatePacketBrokerGatewayRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdatePacketBrokerGatewayRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdatePacketBrokerGatewayRequest proto.InternalMessageInfo

func (m *UpdatePacketBrokerGatewayRequest) GetGateway() *PacketBrokerGateway {
	if m != nil {
		return m.Gateway
	}
	return nil
}

func (m *UpdatePacketBrokerGatewayRequest) GetFieldMask() *types.FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

type UpdatePacketBrokerGatewayResponse struct {
	// Time to live of the online status.
	OnlineTtl            *types.Duration `protobuf:"bytes,1,opt,name=online_ttl,json=onlineTtl,proto3" json:"online_ttl,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *UpdatePacketBrokerGatewayResponse) Reset()         { *m = UpdatePacketBrokerGatewayResponse{} }
func (m *UpdatePacketBrokerGatewayResponse) String() string { return proto.CompactTextString(m) }
func (*UpdatePacketBrokerGatewayResponse) ProtoMessage()    {}
func (*UpdatePacketBrokerGatewayResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1a44242dc5cd678e, []int{2}
}
func (m *UpdatePacketBrokerGatewayResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdatePacketBrokerGatewayResponse.Unmarshal(m, b)
}
func (m *UpdatePacketBrokerGatewayResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdatePacketBrokerGatewayResponse.Marshal(b, m, deterministic)
}
func (m *UpdatePacketBrokerGatewayResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdatePacketBrokerGatewayResponse.Merge(m, src)
}
func (m *UpdatePacketBrokerGatewayResponse) XXX_Size() int {
	return xxx_messageInfo_UpdatePacketBrokerGatewayResponse.Size(m)
}
func (m *UpdatePacketBrokerGatewayResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdatePacketBrokerGatewayResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdatePacketBrokerGatewayResponse proto.InternalMessageInfo

func (m *UpdatePacketBrokerGatewayResponse) GetOnlineTtl() *types.Duration {
	if m != nil {
		return m.OnlineTtl
	}
	return nil
}

type PacketBrokerNetworkIdentifier struct {
	// LoRa Alliance NetID.
	NetId uint32 `protobuf:"varint,1,opt,name=net_id,json=netId,proto3" json:"net_id,omitempty"`
	// Tenant identifier if the registration leases DevAddr blocks from a NetID.
	TenantId             string   `protobuf:"bytes,2,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PacketBrokerNetworkIdentifier) Reset()         { *m = PacketBrokerNetworkIdentifier{} }
func (m *PacketBrokerNetworkIdentifier) String() string { return proto.CompactTextString(m) }
func (*PacketBrokerNetworkIdentifier) ProtoMessage()    {}
func (*PacketBrokerNetworkIdentifier) Descriptor() ([]byte, []int) {
	return fileDescriptor_1a44242dc5cd678e, []int{3}
}
func (m *PacketBrokerNetworkIdentifier) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PacketBrokerNetworkIdentifier.Unmarshal(m, b)
}
func (m *PacketBrokerNetworkIdentifier) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PacketBrokerNetworkIdentifier.Marshal(b, m, deterministic)
}
func (m *PacketBrokerNetworkIdentifier) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PacketBrokerNetworkIdentifier.Merge(m, src)
}
func (m *PacketBrokerNetworkIdentifier) XXX_Size() int {
	return xxx_messageInfo_PacketBrokerNetworkIdentifier.Size(m)
}
func (m *PacketBrokerNetworkIdentifier) XXX_DiscardUnknown() {
	xxx_messageInfo_PacketBrokerNetworkIdentifier.DiscardUnknown(m)
}

var xxx_messageInfo_PacketBrokerNetworkIdentifier proto.InternalMessageInfo

func (m *PacketBrokerNetworkIdentifier) GetNetId() uint32 {
	if m != nil {
		return m.NetId
	}
	return 0
}

func (m *PacketBrokerNetworkIdentifier) GetTenantId() string {
	if m != nil {
		return m.TenantId
	}
	return ""
}

type PacketBrokerDevAddrBlock struct {
	DevAddrPrefix        *DevAddrPrefix `protobuf:"bytes,1,opt,name=dev_addr_prefix,json=devAddrPrefix,proto3" json:"dev_addr_prefix,omitempty"`
	HomeNetworkClusterId string         `protobuf:"bytes,2,opt,name=home_network_cluster_id,json=homeNetworkClusterId,proto3" json:"home_network_cluster_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *PacketBrokerDevAddrBlock) Reset()         { *m = PacketBrokerDevAddrBlock{} }
func (m *PacketBrokerDevAddrBlock) String() string { return proto.CompactTextString(m) }
func (*PacketBrokerDevAddrBlock) ProtoMessage()    {}
func (*PacketBrokerDevAddrBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_1a44242dc5cd678e, []int{4}
}
func (m *PacketBrokerDevAddrBlock) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PacketBrokerDevAddrBlock.Unmarshal(m, b)
}
func (m *PacketBrokerDevAddrBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PacketBrokerDevAddrBlock.Marshal(b, m, deterministic)
}
func (m *PacketBrokerDevAddrBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PacketBrokerDevAddrBlock.Merge(m, src)
}
func (m *PacketBrokerDevAddrBlock) XXX_Size() int {
	return xxx_messageInfo_PacketBrokerDevAddrBlock.Size(m)
}
func (m *PacketBrokerDevAddrBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_PacketBrokerDevAddrBlock.DiscardUnknown(m)
}

var xxx_messageInfo_PacketBrokerDevAddrBlock proto.InternalMessageInfo

func (m *PacketBrokerDevAddrBlock) GetDevAddrPrefix() *DevAddrPrefix {
	if m != nil {
		return m.DevAddrPrefix
	}
	return nil
}

func (m *PacketBrokerDevAddrBlock) GetHomeNetworkClusterId() string {
	if m != nil {
		return m.HomeNetworkClusterId
	}
	return ""
}

type PacketBrokerNetwork struct {
	// Packet Broker network identifier.
	Id *PacketBrokerNetworkIdentifier `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Name of the network.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// DevAddr blocks that are assigned to this registration.
	DevAddrBlocks []*PacketBrokerDevAddrBlock `protobuf:"bytes,3,rep,name=dev_addr_blocks,json=devAddrBlocks,proto3" json:"dev_addr_blocks,omitempty"`
	// Contact information.
	// This field is deprecated. Use administrative_contact and technical_contact instead.
	ContactInfo           []*ContactInfo `protobuf:"bytes,4,rep,name=contact_info,json=contactInfo,proto3" json:"contact_info,omitempty"` // Deprecated: Do not use.
	AdministrativeContact *ContactInfo   `protobuf:"bytes,6,opt,name=administrative_contact,json=administrativeContact,proto3" json:"administrative_contact,omitempty"`
	TechnicalContact      *ContactInfo   `protobuf:"bytes,7,opt,name=technical_contact,json=technicalContact,proto3" json:"technical_contact,omitempty"`
	// Whether the network is listed so it can be viewed by other networks.
	Listed               bool     `protobuf:"varint,5,opt,name=listed,proto3" json:"listed,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PacketBrokerNetwork) Reset()         { *m = PacketBrokerNetwork{} }
func (m *PacketBrokerNetwork) String() string { return proto.CompactTextString(m) }
func (*PacketBrokerNetwork) ProtoMessage()    {}
func (*PacketBrokerNetwork) Descriptor() ([]byte, []int) {
	return fileDescriptor_1a44242dc5cd678e, []int{5}
}
func (m *PacketBrokerNetwork) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PacketBrokerNetwork.Unmarshal(m, b)
}
func (m *PacketBrokerNetwork) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PacketBrokerNetwork.Marshal(b, m, deterministic)
}
func (m *PacketBrokerNetwork) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PacketBrokerNetwork.Merge(m, src)
}
func (m *PacketBrokerNetwork) XXX_Size() int {
	return xxx_messageInfo_PacketBrokerNetwork.Size(m)
}
func (m *PacketBrokerNetwork) XXX_DiscardUnknown() {
	xxx_messageInfo_PacketBrokerNetwork.DiscardUnknown(m)
}

var xxx_messageInfo_PacketBrokerNetwork proto.InternalMessageInfo

func (m *PacketBrokerNetwork) GetId() *PacketBrokerNetworkIdentifier {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *PacketBrokerNetwork) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PacketBrokerNetwork) GetDevAddrBlocks() []*PacketBrokerDevAddrBlock {
	if m != nil {
		return m.DevAddrBlocks
	}
	return nil
}

// Deprecated: Do not use.
func (m *PacketBrokerNetwork) GetContactInfo() []*ContactInfo {
	if m != nil {
		return m.ContactInfo
	}
	return nil
}

func (m *PacketBrokerNetwork) GetAdministrativeContact() *ContactInfo {
	if m != nil {
		return m.AdministrativeContact
	}
	return nil
}

func (m *PacketBrokerNetwork) GetTechnicalContact() *ContactInfo {
	if m != nil {
		return m.TechnicalContact
	}
	return nil
}

func (m *PacketBrokerNetwork) GetListed() bool {
	if m != nil {
		return m.Listed
	}
	return false
}

type PacketBrokerNetworks struct {
	Networks             []*PacketBrokerNetwork `protobuf:"bytes,1,rep,name=networks,proto3" json:"networks,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *PacketBrokerNetworks) Reset()         { *m = PacketBrokerNetworks{} }
func (m *PacketBrokerNetworks) String() string { return proto.CompactTextString(m) }
func (*PacketBrokerNetworks) ProtoMessage()    {}
func (*PacketBrokerNetworks) Descriptor() ([]byte, []int) {
	return fileDescriptor_1a44242dc5cd678e, []int{6}
}
func (m *PacketBrokerNetworks) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PacketBrokerNetworks.Unmarshal(m, b)
}
func (m *PacketBrokerNetworks) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PacketBrokerNetworks.Marshal(b, m, deterministic)
}
func (m *PacketBrokerNetworks) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PacketBrokerNetworks.Merge(m, src)
}
func (m *PacketBrokerNetworks) XXX_Size() int {
	return xxx_messageInfo_PacketBrokerNetworks.Size(m)
}
func (m *PacketBrokerNetworks) XXX_DiscardUnknown() {
	xxx_messageInfo_PacketBrokerNetworks.DiscardUnknown(m)
}

var xxx_messageInfo_PacketBrokerNetworks proto.InternalMessageInfo

func (m *PacketBrokerNetworks) GetNetworks() []*PacketBrokerNetwork {
	if m != nil {
		return m.Networks
	}
	return nil
}

type PacketBrokerInfo struct {
	// The current registration, unset if there isn't a registration.
	Registration *PacketBrokerNetwork `protobuf:"bytes,1,opt,name=registration,proto3" json:"registration,omitempty"`
	// Whether the server is configured as Forwarder (with gateways).
	ForwarderEnabled bool `protobuf:"varint,2,opt,name=forwarder_enabled,json=forwarderEnabled,proto3" json:"forwarder_enabled,omitempty"`
	// Whether the server is configured as Home Network (with end devices).
	HomeNetworkEnabled bool `protobuf:"varint,3,opt,name=home_network_enabled,json=homeNetworkEnabled,proto3" json:"home_network_enabled,omitempty"`
	// Whether the registration can be changed.
	RegisterEnabled      bool     `protobuf:"varint,4,opt,name=register_enabled,json=registerEnabled,proto3" json:"register_enabled,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PacketBrokerInfo) Reset()         { *m = PacketBrokerInfo{} }
func (m *PacketBrokerInfo) String() string { return proto.CompactTextString(m) }
func (*PacketBrokerInfo) ProtoMessage()    {}
func (*PacketBrokerInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_1a44242dc5cd678e, []int{7}
}
func (m *PacketBrokerInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PacketBrokerInfo.Unmarshal(m, b)
}
func (m *PacketBrokerInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PacketBrokerInfo.Marshal(b, m, deterministic)
}
func (m *PacketBrokerInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PacketBrokerInfo.Merge(m, src)
}
func (m *PacketBrokerInfo) XXX_Size() int {
	return xxx_messageInfo_PacketBrokerInfo.Size(m)
}
func (m *PacketBrokerInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PacketBrokerInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PacketBrokerInfo proto.InternalMessageInfo

func (m *PacketBrokerInfo) GetRegistration() *PacketBrokerNetwork {
	if m != nil {
		return m.Registration
	}
	return nil
}

func (m *PacketBrokerInfo) GetForwarderEnabled() bool {
	if m != nil {
		return m.ForwarderEnabled
	}
	return false
}

func (m *PacketBrokerInfo) GetHomeNetworkEnabled() bool {
	if m != nil {
		return m.HomeNetworkEnabled
	}
	return false
}

func (m *PacketBrokerInfo) GetRegisterEnabled() bool {
	if m != nil {
		return m.RegisterEnabled
	}
	return false
}

type PacketBrokerRegisterRequest struct {
	// Whether the network should be listed in Packet Broker.
	// If unset, the value is taken from the registration settings.
	Listed               *types.BoolValue `protobuf:"bytes,1,opt,name=listed,proto3" json:"listed,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *PacketBrokerRegisterRequest) Reset()         { *m = PacketBrokerRegisterRequest{} }
func (m *PacketBrokerRegisterRequest) String() string { return proto.CompactTextString(m) }
func (*PacketBrokerRegisterRequest) ProtoMessage()    {}
func (*PacketBrokerRegisterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1a44242dc5cd678e, []int{8}
}
func (m *PacketBrokerRegisterRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PacketBrokerRegisterRequest.Unmarshal(m, b)
}
func (m *PacketBrokerRegisterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PacketBrokerRegisterRequest.Marshal(b, m, deterministic)
}
func (m *PacketBrokerRegisterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PacketBrokerRegisterRequest.Merge(m, src)
}
func (m *PacketBrokerRegisterRequest) XXX_Size() int {
	return xxx_messageInfo_PacketBrokerRegisterRequest.Size(m)
}
func (m *PacketBrokerRegisterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PacketBrokerRegisterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PacketBrokerRegisterRequest proto.InternalMessageInfo

func (m *PacketBrokerRegisterRequest) GetListed() *types.BoolValue {
	if m != nil {
		return m.Listed
	}
	return nil
}

type PacketBrokerRoutingPolicyUplink struct {
	// Forward join-request messages.
	JoinRequest bool `protobuf:"varint,1,opt,name=join_request,json=joinRequest,proto3" json:"join_request,omitempty"`
	// Forward uplink messages with FPort of 0.
	MacData bool `protobuf:"varint,2,opt,name=mac_data,json=macData,proto3" json:"mac_data,omitempty"`
	// Forward uplink messages with FPort between 1 and 255.
	ApplicationData bool `protobuf:"varint,3,opt,name=application_data,json=applicationData,proto3" json:"application_data,omitempty"`
	// Forward RSSI and SNR.
	SignalQuality bool `protobuf:"varint,4,opt,name=signal_quality,json=signalQuality,proto3" json:"signal_quality,omitempty"`
	// Forward gateway location, RSSI, SNR and fine timestamp.
	Localization         bool     `protobuf:"varint,5,opt,name=localization,proto3" json:"localization,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PacketBrokerRoutingPolicyUplink) Reset()         { *m = PacketBrokerRoutingPolicyUplink{} }
func (m *PacketBrokerRoutingPolicyUplink) String() string { return proto.CompactTextString(m) }
func (*PacketBrokerRoutingPolicyUplink) ProtoMessage()    {}
func (*PacketBrokerRoutingPolicyUplink) Descriptor() ([]byte, []int) {
	return fileDescriptor_1a44242dc5cd678e, []int{9}
}
func (m *PacketBrokerRoutingPolicyUplink) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PacketBrokerRoutingPolicyUplink.Unmarshal(m, b)
}
func (m *PacketBrokerRoutingPolicyUplink) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PacketBrokerRoutingPolicyUplink.Marshal(b, m, deterministic)
}
func (m *PacketBrokerRoutingPolicyUplink) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PacketBrokerRoutingPolicyUplink.Merge(m, src)
}
func (m *PacketBrokerRoutingPolicyUplink) XXX_Size() int {
	return xxx_messageInfo_PacketBrokerRoutingPolicyUplink.Size(m)
}
func (m *PacketBrokerRoutingPolicyUplink) XXX_DiscardUnknown() {
	xxx_messageInfo_PacketBrokerRoutingPolicyUplink.DiscardUnknown(m)
}

var xxx_messageInfo_PacketBrokerRoutingPolicyUplink proto.InternalMessageInfo

func (m *PacketBrokerRoutingPolicyUplink) GetJoinRequest() bool {
	if m != nil {
		return m.JoinRequest
	}
	return false
}

func (m *PacketBrokerRoutingPolicyUplink) GetMacData() bool {
	if m != nil {
		return m.MacData
	}
	return false
}

func (m *PacketBrokerRoutingPolicyUplink) GetApplicationData() bool {
	if m != nil {
		return m.ApplicationData
	}
	return false
}

func (m *PacketBrokerRoutingPolicyUplink) GetSignalQuality() bool {
	if m != nil {
		return m.SignalQuality
	}
	return false
}

func (m *PacketBrokerRoutingPolicyUplink) GetLocalization() bool {
	if m != nil {
		return m.Localization
	}
	return false
}

type PacketBrokerRoutingPolicyDownlink struct {
	// Allow join-accept messages.
	JoinAccept bool `protobuf:"varint,1,opt,name=join_accept,json=joinAccept,proto3" json:"join_accept,omitempty"`
	// Allow downlink messages with FPort of 0.
	MacData bool `protobuf:"varint,2,opt,name=mac_data,json=macData,proto3" json:"mac_data,omitempty"`
	// Allow downlink messages with FPort between 1 and 255.
	ApplicationData      bool     `protobuf:"varint,3,opt,name=application_data,json=applicationData,proto3" json:"application_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PacketBrokerRoutingPolicyDownlink) Reset()         { *m = PacketBrokerRoutingPolicyDownlink{} }
func (m *PacketBrokerRoutingPolicyDownlink) String() string { return proto.CompactTextString(m) }
func (*PacketBrokerRoutingPolicyDownlink) ProtoMessage()    {}
func (*PacketBrokerRoutingPolicyDownlink) Descriptor() ([]byte, []int) {
	return fileDescriptor_1a44242dc5cd678e, []int{10}
}
func (m *PacketBrokerRoutingPolicyDownlink) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PacketBrokerRoutingPolicyDownlink.Unmarshal(m, b)
}
func (m *PacketBrokerRoutingPolicyDownlink) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PacketBrokerRoutingPolicyDownlink.Marshal(b, m, deterministic)
}
func (m *PacketBrokerRoutingPolicyDownlink) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PacketBrokerRoutingPolicyDownlink.Merge(m, src)
}
func (m *PacketBrokerRoutingPolicyDownlink) XXX_Size() int {
	return xxx_messageInfo_PacketBrokerRoutingPolicyDownlink.Size(m)
}
func (m *PacketBrokerRoutingPolicyDownlink) XXX_DiscardUnknown() {
	xxx_messageInfo_PacketBrokerRoutingPolicyDownlink.DiscardUnknown(m)
}

var xxx_messageInfo_PacketBrokerRoutingPolicyDownlink proto.InternalMessageInfo

func (m *PacketBrokerRoutingPolicyDownlink) GetJoinAccept() bool {
	if m != nil {
		return m.JoinAccept
	}
	return false
}

func (m *PacketBrokerRoutingPolicyDownlink) GetMacData() bool {
	if m != nil {
		return m.MacData
	}
	return false
}

func (m *PacketBrokerRoutingPolicyDownlink) GetApplicationData() bool {
	if m != nil {
		return m.ApplicationData
	}
	return false
}

type PacketBrokerDefaultRoutingPolicy struct {
	// Timestamp when the policy got last updated.
	UpdatedAt *types.Timestamp `protobuf:"bytes,1,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// Uplink policy.
	Uplink *PacketBrokerRoutingPolicyUplink `protobuf:"bytes,2,opt,name=uplink,proto3" json:"uplink,omitempty"`
	// Downlink policy.
	Downlink             *PacketBrokerRoutingPolicyDownlink `protobuf:"bytes,3,opt,name=downlink,proto3" json:"downlink,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                           `json:"-"`
	XXX_sizecache        int32                              `json:"-"`
}

func (m *PacketBrokerDefaultRoutingPolicy) Reset()         { *m = PacketBrokerDefaultRoutingPolicy{} }
func (m *PacketBrokerDefaultRoutingPolicy) String() string { return proto.CompactTextString(m) }
func (*PacketBrokerDefaultRoutingPolicy) ProtoMessage()    {}
func (*PacketBrokerDefaultRoutingPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_1a44242dc5cd678e, []int{11}
}
func (m *PacketBrokerDefaultRoutingPolicy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PacketBrokerDefaultRoutingPolicy.Unmarshal(m, b)
}
func (m *PacketBrokerDefaultRoutingPolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PacketBrokerDefaultRoutingPolicy.Marshal(b, m, deterministic)
}
func (m *PacketBrokerDefaultRoutingPolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PacketBrokerDefaultRoutingPolicy.Merge(m, src)
}
func (m *PacketBrokerDefaultRoutingPolicy) XXX_Size() int {
	return xxx_messageInfo_PacketBrokerDefaultRoutingPolicy.Size(m)
}
func (m *PacketBrokerDefaultRoutingPolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_PacketBrokerDefaultRoutingPolicy.DiscardUnknown(m)
}

var xxx_messageInfo_PacketBrokerDefaultRoutingPolicy proto.InternalMessageInfo

func (m *PacketBrokerDefaultRoutingPolicy) GetUpdatedAt() *types.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *PacketBrokerDefaultRoutingPolicy) GetUplink() *PacketBrokerRoutingPolicyUplink {
	if m != nil {
		return m.Uplink
	}
	return nil
}

func (m *PacketBrokerDefaultRoutingPolicy) GetDownlink() *PacketBrokerRoutingPolicyDownlink {
	if m != nil {
		return m.Downlink
	}
	return nil
}

type PacketBrokerRoutingPolicy struct {
	// Packet Broker identifier of the Forwarder.
	ForwarderId *PacketBrokerNetworkIdentifier `protobuf:"bytes,1,opt,name=forwarder_id,json=forwarderId,proto3" json:"forwarder_id,omitempty"`
	// Packet Broker identifier of the Home Network.
	HomeNetworkId *PacketBrokerNetworkIdentifier `protobuf:"bytes,2,opt,name=home_network_id,json=homeNetworkId,proto3" json:"home_network_id,omitempty"`
	// Timestamp when the policy got last updated.
	UpdatedAt *types.Timestamp `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// Uplink policy.
	Uplink *PacketBrokerRoutingPolicyUplink `protobuf:"bytes,4,opt,name=uplink,proto3" json:"uplink,omitempty"`
	// Downlink policy.
	Downlink             *PacketBrokerRoutingPolicyDownlink `protobuf:"bytes,5,opt,name=downlink,proto3" json:"downlink,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                           `json:"-"`
	XXX_sizecache        int32                              `json:"-"`
}

func (m *PacketBrokerRoutingPolicy) Reset()         { *m = PacketBrokerRoutingPolicy{} }
func (m *PacketBrokerRoutingPolicy) String() string { return proto.CompactTextString(m) }
func (*PacketBrokerRoutingPolicy) ProtoMessage()    {}
func (*PacketBrokerRoutingPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_1a44242dc5cd678e, []int{12}
}
func (m *PacketBrokerRoutingPolicy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PacketBrokerRoutingPolicy.Unmarshal(m, b)
}
func (m *PacketBrokerRoutingPolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PacketBrokerRoutingPolicy.Marshal(b, m, deterministic)
}
func (m *PacketBrokerRoutingPolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PacketBrokerRoutingPolicy.Merge(m, src)
}
func (m *PacketBrokerRoutingPolicy) XXX_Size() int {
	return xxx_messageInfo_PacketBrokerRoutingPolicy.Size(m)
}
func (m *PacketBrokerRoutingPolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_PacketBrokerRoutingPolicy.DiscardUnknown(m)
}

var xxx_messageInfo_PacketBrokerRoutingPolicy proto.InternalMessageInfo

func (m *PacketBrokerRoutingPolicy) GetForwarderId() *PacketBrokerNetworkIdentifier {
	if m != nil {
		return m.ForwarderId
	}
	return nil
}

func (m *PacketBrokerRoutingPolicy) GetHomeNetworkId() *PacketBrokerNetworkIdentifier {
	if m != nil {
		return m.HomeNetworkId
	}
	return nil
}

func (m *PacketBrokerRoutingPolicy) GetUpdatedAt() *types.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *PacketBrokerRoutingPolicy) GetUplink() *PacketBrokerRoutingPolicyUplink {
	if m != nil {
		return m.Uplink
	}
	return nil
}

func (m *PacketBrokerRoutingPolicy) GetDownlink() *PacketBrokerRoutingPolicyDownlink {
	if m != nil {
		return m.Downlink
	}
	return nil
}

type SetPacketBrokerDefaultRoutingPolicyRequest struct {
	// Uplink policy.
	Uplink *PacketBrokerRoutingPolicyUplink `protobuf:"bytes,1,opt,name=uplink,proto3" json:"uplink,omitempty"`
	// Downlink policy.
	Downlink             *PacketBrokerRoutingPolicyDownlink `protobuf:"bytes,2,opt,name=downlink,proto3" json:"downlink,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                           `json:"-"`
	XXX_sizecache        int32                              `json:"-"`
}

func (m *SetPacketBrokerDefaultRoutingPolicyRequest) Reset() {
	*m = SetPacketBrokerDefaultRoutingPolicyRequest{}
}
func (m *SetPacketBrokerDefaultRoutingPolicyRequest) String() string {
	return proto.CompactTextString(m)
}
func (*SetPacketBrokerDefaultRoutingPolicyRequest) ProtoMessage() {}
func (*SetPacketBrokerDefaultRoutingPolicyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1a44242dc5cd678e, []int{13}
}
func (m *SetPacketBrokerDefaultRoutingPolicyRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetPacketBrokerDefaultRoutingPolicyRequest.Unmarshal(m, b)
}
func (m *SetPacketBrokerDefaultRoutingPolicyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetPacketBrokerDefaultRoutingPolicyRequest.Marshal(b, m, deterministic)
}
func (m *SetPacketBrokerDefaultRoutingPolicyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetPacketBrokerDefaultRoutingPolicyRequest.Merge(m, src)
}
func (m *SetPacketBrokerDefaultRoutingPolicyRequest) XXX_Size() int {
	return xxx_messageInfo_SetPacketBrokerDefaultRoutingPolicyRequest.Size(m)
}
func (m *SetPacketBrokerDefaultRoutingPolicyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetPacketBrokerDefaultRoutingPolicyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetPacketBrokerDefaultRoutingPolicyRequest proto.InternalMessageInfo

func (m *SetPacketBrokerDefaultRoutingPolicyRequest) GetUplink() *PacketBrokerRoutingPolicyUplink {
	if m != nil {
		return m.Uplink
	}
	return nil
}

func (m *SetPacketBrokerDefaultRoutingPolicyRequest) GetDownlink() *PacketBrokerRoutingPolicyDownlink {
	if m != nil {
		return m.Downlink
	}
	return nil
}

type ListHomeNetworkRoutingPoliciesRequest struct {
	// Limit the number of results per page.
	Limit uint32 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	// Page number for pagination. 0 is interpreted as 1.
	Page                 uint32   `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListHomeNetworkRoutingPoliciesRequest) Reset()         { *m = ListHomeNetworkRoutingPoliciesRequest{} }
func (m *ListHomeNetworkRoutingPoliciesRequest) String() string { return proto.CompactTextString(m) }
func (*ListHomeNetworkRoutingPoliciesRequest) ProtoMessage()    {}
func (*ListHomeNetworkRoutingPoliciesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1a44242dc5cd678e, []int{14}
}
func (m *ListHomeNetworkRoutingPoliciesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListHomeNetworkRoutingPoliciesRequest.Unmarshal(m, b)
}
func (m *ListHomeNetworkRoutingPoliciesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListHomeNetworkRoutingPoliciesRequest.Marshal(b, m, deterministic)
}
func (m *ListHomeNetworkRoutingPoliciesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListHomeNetworkRoutingPoliciesRequest.Merge(m, src)
}
func (m *ListHomeNetworkRoutingPoliciesRequest) XXX_Size() int {
	return xxx_messageInfo_ListHomeNetworkRoutingPoliciesRequest.Size(m)
}
func (m *ListHomeNetworkRoutingPoliciesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListHomeNetworkRoutingPoliciesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListHomeNetworkRoutingPoliciesRequest proto.InternalMessageInfo

func (m *ListHomeNetworkRoutingPoliciesRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListHomeNetworkRoutingPoliciesRequest) GetPage() uint32 {
	if m != nil {
		return m.Page
	}
	return 0
}

type PacketBrokerRoutingPolicies struct {
	Policies             []*PacketBrokerRoutingPolicy `protobuf:"bytes,1,rep,name=policies,proto3" json:"policies,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *PacketBrokerRoutingPolicies) Reset()         { *m = PacketBrokerRoutingPolicies{} }
func (m *PacketBrokerRoutingPolicies) String() string { return proto.CompactTextString(m) }
func (*PacketBrokerRoutingPolicies) ProtoMessage()    {}
func (*PacketBrokerRoutingPolicies) Descriptor() ([]byte, []int) {
	return fileDescriptor_1a44242dc5cd678e, []int{15}
}
func (m *PacketBrokerRoutingPolicies) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PacketBrokerRoutingPolicies.Unmarshal(m, b)
}
func (m *PacketBrokerRoutingPolicies) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PacketBrokerRoutingPolicies.Marshal(b, m, deterministic)
}
func (m *PacketBrokerRoutingPolicies) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PacketBrokerRoutingPolicies.Merge(m, src)
}
func (m *PacketBrokerRoutingPolicies) XXX_Size() int {
	return xxx_messageInfo_PacketBrokerRoutingPolicies.Size(m)
}
func (m *PacketBrokerRoutingPolicies) XXX_DiscardUnknown() {
	xxx_messageInfo_PacketBrokerRoutingPolicies.DiscardUnknown(m)
}

var xxx_messageInfo_PacketBrokerRoutingPolicies proto.InternalMessageInfo

func (m *PacketBrokerRoutingPolicies) GetPolicies() []*PacketBrokerRoutingPolicy {
	if m != nil {
		return m.Policies
	}
	return nil
}

type SetPacketBrokerRoutingPolicyRequest struct {
	// Packet Broker identifier of the Home Network.
	HomeNetworkId *PacketBrokerNetworkIdentifier `protobuf:"bytes,1,opt,name=home_network_id,json=homeNetworkId,proto3" json:"home_network_id,omitempty"`
	// Uplink policy.
	Uplink *PacketBrokerRoutingPolicyUplink `protobuf:"bytes,2,opt,name=uplink,proto3" json:"uplink,omitempty"`
	// Downlink policy.
	Downlink             *PacketBrokerRoutingPolicyDownlink `protobuf:"bytes,3,opt,name=downlink,proto3" json:"downlink,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                           `json:"-"`
	XXX_sizecache        int32                              `json:"-"`
}

func (m *SetPacketBrokerRoutingPolicyRequest) Reset()         { *m = SetPacketBrokerRoutingPolicyRequest{} }
func (m *SetPacketBrokerRoutingPolicyRequest) String() string { return proto.CompactTextString(m) }
func (*SetPacketBrokerRoutingPolicyRequest) ProtoMessage()    {}
func (*SetPacketBrokerRoutingPolicyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1a44242dc5cd678e, []int{16}
}
func (m *SetPacketBrokerRoutingPolicyRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetPacketBrokerRoutingPolicyRequest.Unmarshal(m, b)
}
func (m *SetPacketBrokerRoutingPolicyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetPacketBrokerRoutingPolicyRequest.Marshal(b, m, deterministic)
}
func (m *SetPacketBrokerRoutingPolicyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetPacketBrokerRoutingPolicyRequest.Merge(m, src)
}
func (m *SetPacketBrokerRoutingPolicyRequest) XXX_Size() int {
	return xxx_messageInfo_SetPacketBrokerRoutingPolicyRequest.Size(m)
}
func (m *SetPacketBrokerRoutingPolicyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetPacketBrokerRoutingPolicyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetPacketBrokerRoutingPolicyRequest proto.InternalMessageInfo

func (m *SetPacketBrokerRoutingPolicyRequest) GetHomeNetworkId() *PacketBrokerNetworkIdentifier {
	if m != nil {
		return m.HomeNetworkId
	}
	return nil
}

func (m *SetPacketBrokerRoutingPolicyRequest) GetUplink() *PacketBrokerRoutingPolicyUplink {
	if m != nil {
		return m.Uplink
	}
	return nil
}

func (m *SetPacketBrokerRoutingPolicyRequest) GetDownlink() *PacketBrokerRoutingPolicyDownlink {
	if m != nil {
		return m.Downlink
	}
	return nil
}

type PacketBrokerGatewayVisibility struct {
	// Show location.
	Location bool `protobuf:"varint,1,opt,name=location,proto3" json:"location,omitempty"`
	// Show antenna placement (indoor/outdoor).
	AntennaPlacement bool `protobuf:"varint,2,opt,name=antenna_placement,json=antennaPlacement,proto3" json:"antenna_placement,omitempty"`
	// Show antenna count.
	AntennaCount bool `protobuf:"varint,3,opt,name=antenna_count,json=antennaCount,proto3" json:"antenna_count,omitempty"`
	// Show whether the gateway produces fine timestamps.
	FineTimestamps bool `protobuf:"varint,4,opt,name=fine_timestamps,json=fineTimestamps,proto3" json:"fine_timestamps,omitempty"`
	// Show contact information.
	ContactInfo bool `protobuf:"varint,5,opt,name=contact_info,json=contactInfo,proto3" json:"contact_info,omitempty"`
	// Show status (online/offline).
	Status bool `protobuf:"varint,6,opt,name=status,proto3" json:"status,omitempty"`
	// Show frequency plan.
	FrequencyPlan bool `protobuf:"varint,8,opt,name=frequency_plan,json=frequencyPlan,proto3" json:"frequency_plan,omitempty"`
	// Show receive and transmission packet rates.
	PacketRates          bool     `protobuf:"varint,9,opt,name=packet_rates,json=packetRates,proto3" json:"packet_rates,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PacketBrokerGatewayVisibility) Reset()         { *m = PacketBrokerGatewayVisibility{} }
func (m *PacketBrokerGatewayVisibility) String() string { return proto.CompactTextString(m) }
func (*PacketBrokerGatewayVisibility) ProtoMessage()    {}
func (*PacketBrokerGatewayVisibility) Descriptor() ([]byte, []int) {
	return fileDescriptor_1a44242dc5cd678e, []int{17}
}
func (m *PacketBrokerGatewayVisibility) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PacketBrokerGatewayVisibility.Unmarshal(m, b)
}
func (m *PacketBrokerGatewayVisibility) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PacketBrokerGatewayVisibility.Marshal(b, m, deterministic)
}
func (m *PacketBrokerGatewayVisibility) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PacketBrokerGatewayVisibility.Merge(m, src)
}
func (m *PacketBrokerGatewayVisibility) XXX_Size() int {
	return xxx_messageInfo_PacketBrokerGatewayVisibility.Size(m)
}
func (m *PacketBrokerGatewayVisibility) XXX_DiscardUnknown() {
	xxx_messageInfo_PacketBrokerGatewayVisibility.DiscardUnknown(m)
}

var xxx_messageInfo_PacketBrokerGatewayVisibility proto.InternalMessageInfo

func (m *PacketBrokerGatewayVisibility) GetLocation() bool {
	if m != nil {
		return m.Location
	}
	return false
}

func (m *PacketBrokerGatewayVisibility) GetAntennaPlacement() bool {
	if m != nil {
		return m.AntennaPlacement
	}
	return false
}

func (m *PacketBrokerGatewayVisibility) GetAntennaCount() bool {
	if m != nil {
		return m.AntennaCount
	}
	return false
}

func (m *PacketBrokerGatewayVisibility) GetFineTimestamps() bool {
	if m != nil {
		return m.FineTimestamps
	}
	return false
}

func (m *PacketBrokerGatewayVisibility) GetContactInfo() bool {
	if m != nil {
		return m.ContactInfo
	}
	return false
}

func (m *PacketBrokerGatewayVisibility) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

func (m *PacketBrokerGatewayVisibility) GetFrequencyPlan() bool {
	if m != nil {
		return m.FrequencyPlan
	}
	return false
}

func (m *PacketBrokerGatewayVisibility) GetPacketRates() bool {
	if m != nil {
		return m.PacketRates
	}
	return false
}

type PacketBrokerDefaultGatewayVisibility struct {
	// Timestamp when the policy got last updated.
	UpdatedAt            *types.Timestamp               `protobuf:"bytes,1,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Visibility           *PacketBrokerGatewayVisibility `protobuf:"bytes,2,opt,name=visibility,proto3" json:"visibility,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *PacketBrokerDefaultGatewayVisibility) Reset()         { *m = PacketBrokerDefaultGatewayVisibility{} }
func (m *PacketBrokerDefaultGatewayVisibility) String() string { return proto.CompactTextString(m) }
func (*PacketBrokerDefaultGatewayVisibility) ProtoMessage()    {}
func (*PacketBrokerDefaultGatewayVisibility) Descriptor() ([]byte, []int) {
	return fileDescriptor_1a44242dc5cd678e, []int{18}
}
func (m *PacketBrokerDefaultGatewayVisibility) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PacketBrokerDefaultGatewayVisibility.Unmarshal(m, b)
}
func (m *PacketBrokerDefaultGatewayVisibility) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PacketBrokerDefaultGatewayVisibility.Marshal(b, m, deterministic)
}
func (m *PacketBrokerDefaultGatewayVisibility) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PacketBrokerDefaultGatewayVisibility.Merge(m, src)
}
func (m *PacketBrokerDefaultGatewayVisibility) XXX_Size() int {
	return xxx_messageInfo_PacketBrokerDefaultGatewayVisibility.Size(m)
}
func (m *PacketBrokerDefaultGatewayVisibility) XXX_DiscardUnknown() {
	xxx_messageInfo_PacketBrokerDefaultGatewayVisibility.DiscardUnknown(m)
}

var xxx_messageInfo_PacketBrokerDefaultGatewayVisibility proto.InternalMessageInfo

func (m *PacketBrokerDefaultGatewayVisibility) GetUpdatedAt() *types.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *PacketBrokerDefaultGatewayVisibility) GetVisibility() *PacketBrokerGatewayVisibility {
	if m != nil {
		return m.Visibility
	}
	return nil
}

type SetPacketBrokerDefaultGatewayVisibilityRequest struct {
	Visibility           *PacketBrokerGatewayVisibility `protobuf:"bytes,1,opt,name=visibility,proto3" json:"visibility,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *SetPacketBrokerDefaultGatewayVisibilityRequest) Reset() {
	*m = SetPacketBrokerDefaultGatewayVisibilityRequest{}
}
func (m *SetPacketBrokerDefaultGatewayVisibilityRequest) String() string {
	return proto.CompactTextString(m)
}
func (*SetPacketBrokerDefaultGatewayVisibilityRequest) ProtoMessage() {}
func (*SetPacketBrokerDefaultGatewayVisibilityRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1a44242dc5cd678e, []int{19}
}
func (m *SetPacketBrokerDefaultGatewayVisibilityRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetPacketBrokerDefaultGatewayVisibilityRequest.Unmarshal(m, b)
}
func (m *SetPacketBrokerDefaultGatewayVisibilityRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetPacketBrokerDefaultGatewayVisibilityRequest.Marshal(b, m, deterministic)
}
func (m *SetPacketBrokerDefaultGatewayVisibilityRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetPacketBrokerDefaultGatewayVisibilityRequest.Merge(m, src)
}
func (m *SetPacketBrokerDefaultGatewayVisibilityRequest) XXX_Size() int {
	return xxx_messageInfo_SetPacketBrokerDefaultGatewayVisibilityRequest.Size(m)
}
func (m *SetPacketBrokerDefaultGatewayVisibilityRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetPacketBrokerDefaultGatewayVisibilityRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetPacketBrokerDefaultGatewayVisibilityRequest proto.InternalMessageInfo

func (m *SetPacketBrokerDefaultGatewayVisibilityRequest) GetVisibility() *PacketBrokerGatewayVisibility {
	if m != nil {
		return m.Visibility
	}
	return nil
}

type ListPacketBrokerNetworksRequest struct {
	// Limit the number of results per page.
	Limit uint32 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	// Page number for pagination. 0 is interpreted as 1.
	Page uint32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	// If true, list only the Forwarders and Home Networks with whom a routing policy has been defined in either direction.
	WithRoutingPolicy bool `protobuf:"varint,3,opt,name=with_routing_policy,json=withRoutingPolicy,proto3" json:"with_routing_policy,omitempty"`
	// Filter by tenant ID.
	TenantIdContains string `protobuf:"bytes,4,opt,name=tenant_id_contains,json=tenantIdContains,proto3" json:"tenant_id_contains,omitempty"`
	// Filter by name.
	NameContains         string   `protobuf:"bytes,5,opt,name=name_contains,json=nameContains,proto3" json:"name_contains,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListPacketBrokerNetworksRequest) Reset()         { *m = ListPacketBrokerNetworksRequest{} }
func (m *ListPacketBrokerNetworksRequest) String() string { return proto.CompactTextString(m) }
func (*ListPacketBrokerNetworksRequest) ProtoMessage()    {}
func (*ListPacketBrokerNetworksRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1a44242dc5cd678e, []int{20}
}
func (m *ListPacketBrokerNetworksRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListPacketBrokerNetworksRequest.Unmarshal(m, b)
}
func (m *ListPacketBrokerNetworksRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListPacketBrokerNetworksRequest.Marshal(b, m, deterministic)
}
func (m *ListPacketBrokerNetworksRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListPacketBrokerNetworksRequest.Merge(m, src)
}
func (m *ListPacketBrokerNetworksRequest) XXX_Size() int {
	return xxx_messageInfo_ListPacketBrokerNetworksRequest.Size(m)
}
func (m *ListPacketBrokerNetworksRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListPacketBrokerNetworksRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListPacketBrokerNetworksRequest proto.InternalMessageInfo

func (m *ListPacketBrokerNetworksRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListPacketBrokerNetworksRequest) GetPage() uint32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *ListPacketBrokerNetworksRequest) GetWithRoutingPolicy() bool {
	if m != nil {
		return m.WithRoutingPolicy
	}
	return false
}

func (m *ListPacketBrokerNetworksRequest) GetTenantIdContains() string {
	if m != nil {
		return m.TenantIdContains
	}
	return ""
}

func (m *ListPacketBrokerNetworksRequest) GetNameContains() string {
	if m != nil {
		return m.NameContains
	}
	return ""
}

type ListPacketBrokerHomeNetworksRequest struct {
	// Limit the number of results per page.
	Limit uint32 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	// Page number for pagination. 0 is interpreted as 1.
	Page uint32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	// Filter by tenant ID.
	TenantIdContains string `protobuf:"bytes,3,opt,name=tenant_id_contains,json=tenantIdContains,proto3" json:"tenant_id_contains,omitempty"`
	// Filter by name.
	NameContains         string   `protobuf:"bytes,4,opt,name=name_contains,json=nameContains,proto3" json:"name_contains,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListPacketBrokerHomeNetworksRequest) Reset()         { *m = ListPacketBrokerHomeNetworksRequest{} }
func (m *ListPacketBrokerHomeNetworksRequest) String() string { return proto.CompactTextString(m) }
func (*ListPacketBrokerHomeNetworksRequest) ProtoMessage()    {}
func (*ListPacketBrokerHomeNetworksRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1a44242dc5cd678e, []int{21}
}
func (m *ListPacketBrokerHomeNetworksRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListPacketBrokerHomeNetworksRequest.Unmarshal(m, b)
}
func (m *ListPacketBrokerHomeNetworksRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListPacketBrokerHomeNetworksRequest.Marshal(b, m, deterministic)
}
func (m *ListPacketBrokerHomeNetworksRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListPacketBrokerHomeNetworksRequest.Merge(m, src)
}
func (m *ListPacketBrokerHomeNetworksRequest) XXX_Size() int {
	return xxx_messageInfo_ListPacketBrokerHomeNetworksRequest.Size(m)
}
func (m *ListPacketBrokerHomeNetworksRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListPacketBrokerHomeNetworksRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListPacketBrokerHomeNetworksRequest proto.InternalMessageInfo

func (m *ListPacketBrokerHomeNetworksRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListPacketBrokerHomeNetworksRequest) GetPage() uint32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *ListPacketBrokerHomeNetworksRequest) GetTenantIdContains() string {
	if m != nil {
		return m.TenantIdContains
	}
	return ""
}

func (m *ListPacketBrokerHomeNetworksRequest) GetNameContains() string {
	if m != nil {
		return m.NameContains
	}
	return ""
}

type ListForwarderRoutingPoliciesRequest struct {
	// Packet Broker identifier of the Home Network.
	HomeNetworkId *PacketBrokerNetworkIdentifier `protobuf:"bytes,1,opt,name=home_network_id,json=homeNetworkId,proto3" json:"home_network_id,omitempty"`
	// Limit the number of results per page.
	Limit uint32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	// Page number for pagination. 0 is interpreted as 1.
	Page                 uint32   `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListForwarderRoutingPoliciesRequest) Reset()         { *m = ListForwarderRoutingPoliciesRequest{} }
func (m *ListForwarderRoutingPoliciesRequest) String() string { return proto.CompactTextString(m) }
func (*ListForwarderRoutingPoliciesRequest) ProtoMessage()    {}
func (*ListForwarderRoutingPoliciesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1a44242dc5cd678e, []int{22}
}
func (m *ListForwarderRoutingPoliciesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListForwarderRoutingPoliciesRequest.Unmarshal(m, b)
}
func (m *ListForwarderRoutingPoliciesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListForwarderRoutingPoliciesRequest.Marshal(b, m, deterministic)
}
func (m *ListForwarderRoutingPoliciesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListForwarderRoutingPoliciesRequest.Merge(m, src)
}
func (m *ListForwarderRoutingPoliciesRequest) XXX_Size() int {
	return xxx_messageInfo_ListForwarderRoutingPoliciesRequest.Size(m)
}
func (m *ListForwarderRoutingPoliciesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListForwarderRoutingPoliciesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListForwarderRoutingPoliciesRequest proto.InternalMessageInfo

func (m *ListForwarderRoutingPoliciesRequest) GetHomeNetworkId() *PacketBrokerNetworkIdentifier {
	if m != nil {
		return m.HomeNetworkId
	}
	return nil
}

func (m *ListForwarderRoutingPoliciesRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListForwarderRoutingPoliciesRequest) GetPage() uint32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func init() {
	proto.RegisterType((*PacketBrokerGateway)(nil), "ttn.lorawan.v3.PacketBrokerGateway")
	golang_proto.RegisterType((*PacketBrokerGateway)(nil), "ttn.lorawan.v3.PacketBrokerGateway")
	proto.RegisterType((*PacketBrokerGateway_GatewayIdentifiers)(nil), "ttn.lorawan.v3.PacketBrokerGateway.GatewayIdentifiers")
	golang_proto.RegisterType((*PacketBrokerGateway_GatewayIdentifiers)(nil), "ttn.lorawan.v3.PacketBrokerGateway.GatewayIdentifiers")
	proto.RegisterType((*UpdatePacketBrokerGatewayRequest)(nil), "ttn.lorawan.v3.UpdatePacketBrokerGatewayRequest")
	golang_proto.RegisterType((*UpdatePacketBrokerGatewayRequest)(nil), "ttn.lorawan.v3.UpdatePacketBrokerGatewayRequest")
	proto.RegisterType((*UpdatePacketBrokerGatewayResponse)(nil), "ttn.lorawan.v3.UpdatePacketBrokerGatewayResponse")
	golang_proto.RegisterType((*UpdatePacketBrokerGatewayResponse)(nil), "ttn.lorawan.v3.UpdatePacketBrokerGatewayResponse")
	proto.RegisterType((*PacketBrokerNetworkIdentifier)(nil), "ttn.lorawan.v3.PacketBrokerNetworkIdentifier")
	golang_proto.RegisterType((*PacketBrokerNetworkIdentifier)(nil), "ttn.lorawan.v3.PacketBrokerNetworkIdentifier")
	proto.RegisterType((*PacketBrokerDevAddrBlock)(nil), "ttn.lorawan.v3.PacketBrokerDevAddrBlock")
	golang_proto.RegisterType((*PacketBrokerDevAddrBlock)(nil), "ttn.lorawan.v3.PacketBrokerDevAddrBlock")
	proto.RegisterType((*PacketBrokerNetwork)(nil), "ttn.lorawan.v3.PacketBrokerNetwork")
	golang_proto.RegisterType((*PacketBrokerNetwork)(nil), "ttn.lorawan.v3.PacketBrokerNetwork")
	proto.RegisterType((*PacketBrokerNetworks)(nil), "ttn.lorawan.v3.PacketBrokerNetworks")
	golang_proto.RegisterType((*PacketBrokerNetworks)(nil), "ttn.lorawan.v3.PacketBrokerNetworks")
	proto.RegisterType((*PacketBrokerInfo)(nil), "ttn.lorawan.v3.PacketBrokerInfo")
	golang_proto.RegisterType((*PacketBrokerInfo)(nil), "ttn.lorawan.v3.PacketBrokerInfo")
	proto.RegisterType((*PacketBrokerRegisterRequest)(nil), "ttn.lorawan.v3.PacketBrokerRegisterRequest")
	golang_proto.RegisterType((*PacketBrokerRegisterRequest)(nil), "ttn.lorawan.v3.PacketBrokerRegisterRequest")
	proto.RegisterType((*PacketBrokerRoutingPolicyUplink)(nil), "ttn.lorawan.v3.PacketBrokerRoutingPolicyUplink")
	golang_proto.RegisterType((*PacketBrokerRoutingPolicyUplink)(nil), "ttn.lorawan.v3.PacketBrokerRoutingPolicyUplink")
	proto.RegisterType((*PacketBrokerRoutingPolicyDownlink)(nil), "ttn.lorawan.v3.PacketBrokerRoutingPolicyDownlink")
	golang_proto.RegisterType((*PacketBrokerRoutingPolicyDownlink)(nil), "ttn.lorawan.v3.PacketBrokerRoutingPolicyDownlink")
	proto.RegisterType((*PacketBrokerDefaultRoutingPolicy)(nil), "ttn.lorawan.v3.PacketBrokerDefaultRoutingPolicy")
	golang_proto.RegisterType((*PacketBrokerDefaultRoutingPolicy)(nil), "ttn.lorawan.v3.PacketBrokerDefaultRoutingPolicy")
	proto.RegisterType((*PacketBrokerRoutingPolicy)(nil), "ttn.lorawan.v3.PacketBrokerRoutingPolicy")
	golang_proto.RegisterType((*PacketBrokerRoutingPolicy)(nil), "ttn.lorawan.v3.PacketBrokerRoutingPolicy")
	proto.RegisterType((*SetPacketBrokerDefaultRoutingPolicyRequest)(nil), "ttn.lorawan.v3.SetPacketBrokerDefaultRoutingPolicyRequest")
	golang_proto.RegisterType((*SetPacketBrokerDefaultRoutingPolicyRequest)(nil), "ttn.lorawan.v3.SetPacketBrokerDefaultRoutingPolicyRequest")
	proto.RegisterType((*ListHomeNetworkRoutingPoliciesRequest)(nil), "ttn.lorawan.v3.ListHomeNetworkRoutingPoliciesRequest")
	golang_proto.RegisterType((*ListHomeNetworkRoutingPoliciesRequest)(nil), "ttn.lorawan.v3.ListHomeNetworkRoutingPoliciesRequest")
	proto.RegisterType((*PacketBrokerRoutingPolicies)(nil), "ttn.lorawan.v3.PacketBrokerRoutingPolicies")
	golang_proto.RegisterType((*PacketBrokerRoutingPolicies)(nil), "ttn.lorawan.v3.PacketBrokerRoutingPolicies")
	proto.RegisterType((*SetPacketBrokerRoutingPolicyRequest)(nil), "ttn.lorawan.v3.SetPacketBrokerRoutingPolicyRequest")
	golang_proto.RegisterType((*SetPacketBrokerRoutingPolicyRequest)(nil), "ttn.lorawan.v3.SetPacketBrokerRoutingPolicyRequest")
	proto.RegisterType((*PacketBrokerGatewayVisibility)(nil), "ttn.lorawan.v3.PacketBrokerGatewayVisibility")
	golang_proto.RegisterType((*PacketBrokerGatewayVisibility)(nil), "ttn.lorawan.v3.PacketBrokerGatewayVisibility")
	proto.RegisterType((*PacketBrokerDefaultGatewayVisibility)(nil), "ttn.lorawan.v3.PacketBrokerDefaultGatewayVisibility")
	golang_proto.RegisterType((*PacketBrokerDefaultGatewayVisibility)(nil), "ttn.lorawan.v3.PacketBrokerDefaultGatewayVisibility")
	proto.RegisterType((*SetPacketBrokerDefaultGatewayVisibilityRequest)(nil), "ttn.lorawan.v3.SetPacketBrokerDefaultGatewayVisibilityRequest")
	golang_proto.RegisterType((*SetPacketBrokerDefaultGatewayVisibilityRequest)(nil), "ttn.lorawan.v3.SetPacketBrokerDefaultGatewayVisibilityRequest")
	proto.RegisterType((*ListPacketBrokerNetworksRequest)(nil), "ttn.lorawan.v3.ListPacketBrokerNetworksRequest")
	golang_proto.RegisterType((*ListPacketBrokerNetworksRequest)(nil), "ttn.lorawan.v3.ListPacketBrokerNetworksRequest")
	proto.RegisterType((*ListPacketBrokerHomeNetworksRequest)(nil), "ttn.lorawan.v3.ListPacketBrokerHomeNetworksRequest")
	golang_proto.RegisterType((*ListPacketBrokerHomeNetworksRequest)(nil), "ttn.lorawan.v3.ListPacketBrokerHomeNetworksRequest")
	proto.RegisterType((*ListForwarderRoutingPoliciesRequest)(nil), "ttn.lorawan.v3.ListForwarderRoutingPoliciesRequest")
	golang_proto.RegisterType((*ListForwarderRoutingPoliciesRequest)(nil), "ttn.lorawan.v3.ListForwarderRoutingPoliciesRequest")
}

func init() {
	proto.RegisterFile("lorawan-stack/api/packetbrokeragent.proto", fileDescriptor_1a44242dc5cd678e)
}
func init() {
	golang_proto.RegisterFile("lorawan-stack/api/packetbrokeragent.proto", fileDescriptor_1a44242dc5cd678e)
}

var fileDescriptor_1a44242dc5cd678e = []byte{
	// 2516 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x59, 0x4d, 0x6c, 0xdc, 0xc6,
	0xf5, 0x0f, 0x77, 0xf5, 0xb1, 0x7a, 0xd2, 0x4a, 0xf2, 0x44, 0xd6, 0x9f, 0x5e, 0xc5, 0x92, 0x4c,
	0x49, 0x89, 0x2c, 0x47, 0xbb, 0xf6, 0x5a, 0xce, 0xbf, 0x36, 0x9a, 0xba, 0x5a, 0xcb, 0x56, 0x94,
	0xc6, 0x89, 0x4c, 0x45, 0x76, 0x61, 0xc3, 0x61, 0x47, 0xe4, 0xec, 0x8a, 0x11, 0x97, 0x64, 0xc8,
	0x59, 0xc9, 0x8a, 0x63, 0x14, 0x28, 0x7a, 0x49, 0x4e, 0x85, 0x5b, 0xb4, 0x05, 0x7a, 0x28, 0x90,
	0x43, 0xd0, 0xf4, 0xd2, 0x5e, 0x8b, 0x16, 0x45, 0xaf, 0x05, 0x7a, 0x6a, 0x51, 0xa0, 0xed, 0xa1,
	0x87, 0xa4, 0x05, 0x82, 0x9e, 0x8a, 0x02, 0xbd, 0xe8, 0x54, 0x70, 0x38, 0xe4, 0x92, 0xcb, 0xdd,
	0x15, 0x25, 0x39, 0x27, 0x2d, 0x67, 0xde, 0x7b, 0xf3, 0x7b, 0x1f, 0xf3, 0x3e, 0x46, 0x70, 0xde,
	0xb0, 0x1c, 0xbc, 0x87, 0xcd, 0x45, 0x97, 0x62, 0x75, 0xa7, 0x84, 0x6d, 0xbd, 0x64, 0x63, 0x75,
	0x87, 0xd0, 0x2d, 0xc7, 0xda, 0x21, 0x0e, 0xae, 0x11, 0x93, 0x16, 0x6d, 0xc7, 0xa2, 0x16, 0x1a,
	0xa6, 0xd4, 0x2c, 0x72, 0xf2, 0xe2, 0xee, 0xe5, 0xc2, 0x72, 0x4d, 0xa7, 0xdb, 0x8d, 0xad, 0xa2,
	0x6a, 0xd5, 0x4b, 0xc4, 0xdc, 0xb5, 0xf6, 0x6d, 0xc7, 0x7a, 0xb4, 0x5f, 0x62, 0xc4, 0xea, 0x62,
	0x8d, 0x98, 0x8b, 0xbb, 0xd8, 0xd0, 0x35, 0x4c, 0x49, 0x29, 0xf1, 0xc3, 0x17, 0x59, 0x58, 0x8c,
	0x88, 0xa8, 0x59, 0x35, 0xcb, 0x67, 0xde, 0x6a, 0x54, 0xd9, 0x17, 0xfb, 0x60, 0xbf, 0x38, 0xf9,
	0x0b, 0x35, 0xcb, 0xaa, 0x19, 0x84, 0xa1, 0xc4, 0xa6, 0x69, 0x51, 0x4c, 0x75, 0xcb, 0x74, 0xf9,
	0xee, 0x24, 0xdf, 0x0d, 0x65, 0x68, 0x0d, 0x87, 0x11, 0xf0, 0xfd, 0x89, 0xd6, 0x7d, 0x52, 0xb7,
	0xe9, 0x3e, 0xdf, 0x9c, 0x6e, 0xdd, 0xac, 0xea, 0xc4, 0xd0, 0x94, 0x3a, 0x76, 0x77, 0x38, 0xc5,
	0x54, 0x2b, 0x05, 0xd5, 0xeb, 0xc4, 0xa5, 0xb8, 0x6e, 0x77, 0x3a, 0x7f, 0xcf, 0xc1, 0xb6, 0x4d,
	0x9c, 0x00, 0xdf, 0x6c, 0xd2, 0xd4, 0xaa, 0x65, 0x52, 0xac, 0x52, 0x45, 0x37, 0xab, 0x81, 0x8e,
	0x53, 0x49, 0xaa, 0x1a, 0xa6, 0x64, 0x0f, 0x07, 0x48, 0xa5, 0x24, 0x01, 0x31, 0x35, 0x45, 0x23,
	0xbb, 0xba, 0x1a, 0xd8, 0x75, 0x26, 0x49, 0xa3, 0x6b, 0xc4, 0xa4, 0x7a, 0x55, 0x6f, 0xe2, 0x99,
	0x4e, 0x12, 0xd5, 0x89, 0xeb, 0xe2, 0x1a, 0xe1, 0x14, 0xd2, 0xaf, 0xfa, 0xe1, 0xf9, 0x75, 0x16,
	0x0d, 0x15, 0x16, 0x0d, 0xab, 0x3e, 0x10, 0x24, 0x43, 0x56, 0xd7, 0x5c, 0x51, 0x98, 0x16, 0xe6,
	0x07, 0xcb, 0xaf, 0x14, 0xe3, 0x71, 0x51, 0x6c, 0xc3, 0x51, 0xe4, 0x7f, 0xd7, 0x9a, 0x20, 0x2a,
	0xb9, 0x83, 0x4a, 0xef, 0x47, 0x42, 0x66, 0x54, 0x90, 0x3d, 0x61, 0xe8, 0x75, 0x18, 0x8a, 0x5a,
	0x43, 0xec, 0x9f, 0xce, 0xce, 0x0f, 0x96, 0x27, 0x5a, 0x85, 0xdf, 0xf0, 0x69, 0xd6, 0xcc, 0xaa,
	0x55, 0x81, 0x83, 0x4a, 0xef, 0x53, 0x21, 0x33, 0x0a, 0xa2, 0x20, 0x0f, 0xaa, 0xcd, 0x0d, 0xa4,
	0xc1, 0x38, 0xd6, 0xea, 0xba, 0xa9, 0xbb, 0xd4, 0x8b, 0x80, 0x5d, 0xa2, 0xf0, 0x5d, 0x11, 0x18,
	0xe4, 0xc5, 0x56, 0xa9, 0x6f, 0x39, 0x35, 0x6c, 0xea, 0xef, 0xb3, 0x68, 0x79, 0xcb, 0xd9, 0x74,
	0x89, 0x13, 0x41, 0x2a, 0x9f, 0x8e, 0x0b, 0xe3, 0x10, 0xd0, 0x7d, 0x38, 0x45, 0x89, 0xba, 0x6d,
	0xea, 0x2a, 0x36, 0xc2, 0x03, 0x06, 0x8f, 0x73, 0xc0, 0x68, 0x28, 0x27, 0x90, 0xbd, 0x02, 0x39,
	0x6c, 0x52, 0x62, 0x9a, 0xd8, 0x15, 0xf3, 0xcc, 0x12, 0x93, 0xad, 0x22, 0xb9, 0x49, 0x97, 0x7d,
	0x32, 0x66, 0x4e, 0xcf, 0x18, 0x39, 0x39, 0xe4, 0x44, 0x33, 0x90, 0x77, 0x29, 0xa6, 0x0d, 0x57,
	0xb1, 0x1b, 0x5b, 0x86, 0xae, 0x8a, 0xc3, 0xd3, 0xc2, 0x7c, 0x4e, 0x1e, 0xf2, 0x17, 0xd7, 0xd9,
	0x1a, 0x7a, 0x09, 0x46, 0x0c, 0x4b, 0x65, 0xc8, 0x02, 0xb2, 0x11, 0x46, 0x36, 0x1c, 0x2c, 0x73,
	0xc2, 0xaf, 0x02, 0xaa, 0x3a, 0xe4, 0xbd, 0x06, 0x31, 0xd5, 0x7d, 0xc5, 0x36, 0xb0, 0xa9, 0x78,
	0x41, 0x30, 0x36, 0x9d, 0x9d, 0x1f, 0xa8, 0x0c, 0x1f, 0x54, 0x06, 0x9f, 0x0a, 0xb9, 0xd1, 0x9c,
	0xd4, 0xe3, 0x64, 0xc4, 0xaf, 0xcb, 0xa3, 0x21, 0xe5, 0xba, 0x81, 0xcd, 0x35, 0xcd, 0x45, 0xaf,
	0xc2, 0x44, 0xc3, 0xf6, 0xae, 0xbe, 0x12, 0x9e, 0x56, 0x75, 0xac, 0xba, 0xe2, 0x63, 0x11, 0x4f,
	0xb3, 0x23, 0x45, 0x9f, 0xe4, 0x0d, 0x4e, 0x71, 0xcb, 0xb1, 0xea, 0x1b, 0x6c, 0x1f, 0x8d, 0x43,
	0x9f, 0x65, 0x1a, 0xba, 0x49, 0xc4, 0x17, 0x18, 0x25, 0xff, 0x42, 0x4b, 0xd0, 0xef, 0x3c, 0x52,
	0x1c, 0x4c, 0x89, 0x78, 0x96, 0x99, 0x7e, 0xa2, 0xe8, 0x5f, 0xc3, 0x62, 0x70, 0x0d, 0x8b, 0xb7,
	0x0c, 0x0b, 0xd3, 0xbb, 0xd8, 0x68, 0x10, 0xb9, 0xcf, 0x79, 0x24, 0x63, 0xca, 0xb8, 0x28, 0xe7,
	0x9a, 0x4c, 0xc1, 0x45, 0x19, 0x57, 0xe1, 0xe7, 0x02, 0xa0, 0x64, 0x20, 0xa3, 0x55, 0x00, 0x7e,
	0x43, 0x15, 0x5d, 0x63, 0x97, 0x62, 0xa0, 0x32, 0x7f, 0x50, 0x99, 0x73, 0x66, 0xc4, 0xd9, 0xf2,
	0xd4, 0x3b, 0x0f, 0xf0, 0xe2, 0xfb, 0x17, 0x17, 0xaf, 0x3e, 0x9c, 0xbf, 0x7e, 0xed, 0x81, 0xb2,
	0xf8, 0xf0, 0x7a, 0xf0, 0x7d, 0xfe, 0x71, 0xf9, 0xe5, 0x27, 0xb3, 0xf2, 0x40, 0x2d, 0x90, 0x88,
	0xbe, 0x01, 0x59, 0xd2, 0xd0, 0xc5, 0xcc, 0xb4, 0x30, 0x3f, 0x54, 0xb9, 0xfa, 0xb7, 0xbf, 0x4f,
	0x5d, 0xa9, 0x59, 0x45, 0xba, 0x4d, 0xe8, 0xb6, 0x6e, 0xd6, 0xdc, 0xa2, 0x49, 0xe8, 0x9e, 0xe5,
	0xec, 0x94, 0xe2, 0xd7, 0x76, 0xf7, 0x72, 0xc9, 0xde, 0xa9, 0x95, 0xe8, 0xbe, 0x4d, 0xdc, 0xe2,
	0xcd, 0xcd, 0xb5, 0x57, 0x96, 0x64, 0x4f, 0x8a, 0xf4, 0x89, 0x00, 0xd3, 0x9b, 0xcc, 0x9a, 0x6d,
	0xee, 0xa3, 0xec, 0x39, 0xc7, 0xa5, 0x68, 0x15, 0xfa, 0xf9, 0xf1, 0xfc, 0x32, 0xcf, 0xa4, 0xb8,
	0xcc, 0x91, 0x9b, 0x1b, 0x70, 0xa3, 0xab, 0x00, 0xcd, 0x84, 0x29, 0xf6, 0x32, 0x59, 0x85, 0xa4,
	0x4d, 0x3d, 0x92, 0xdb, 0xd8, 0xdd, 0x91, 0x07, 0xaa, 0xc1, 0x4f, 0xe9, 0x21, 0x9c, 0xeb, 0x82,
	0xd3, 0xb5, 0x2d, 0xd3, 0x25, 0xe8, 0x2b, 0x00, 0xbe, 0xc3, 0x15, 0x4a, 0x0d, 0x8e, 0xf5, 0x4c,
	0x42, 0xfe, 0x0a, 0x4f, 0xf8, 0xf2, 0x80, 0x4f, 0xfc, 0x36, 0x35, 0xa4, 0x6f, 0xc3, 0xd9, 0xa8,
	0xe0, 0x37, 0x7d, 0x23, 0x36, 0xfd, 0x87, 0x4e, 0x43, 0x9f, 0x49, 0x68, 0xe0, 0xba, 0xbc, 0xdc,
	0x6b, 0x12, 0xba, 0xa6, 0xa1, 0x55, 0x18, 0xa0, 0xc4, 0xc4, 0x26, 0xdb, 0xc9, 0x30, 0xa7, 0x2e,
	0x1c, 0x54, 0x5e, 0x72, 0xe6, 0xc4, 0xd9, 0xf2, 0xb9, 0x98, 0x53, 0x13, 0x3e, 0xfd, 0xe0, 0x9d,
	0x59, 0x39, 0xe7, 0x33, 0xaf, 0x69, 0xd2, 0x8f, 0x05, 0x10, 0xa3, 0x08, 0x56, 0xc8, 0xee, 0xb2,
	0xa6, 0x39, 0x15, 0xc3, 0x52, 0x77, 0xd0, 0x4d, 0x18, 0xd1, 0xc8, 0xae, 0x82, 0x35, 0xcd, 0x51,
	0x6c, 0x87, 0x54, 0xf5, 0x47, 0x5c, 0xb9, 0xb3, 0xad, 0x8e, 0xe0, 0x6c, 0xeb, 0x8c, 0x48, 0xce,
	0x6b, 0xd1, 0x4f, 0x74, 0x05, 0xfe, 0x6f, 0xdb, 0xaa, 0x13, 0x85, 0x87, 0x88, 0xa2, 0x1a, 0x0d,
	0x97, 0x12, 0x27, 0x84, 0x2e, 0x8f, 0x79, 0xdb, 0x5c, 0xf7, 0x1b, 0xfe, 0xe6, 0x9a, 0x26, 0xfd,
	0x26, 0x1b, 0xcf, 0xef, 0x9c, 0x00, 0xbd, 0x0a, 0x19, 0x6e, 0x8e, 0x36, 0xa9, 0xac, 0xab, 0x35,
	0xe5, 0x8c, 0xae, 0x21, 0x04, 0x3d, 0x26, 0xae, 0x13, 0x7e, 0x34, 0xfb, 0x8d, 0xd6, 0x23, 0x8a,
	0x6e, 0x79, 0xaa, 0xbb, 0x62, 0x96, 0xe5, 0xb5, 0xf9, 0x6e, 0xf2, 0xa3, 0xb6, 0x0a, 0x75, 0x66,
	0x5f, 0xc9, 0x82, 0xd1, 0x73, 0x82, 0x82, 0x21, 0x77, 0x2c, 0x18, 0x7d, 0x3c, 0x3d, 0x74, 0x96,
	0xda, 0xa9, 0x3c, 0xbc, 0xd6, 0xae, 0x3c, 0xf4, 0x1f, 0x2e, 0x2e, 0x59, 0x0c, 0xc6, 0xa1, 0xcf,
	0xd0, 0x5d, 0x4a, 0x34, 0x76, 0xb1, 0x72, 0x32, 0xff, 0x92, 0xee, 0xc1, 0x58, 0x1b, 0x67, 0xb8,
	0xe8, 0x3a, 0xe4, 0x78, 0x20, 0x78, 0x35, 0x3a, 0x7b, 0xd8, 0xb5, 0xe6, 0x7c, 0x72, 0xc8, 0x24,
	0xfd, 0x53, 0x80, 0xd1, 0x28, 0x05, 0xb3, 0xd1, 0x2a, 0x0c, 0x39, 0xa4, 0xc6, 0xd5, 0xb4, 0xcc,
	0x34, 0x09, 0x23, 0x90, 0x1c, 0x63, 0x44, 0x17, 0xe0, 0x54, 0xd5, 0x72, 0xf6, 0xb0, 0xa3, 0x11,
	0x47, 0x21, 0x26, 0xde, 0x32, 0x88, 0x1f, 0xa6, 0x39, 0x79, 0x34, 0xdc, 0xb8, 0xe9, 0xaf, 0xa3,
	0x8b, 0x30, 0x16, 0x8b, 0xec, 0x80, 0x3e, 0xcb, 0xe8, 0x51, 0x24, 0xac, 0x03, 0x8e, 0xf3, 0x30,
	0xea, 0x1f, 0x17, 0x91, 0xde, 0xc3, 0xa8, 0x47, 0x82, 0x75, 0x4e, 0x2a, 0xdd, 0x81, 0x89, 0x28,
	0x5c, 0x99, 0x6f, 0x07, 0xd9, 0xb1, 0x1c, 0xda, 0x5d, 0xe8, 0x90, 0xd0, 0x2a, 0x96, 0x65, 0xf0,
	0x1a, 0xc1, 0x7d, 0xf2, 0x67, 0x01, 0xa6, 0x62, 0x32, 0xad, 0x06, 0xd5, 0xcd, 0xda, 0xba, 0x65,
	0xe8, 0xea, 0xfe, 0xa6, 0x6d, 0xe8, 0xe6, 0x0e, 0x3a, 0x07, 0x43, 0xef, 0x5a, 0xba, 0xa9, 0x38,
	0xfe, 0x39, 0x4c, 0x7a, 0x4e, 0x1e, 0xf4, 0xd6, 0x82, 0xa3, 0xcf, 0x40, 0xae, 0x8e, 0x55, 0x45,
	0xc3, 0x14, 0x73, 0xd3, 0xf4, 0xd7, 0xb1, 0xba, 0x82, 0x29, 0xf6, 0xf4, 0xc3, 0xb6, 0x6d, 0xe8,
	0xbc, 0x88, 0x32, 0x12, 0xdf, 0x1a, 0x23, 0x91, 0x75, 0x46, 0x3a, 0x07, 0xc3, 0xae, 0x5e, 0x33,
	0xb1, 0xa1, 0xbc, 0xd7, 0xc0, 0x86, 0x4e, 0xf7, 0xb9, 0x21, 0xf2, 0xfe, 0xea, 0x1d, 0x7f, 0x11,
	0x49, 0x30, 0xe4, 0xd5, 0x64, 0x83, 0xf7, 0x27, 0x3c, 0xca, 0x62, 0x6b, 0xd2, 0x47, 0x02, 0x9c,
	0xeb, 0xa8, 0xd7, 0x8a, 0xb5, 0x67, 0x32, 0xcd, 0xa6, 0x80, 0x69, 0xa1, 0x60, 0x55, 0x25, 0x76,
	0xa0, 0x18, 0x78, 0x4b, 0xcb, 0x6c, 0xe5, 0xd9, 0xe8, 0x25, 0xfd, 0x57, 0x80, 0xe9, 0x78, 0x9a,
	0xa8, 0xe2, 0x86, 0x41, 0x63, 0x98, 0xbc, 0x92, 0xe4, 0x77, 0x13, 0x9a, 0x82, 0x69, 0x47, 0x0f,
	0xbe, 0x1d, 0x34, 0xf1, 0xf2, 0x00, 0xa7, 0x5e, 0xf6, 0xca, 0x62, 0x5f, 0x83, 0xb9, 0x8a, 0x61,
	0x1c, 0x2c, 0x97, 0xba, 0x05, 0x79, 0x1b, 0x0f, 0xcb, 0x9c, 0x1d, 0xdd, 0x86, 0x9c, 0xc6, 0x6d,
	0xc3, 0x74, 0x19, 0x2c, 0x5f, 0x4a, 0x2d, 0x2a, 0x30, 0xaa, 0x1c, 0x8a, 0x90, 0x7e, 0x94, 0x85,
	0x33, 0x1d, 0xe9, 0xd1, 0x3a, 0x0c, 0x35, 0xef, 0xd5, 0x71, 0xf3, 0xf7, 0x60, 0x28, 0x62, 0x4d,
	0x43, 0x9b, 0x30, 0x12, 0xbb, 0x7c, 0xbc, 0x9c, 0x1c, 0x59, 0x68, 0x3e, 0x72, 0x4d, 0xd7, 0xb4,
	0x16, 0xcf, 0x64, 0x8f, 0xe7, 0x99, 0x9e, 0x67, 0xe7, 0x99, 0xde, 0x93, 0x7b, 0xe6, 0x2f, 0x02,
	0x2c, 0x6c, 0x10, 0x7a, 0x58, 0x50, 0x06, 0xd7, 0xfb, 0x4e, 0xa8, 0x86, 0x70, 0x2c, 0x35, 0x22,
	0x2d, 0x58, 0xa0, 0xd0, 0xbd, 0x88, 0x42, 0x99, 0x63, 0x2a, 0x14, 0x11, 0xdb, 0x54, 0xed, 0x01,
	0xcc, 0xbd, 0xa1, 0xbb, 0xf4, 0xb5, 0xa6, 0x0b, 0xa3, 0xbc, 0x3a, 0x71, 0x03, 0xa5, 0x26, 0xa1,
	0xd7, 0xd0, 0xeb, 0xba, 0x7f, 0xd7, 0xf2, 0x4c, 0xd6, 0x42, 0x56, 0xfc, 0xa2, 0x5f, 0xf6, 0x97,
	0xbd, 0xb6, 0xc0, 0xc6, 0x35, 0xbf, 0x2d, 0xc8, 0xcb, 0xec, 0xb7, 0xa4, 0xb5, 0x64, 0xe0, 0xb8,
	0x64, 0x74, 0x13, 0x72, 0x36, 0xff, 0xcd, 0x2b, 0xd9, 0xf9, 0xd4, 0x4a, 0xc9, 0x21, 0xab, 0xf4,
	0xb3, 0x0c, 0xcc, 0xb4, 0x78, 0xa7, 0xad, 0x5b, 0xda, 0xc4, 0xbb, 0xf0, 0x0c, 0xe2, 0xfd, 0xce,
	0x09, 0xd3, 0xc9, 0x21, 0xde, 0xce, 0x3e, 0x4b, 0x6f, 0xff, 0x3a, 0x13, 0xef, 0x97, 0x79, 0x23,
	0x7e, 0x57, 0x77, 0xf5, 0x2d, 0x9d, 0x55, 0x8b, 0x02, 0xe4, 0x82, 0x09, 0x8e, 0x27, 0xf8, 0xf0,
	0xdb, 0x2b, 0xed, 0x7c, 0xf8, 0xf4, 0x06, 0x44, 0x95, 0xd4, 0x89, 0x49, 0x83, 0xd2, 0xce, 0x37,
	0xd6, 0x83, 0x75, 0x6f, 0x3a, 0x0d, 0x88, 0x55, 0xab, 0x61, 0x52, 0x9e, 0xed, 0x87, 0xf8, 0xe2,
	0x0d, 0x6f, 0xcd, 0x9b, 0x4e, 0xab, 0xac, 0xed, 0x0f, 0xb2, 0x81, 0xcb, 0x6b, 0xd8, 0xb0, 0xb7,
	0x1c, 0xe6, 0x08, 0xd7, 0x2b, 0xaa, 0xb1, 0x76, 0xd0, 0x2f, 0x62, 0xb1, 0x2e, 0x6f, 0x1c, 0xfa,
	0xf8, 0xb4, 0xd9, 0xe7, 0xf7, 0x51, 0xfe, 0x97, 0x57, 0x26, 0xe3, 0x83, 0xad, 0x98, 0xf3, 0xcb,
	0x64, 0x6c, 0x88, 0xf5, 0x4e, 0xf0, 0x9f, 0xc6, 0xd8, 0xe0, 0xe8, 0x8a, 0x03, 0xfe, 0x09, 0xfe,
	0x9a, 0x37, 0x20, 0xba, 0xd2, 0x2f, 0x05, 0x98, 0x6d, 0x93, 0x03, 0x92, 0x46, 0x3c, 0x41, 0x71,
	0xba, 0x0d, 0xb0, 0x1b, 0x0a, 0x4a, 0x93, 0x8f, 0x13, 0xa7, 0xcb, 0x11, 0x01, 0xd2, 0x87, 0x02,
	0x14, 0xdb, 0x67, 0xae, 0x24, 0x1f, 0xbf, 0x26, 0xf7, 0x62, 0x08, 0x84, 0x63, 0x20, 0x88, 0x84,
	0x5e, 0x14, 0xcb, 0xbf, 0x04, 0x98, 0xf2, 0x72, 0x4d, 0xbb, 0xae, 0xf6, 0x04, 0x59, 0x06, 0x15,
	0xe1, 0xf9, 0x3d, 0x9d, 0x6e, 0x2b, 0x8e, 0x7f, 0x0d, 0x14, 0x96, 0x18, 0xf6, 0x79, 0xbc, 0x9d,
	0xf2, 0xb6, 0xe2, 0x95, 0xf4, 0x0a, 0xa0, 0x70, 0xf6, 0xf3, 0x5b, 0x77, 0xdd, 0xf4, 0xe3, 0x6e,
	0xa0, 0xd2, 0x7f, 0x50, 0xe9, 0x71, 0x32, 0xa2, 0xe6, 0xf5, 0xe9, 0xfe, 0x84, 0x77, 0x83, 0x13,
	0xa0, 0x97, 0x21, 0xef, 0xcd, 0x3a, 0x4d, 0x8e, 0xde, 0x38, 0xc7, 0x90, 0xb7, 0x1b, 0x50, 0x4b,
	0xbf, 0x15, 0x60, 0xa6, 0x55, 0xd9, 0x48, 0x92, 0x3d, 0x91, 0xc2, 0xed, 0x15, 0xc8, 0x1e, 0x59,
	0x81, 0x9e, 0x6e, 0x0a, 0x7c, 0xc2, 0x15, 0xb8, 0x15, 0x74, 0x0c, 0x1d, 0xea, 0xc2, 0x97, 0x94,
	0x55, 0xc7, 0x02, 0xbb, 0xf8, 0x8a, 0xb7, 0x58, 0x23, 0xdb, 0xb4, 0x46, 0xf9, 0x0f, 0x02, 0xf4,
	0xae, 0xba, 0xeb, 0x5b, 0x18, 0xdd, 0x86, 0x3c, 0x7b, 0xcc, 0x72, 0xb7, 0x79, 0x2b, 0x3e, 0xdb,
	0xe1, 0x55, 0xcd, 0xdf, 0xbe, 0xed, 0x3f, 0x87, 0x16, 0xc6, 0x13, 0x37, 0xf3, 0x66, 0xdd, 0xa6,
	0xfb, 0x88, 0x42, 0xde, 0x7f, 0xba, 0x08, 0x1e, 0x46, 0x2f, 0xb6, 0x8a, 0x3b, 0xec, 0x05, 0xa6,
	0x70, 0xe9, 0x08, 0x1c, 0xfe, 0x5b, 0x48, 0x79, 0x03, 0x7a, 0xdf, 0x64, 0xda, 0xbc, 0x0e, 0x23,
	0x5c, 0x9b, 0x66, 0x03, 0x9e, 0x78, 0x36, 0xe0, 0x3b, 0x87, 0xa8, 0x52, 0xfe, 0xe9, 0x38, 0x64,
	0x3d, 0x99, 0x77, 0xa1, 0x7f, 0x95, 0xf0, 0x74, 0xd9, 0x9e, 0xb4, 0x30, 0xdd, 0xcd, 0x6d, 0x1e,
	0xa7, 0x74, 0xea, 0x3b, 0x7f, 0xfa, 0xc7, 0xf7, 0x33, 0x83, 0x68, 0xa0, 0x64, 0x6f, 0xe1, 0x92,
	0x97, 0x8e, 0xd1, 0x53, 0x01, 0x72, 0xc1, 0x7c, 0x85, 0x2e, 0x74, 0xad, 0x55, 0xf1, 0x29, 0xac,
	0x90, 0x66, 0xc2, 0x94, 0x96, 0xd8, 0x89, 0xc5, 0xc2, 0x29, 0x76, 0x62, 0x74, 0xdc, 0xbc, 0x26,
	0x2c, 0xdc, 0x1f, 0x97, 0xda, 0xae, 0x7b, 0x89, 0x6c, 0x85, 0x04, 0x43, 0x61, 0x47, 0x7d, 0x3b,
	0xac, 0x4b, 0x67, 0xd8, 0x99, 0xcf, 0x2f, 0x24, 0x65, 0xa3, 0x9f, 0x08, 0x20, 0xad, 0x92, 0x68,
	0xcf, 0xd4, 0x76, 0x44, 0xe9, 0x74, 0xe2, 0xc5, 0xee, 0x6f, 0x22, 0x49, 0x49, 0xd2, 0x05, 0x86,
	0x65, 0x0e, 0xcd, 0x30, 0x2c, 0xde, 0x45, 0x59, 0x0c, 0xa6, 0xf9, 0x52, 0xd0, 0x06, 0x95, 0x34,
	0x9f, 0x13, 0xfd, 0x51, 0x00, 0x69, 0xe3, 0x70, 0x74, 0xd7, 0x5a, 0x51, 0xa4, 0x6f, 0x70, 0x3b,
	0xda, 0xec, 0x9b, 0x0c, 0xa7, 0x5c, 0x48, 0x83, 0xd3, 0xf3, 0xdc, 0xbc, 0x94, 0x92, 0x12, 0x7d,
	0x57, 0x80, 0xb9, 0x15, 0x62, 0x10, 0x4a, 0x8e, 0x6b, 0xf5, 0x4e, 0x98, 0xb9, 0x6d, 0x17, 0x52,
	0xd9, 0xf6, 0x53, 0x01, 0x26, 0xbb, 0xb7, 0xcb, 0xe8, 0x4a, 0xab, 0x5d, 0x53, 0xb5, 0xd7, 0x85,
	0x0b, 0x69, 0x1b, 0x3c, 0xaf, 0xe3, 0x9d, 0x61, 0x98, 0xcf, 0xa2, 0x89, 0x2e, 0x98, 0xd1, 0x5f,
	0x05, 0x98, 0x88, 0x47, 0x69, 0xdc, 0x50, 0x47, 0xcb, 0xcf, 0x85, 0xf4, 0xad, 0xb9, 0xf4, 0x2d,
	0x06, 0xef, 0x3e, 0x9a, 0xed, 0x66, 0xd2, 0xc7, 0xfe, 0xb3, 0xec, 0x93, 0xfb, 0x65, 0x74, 0x31,
	0x0d, 0x5d, 0xe9, 0x71, 0x58, 0xf3, 0x9e, 0xa0, 0x1f, 0x66, 0x61, 0x62, 0xa3, 0x8b, 0x6e, 0x97,
	0x0f, 0x09, 0xee, 0x23, 0x45, 0xf5, 0xa7, 0x19, 0xa6, 0xcf, 0xc7, 0x99, 0xc2, 0x52, 0x57, 0xa0,
	0x2d, 0x65, 0xb0, 0xc8, 0x81, 0x7b, 0x81, 0x7e, 0x55, 0x3a, 0x36, 0xeb, 0x66, 0x61, 0xfd, 0x38,
	0xac, 0xc9, 0x8d, 0xa6, 0xf9, 0x98, 0x58, 0xe9, 0xcb, 0x10, 0x8b, 0x7e, 0x2f, 0xc0, 0x64, 0xe2,
	0x9e, 0x9e, 0x28, 0xee, 0x3a, 0x79, 0x85, 0x07, 0xd9, 0x42, 0xca, 0x20, 0x5b, 0x38, 0x7a, 0x90,
	0xfd, 0x42, 0x80, 0x17, 0xdb, 0xa6, 0xf9, 0x64, 0xc3, 0xdf, 0x29, 0xe9, 0x2c, 0xa5, 0x48, 0xf5,
	0x09, 0x69, 0xd2, 0xff, 0x33, 0xd5, 0x2e, 0xa1, 0x52, 0x1b, 0xc8, 0xfc, 0x5f, 0x32, 0x8b, 0x61,
	0x5f, 0x1d, 0x4d, 0x4f, 0xff, 0x11, 0xe0, 0xc5, 0x8d, 0x74, 0x88, 0xbf, 0x96, 0x2e, 0xfd, 0x77,
	0x9a, 0x12, 0x3a, 0xba, 0xc5, 0x66, 0xd8, 0xdf, 0x2d, 0x1c, 0x15, 0xbb, 0x17, 0x93, 0x4b, 0xd2,
	0x31, 0xb8, 0xd0, 0x0f, 0x04, 0x38, 0xdf, 0xa9, 0x34, 0xa4, 0xf7, 0x54, 0x27, 0x7d, 0xb8, 0x2f,
	0x16, 0x8e, 0xec, 0x8b, 0x0f, 0x60, 0xc8, 0xcb, 0xfc, 0xe1, 0xb3, 0x7d, 0xa9, 0x5d, 0x5d, 0xe8,
	0x32, 0x0a, 0x15, 0x66, 0x53, 0xdc, 0x13, 0x57, 0x3a, 0xcd, 0xf0, 0x8d, 0xa0, 0x3c, 0xc3, 0x17,
	0x40, 0x43, 0x1f, 0x0a, 0x30, 0xda, 0x52, 0x78, 0xdc, 0x64, 0x56, 0x4c, 0x31, 0xa0, 0xa4, 0x84,
	0x51, 0x60, 0x30, 0xc6, 0x10, 0x4a, 0x9a, 0x09, 0x7d, 0x2c, 0xc0, 0x0b, 0xdd, 0x26, 0x89, 0xf6,
	0xb8, 0x0e, 0x99, 0x3b, 0x8e, 0x56, 0x30, 0xa7, 0x19, 0xbc, 0x02, 0x12, 0x19, 0xbc, 0xf0, 0x11,
	0xb4, 0x99, 0x01, 0x2a, 0xcb, 0x5f, 0x7c, 0x36, 0xf9, 0xdc, 0xbf, 0x3f, 0x9b, 0x14, 0xbe, 0xf7,
	0xf9, 0xe4, 0x73, 0xbf, 0xfb, 0x7c, 0x52, 0xb8, 0x5f, 0x3a, 0xc2, 0xbf, 0x67, 0xa9, 0x69, 0x6f,
	0x6d, 0xf5, 0xb1, 0xd0, 0xb9, 0xfc, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x62, 0xe0, 0x74, 0xe3,
	0x75, 0x23, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GsPbaClient is the client API for GsPba service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GsPbaClient interface {
	PublishUplink(ctx context.Context, in *GatewayUplinkMessage, opts ...grpc.CallOption) (*types.Empty, error)
	// Update the gateway, changing the fields specified by the field mask to the provided values.
	// To mark a gateway as online, call this rpc setting online to true, include status_public in field_mask and
	// keep calling this rpc before the returned online_ttl passes to keep the gateway online.
	UpdateGateway(ctx context.Context, in *UpdatePacketBrokerGatewayRequest, opts ...grpc.CallOption) (*UpdatePacketBrokerGatewayResponse, error)
}

type gsPbaClient struct {
	cc *grpc.ClientConn
}

func NewGsPbaClient(cc *grpc.ClientConn) GsPbaClient {
	return &gsPbaClient{cc}
}

func (c *gsPbaClient) PublishUplink(ctx context.Context, in *GatewayUplinkMessage, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.GsPba/PublishUplink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gsPbaClient) UpdateGateway(ctx context.Context, in *UpdatePacketBrokerGatewayRequest, opts ...grpc.CallOption) (*UpdatePacketBrokerGatewayResponse, error) {
	out := new(UpdatePacketBrokerGatewayResponse)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.GsPba/UpdateGateway", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GsPbaServer is the server API for GsPba service.
type GsPbaServer interface {
	PublishUplink(context.Context, *GatewayUplinkMessage) (*types.Empty, error)
	// Update the gateway, changing the fields specified by the field mask to the provided values.
	// To mark a gateway as online, call this rpc setting online to true, include status_public in field_mask and
	// keep calling this rpc before the returned online_ttl passes to keep the gateway online.
	UpdateGateway(context.Context, *UpdatePacketBrokerGatewayRequest) (*UpdatePacketBrokerGatewayResponse, error)
}

// UnimplementedGsPbaServer can be embedded to have forward compatible implementations.
type UnimplementedGsPbaServer struct {
}

func (*UnimplementedGsPbaServer) PublishUplink(ctx context.Context, req *GatewayUplinkMessage) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishUplink not implemented")
}
func (*UnimplementedGsPbaServer) UpdateGateway(ctx context.Context, req *UpdatePacketBrokerGatewayRequest) (*UpdatePacketBrokerGatewayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGateway not implemented")
}

func RegisterGsPbaServer(s *grpc.Server, srv GsPbaServer) {
	s.RegisterService(&_GsPba_serviceDesc, srv)
}

func _GsPba_PublishUplink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GatewayUplinkMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GsPbaServer).PublishUplink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.GsPba/PublishUplink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GsPbaServer).PublishUplink(ctx, req.(*GatewayUplinkMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _GsPba_UpdateGateway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePacketBrokerGatewayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GsPbaServer).UpdateGateway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.GsPba/UpdateGateway",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GsPbaServer).UpdateGateway(ctx, req.(*UpdatePacketBrokerGatewayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GsPba_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.lorawan.v3.GsPba",
	HandlerType: (*GsPbaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PublishUplink",
			Handler:    _GsPba_PublishUplink_Handler,
		},
		{
			MethodName: "UpdateGateway",
			Handler:    _GsPba_UpdateGateway_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lorawan-stack/api/packetbrokeragent.proto",
}

// NsPbaClient is the client API for NsPba service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NsPbaClient interface {
	// PublishDownlink instructs the Packet Broker Agent to publish a downlink
	// message to Packet Broker Router.
	PublishDownlink(ctx context.Context, in *DownlinkMessage, opts ...grpc.CallOption) (*types.Empty, error)
}

type nsPbaClient struct {
	cc *grpc.ClientConn
}

func NewNsPbaClient(cc *grpc.ClientConn) NsPbaClient {
	return &nsPbaClient{cc}
}

func (c *nsPbaClient) PublishDownlink(ctx context.Context, in *DownlinkMessage, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.NsPba/PublishDownlink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NsPbaServer is the server API for NsPba service.
type NsPbaServer interface {
	// PublishDownlink instructs the Packet Broker Agent to publish a downlink
	// message to Packet Broker Router.
	PublishDownlink(context.Context, *DownlinkMessage) (*types.Empty, error)
}

// UnimplementedNsPbaServer can be embedded to have forward compatible implementations.
type UnimplementedNsPbaServer struct {
}

func (*UnimplementedNsPbaServer) PublishDownlink(ctx context.Context, req *DownlinkMessage) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishDownlink not implemented")
}

func RegisterNsPbaServer(s *grpc.Server, srv NsPbaServer) {
	s.RegisterService(&_NsPba_serviceDesc, srv)
}

func _NsPba_PublishDownlink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownlinkMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NsPbaServer).PublishDownlink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.NsPba/PublishDownlink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NsPbaServer).PublishDownlink(ctx, req.(*DownlinkMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _NsPba_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.lorawan.v3.NsPba",
	HandlerType: (*NsPbaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PublishDownlink",
			Handler:    _NsPba_PublishDownlink_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lorawan-stack/api/packetbrokeragent.proto",
}

// PbaClient is the client API for Pba service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PbaClient interface {
	// Get information about the Packet Broker registration.
	// Viewing Packet Packet information requires administrative access.
	GetInfo(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*PacketBrokerInfo, error)
	// Register with Packet Broker. If no registration exists, it will be created. Any existing registration will be updated.
	// Registration settings not in the request message are taken from Packet Broker Agent configuration and caller context.
	// Packet Broker registration requires administrative access.
	// Packet Broker registration is only supported for tenants and requires Packet Broker Agent to be configured with
	// NetID level authentication. Use rpc GetInfo and check register_enabled to check whether this rpc is enabled.
	Register(ctx context.Context, in *PacketBrokerRegisterRequest, opts ...grpc.CallOption) (*PacketBrokerNetwork, error)
	// Deregister from Packet Broker.
	// Packet Broker deregistration requires administrative access.
	// Packet Broker deregistration is only supported for tenants and requires Packet Broker Agent to be configured with
	// NetID level authentication. Use rpc GetInfo and check register_enabled to check whether this rpc is enabled.
	Deregister(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*types.Empty, error)
	// Get the default routing policy.
	// Getting routing policies requires administrative access.
	GetHomeNetworkDefaultRoutingPolicy(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*PacketBrokerDefaultRoutingPolicy, error)
	// Set the default routing policy.
	// Setting routing policies requires administrative access.
	SetHomeNetworkDefaultRoutingPolicy(ctx context.Context, in *SetPacketBrokerDefaultRoutingPolicyRequest, opts ...grpc.CallOption) (*types.Empty, error)
	// Deletes the default routing policy.
	// Deleting routing policies requires administrative access.
	DeleteHomeNetworkDefaultRoutingPolicy(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*types.Empty, error)
	// List the routing policies that Packet Broker Agent as Forwarder configured with Home Networks.
	// Listing routing policies requires administrative access.
	ListHomeNetworkRoutingPolicies(ctx context.Context, in *ListHomeNetworkRoutingPoliciesRequest, opts ...grpc.CallOption) (*PacketBrokerRoutingPolicies, error)
	// Get the routing policy for the given Home Network.
	// Getting routing policies requires administrative access.
	GetHomeNetworkRoutingPolicy(ctx context.Context, in *PacketBrokerNetworkIdentifier, opts ...grpc.CallOption) (*PacketBrokerRoutingPolicy, error)
	// Set the routing policy for the given Home Network.
	// Setting routing policies requires administrative access.
	SetHomeNetworkRoutingPolicy(ctx context.Context, in *SetPacketBrokerRoutingPolicyRequest, opts ...grpc.CallOption) (*types.Empty, error)
	// Delete the routing policy for the given Home Network.
	// Deleting routing policies requires administrative access.
	DeleteHomeNetworkRoutingPolicy(ctx context.Context, in *PacketBrokerNetworkIdentifier, opts ...grpc.CallOption) (*types.Empty, error)
	// Get the default gateway visibility.
	// Getting gateway visibilities requires administrative access.
	GetHomeNetworkDefaultGatewayVisibility(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*PacketBrokerDefaultGatewayVisibility, error)
	// Set the default gateway visibility.
	// Setting gateway visibilities requires administrative access.
	SetHomeNetworkDefaultGatewayVisibility(ctx context.Context, in *SetPacketBrokerDefaultGatewayVisibilityRequest, opts ...grpc.CallOption) (*types.Empty, error)
	// Deletes the default gateway visibility.
	// Deleting gateway visibilities requires administrative access.
	DeleteHomeNetworkDefaultGatewayVisibility(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*types.Empty, error)
	// List all listed networks.
	// Listing networks requires administrative access.
	ListNetworks(ctx context.Context, in *ListPacketBrokerNetworksRequest, opts ...grpc.CallOption) (*PacketBrokerNetworks, error)
	// List the listed home networks for which routing policies can be configured.
	// Listing home networks requires administrative access.
	ListHomeNetworks(ctx context.Context, in *ListPacketBrokerHomeNetworksRequest, opts ...grpc.CallOption) (*PacketBrokerNetworks, error)
	// List the routing policies that Forwarders configured with Packet Broker Agent as Home Network.
	// Listing routing policies requires administrative access.
	ListForwarderRoutingPolicies(ctx context.Context, in *ListForwarderRoutingPoliciesRequest, opts ...grpc.CallOption) (*PacketBrokerRoutingPolicies, error)
}

type pbaClient struct {
	cc *grpc.ClientConn
}

func NewPbaClient(cc *grpc.ClientConn) PbaClient {
	return &pbaClient{cc}
}

func (c *pbaClient) GetInfo(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*PacketBrokerInfo, error) {
	out := new(PacketBrokerInfo)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.Pba/GetInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pbaClient) Register(ctx context.Context, in *PacketBrokerRegisterRequest, opts ...grpc.CallOption) (*PacketBrokerNetwork, error) {
	out := new(PacketBrokerNetwork)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.Pba/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pbaClient) Deregister(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.Pba/Deregister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pbaClient) GetHomeNetworkDefaultRoutingPolicy(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*PacketBrokerDefaultRoutingPolicy, error) {
	out := new(PacketBrokerDefaultRoutingPolicy)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.Pba/GetHomeNetworkDefaultRoutingPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pbaClient) SetHomeNetworkDefaultRoutingPolicy(ctx context.Context, in *SetPacketBrokerDefaultRoutingPolicyRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.Pba/SetHomeNetworkDefaultRoutingPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pbaClient) DeleteHomeNetworkDefaultRoutingPolicy(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.Pba/DeleteHomeNetworkDefaultRoutingPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pbaClient) ListHomeNetworkRoutingPolicies(ctx context.Context, in *ListHomeNetworkRoutingPoliciesRequest, opts ...grpc.CallOption) (*PacketBrokerRoutingPolicies, error) {
	out := new(PacketBrokerRoutingPolicies)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.Pba/ListHomeNetworkRoutingPolicies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pbaClient) GetHomeNetworkRoutingPolicy(ctx context.Context, in *PacketBrokerNetworkIdentifier, opts ...grpc.CallOption) (*PacketBrokerRoutingPolicy, error) {
	out := new(PacketBrokerRoutingPolicy)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.Pba/GetHomeNetworkRoutingPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pbaClient) SetHomeNetworkRoutingPolicy(ctx context.Context, in *SetPacketBrokerRoutingPolicyRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.Pba/SetHomeNetworkRoutingPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pbaClient) DeleteHomeNetworkRoutingPolicy(ctx context.Context, in *PacketBrokerNetworkIdentifier, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.Pba/DeleteHomeNetworkRoutingPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pbaClient) GetHomeNetworkDefaultGatewayVisibility(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*PacketBrokerDefaultGatewayVisibility, error) {
	out := new(PacketBrokerDefaultGatewayVisibility)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.Pba/GetHomeNetworkDefaultGatewayVisibility", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pbaClient) SetHomeNetworkDefaultGatewayVisibility(ctx context.Context, in *SetPacketBrokerDefaultGatewayVisibilityRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.Pba/SetHomeNetworkDefaultGatewayVisibility", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pbaClient) DeleteHomeNetworkDefaultGatewayVisibility(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.Pba/DeleteHomeNetworkDefaultGatewayVisibility", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pbaClient) ListNetworks(ctx context.Context, in *ListPacketBrokerNetworksRequest, opts ...grpc.CallOption) (*PacketBrokerNetworks, error) {
	out := new(PacketBrokerNetworks)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.Pba/ListNetworks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pbaClient) ListHomeNetworks(ctx context.Context, in *ListPacketBrokerHomeNetworksRequest, opts ...grpc.CallOption) (*PacketBrokerNetworks, error) {
	out := new(PacketBrokerNetworks)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.Pba/ListHomeNetworks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pbaClient) ListForwarderRoutingPolicies(ctx context.Context, in *ListForwarderRoutingPoliciesRequest, opts ...grpc.CallOption) (*PacketBrokerRoutingPolicies, error) {
	out := new(PacketBrokerRoutingPolicies)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.Pba/ListForwarderRoutingPolicies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PbaServer is the server API for Pba service.
type PbaServer interface {
	// Get information about the Packet Broker registration.
	// Viewing Packet Packet information requires administrative access.
	GetInfo(context.Context, *types.Empty) (*PacketBrokerInfo, error)
	// Register with Packet Broker. If no registration exists, it will be created. Any existing registration will be updated.
	// Registration settings not in the request message are taken from Packet Broker Agent configuration and caller context.
	// Packet Broker registration requires administrative access.
	// Packet Broker registration is only supported for tenants and requires Packet Broker Agent to be configured with
	// NetID level authentication. Use rpc GetInfo and check register_enabled to check whether this rpc is enabled.
	Register(context.Context, *PacketBrokerRegisterRequest) (*PacketBrokerNetwork, error)
	// Deregister from Packet Broker.
	// Packet Broker deregistration requires administrative access.
	// Packet Broker deregistration is only supported for tenants and requires Packet Broker Agent to be configured with
	// NetID level authentication. Use rpc GetInfo and check register_enabled to check whether this rpc is enabled.
	Deregister(context.Context, *types.Empty) (*types.Empty, error)
	// Get the default routing policy.
	// Getting routing policies requires administrative access.
	GetHomeNetworkDefaultRoutingPolicy(context.Context, *types.Empty) (*PacketBrokerDefaultRoutingPolicy, error)
	// Set the default routing policy.
	// Setting routing policies requires administrative access.
	SetHomeNetworkDefaultRoutingPolicy(context.Context, *SetPacketBrokerDefaultRoutingPolicyRequest) (*types.Empty, error)
	// Deletes the default routing policy.
	// Deleting routing policies requires administrative access.
	DeleteHomeNetworkDefaultRoutingPolicy(context.Context, *types.Empty) (*types.Empty, error)
	// List the routing policies that Packet Broker Agent as Forwarder configured with Home Networks.
	// Listing routing policies requires administrative access.
	ListHomeNetworkRoutingPolicies(context.Context, *ListHomeNetworkRoutingPoliciesRequest) (*PacketBrokerRoutingPolicies, error)
	// Get the routing policy for the given Home Network.
	// Getting routing policies requires administrative access.
	GetHomeNetworkRoutingPolicy(context.Context, *PacketBrokerNetworkIdentifier) (*PacketBrokerRoutingPolicy, error)
	// Set the routing policy for the given Home Network.
	// Setting routing policies requires administrative access.
	SetHomeNetworkRoutingPolicy(context.Context, *SetPacketBrokerRoutingPolicyRequest) (*types.Empty, error)
	// Delete the routing policy for the given Home Network.
	// Deleting routing policies requires administrative access.
	DeleteHomeNetworkRoutingPolicy(context.Context, *PacketBrokerNetworkIdentifier) (*types.Empty, error)
	// Get the default gateway visibility.
	// Getting gateway visibilities requires administrative access.
	GetHomeNetworkDefaultGatewayVisibility(context.Context, *types.Empty) (*PacketBrokerDefaultGatewayVisibility, error)
	// Set the default gateway visibility.
	// Setting gateway visibilities requires administrative access.
	SetHomeNetworkDefaultGatewayVisibility(context.Context, *SetPacketBrokerDefaultGatewayVisibilityRequest) (*types.Empty, error)
	// Deletes the default gateway visibility.
	// Deleting gateway visibilities requires administrative access.
	DeleteHomeNetworkDefaultGatewayVisibility(context.Context, *types.Empty) (*types.Empty, error)
	// List all listed networks.
	// Listing networks requires administrative access.
	ListNetworks(context.Context, *ListPacketBrokerNetworksRequest) (*PacketBrokerNetworks, error)
	// List the listed home networks for which routing policies can be configured.
	// Listing home networks requires administrative access.
	ListHomeNetworks(context.Context, *ListPacketBrokerHomeNetworksRequest) (*PacketBrokerNetworks, error)
	// List the routing policies that Forwarders configured with Packet Broker Agent as Home Network.
	// Listing routing policies requires administrative access.
	ListForwarderRoutingPolicies(context.Context, *ListForwarderRoutingPoliciesRequest) (*PacketBrokerRoutingPolicies, error)
}

// UnimplementedPbaServer can be embedded to have forward compatible implementations.
type UnimplementedPbaServer struct {
}

func (*UnimplementedPbaServer) GetInfo(ctx context.Context, req *types.Empty) (*PacketBrokerInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfo not implemented")
}
func (*UnimplementedPbaServer) Register(ctx context.Context, req *PacketBrokerRegisterRequest) (*PacketBrokerNetwork, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (*UnimplementedPbaServer) Deregister(ctx context.Context, req *types.Empty) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deregister not implemented")
}
func (*UnimplementedPbaServer) GetHomeNetworkDefaultRoutingPolicy(ctx context.Context, req *types.Empty) (*PacketBrokerDefaultRoutingPolicy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHomeNetworkDefaultRoutingPolicy not implemented")
}
func (*UnimplementedPbaServer) SetHomeNetworkDefaultRoutingPolicy(ctx context.Context, req *SetPacketBrokerDefaultRoutingPolicyRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetHomeNetworkDefaultRoutingPolicy not implemented")
}
func (*UnimplementedPbaServer) DeleteHomeNetworkDefaultRoutingPolicy(ctx context.Context, req *types.Empty) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHomeNetworkDefaultRoutingPolicy not implemented")
}
func (*UnimplementedPbaServer) ListHomeNetworkRoutingPolicies(ctx context.Context, req *ListHomeNetworkRoutingPoliciesRequest) (*PacketBrokerRoutingPolicies, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHomeNetworkRoutingPolicies not implemented")
}
func (*UnimplementedPbaServer) GetHomeNetworkRoutingPolicy(ctx context.Context, req *PacketBrokerNetworkIdentifier) (*PacketBrokerRoutingPolicy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHomeNetworkRoutingPolicy not implemented")
}
func (*UnimplementedPbaServer) SetHomeNetworkRoutingPolicy(ctx context.Context, req *SetPacketBrokerRoutingPolicyRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetHomeNetworkRoutingPolicy not implemented")
}
func (*UnimplementedPbaServer) DeleteHomeNetworkRoutingPolicy(ctx context.Context, req *PacketBrokerNetworkIdentifier) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHomeNetworkRoutingPolicy not implemented")
}
func (*UnimplementedPbaServer) GetHomeNetworkDefaultGatewayVisibility(ctx context.Context, req *types.Empty) (*PacketBrokerDefaultGatewayVisibility, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHomeNetworkDefaultGatewayVisibility not implemented")
}
func (*UnimplementedPbaServer) SetHomeNetworkDefaultGatewayVisibility(ctx context.Context, req *SetPacketBrokerDefaultGatewayVisibilityRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetHomeNetworkDefaultGatewayVisibility not implemented")
}
func (*UnimplementedPbaServer) DeleteHomeNetworkDefaultGatewayVisibility(ctx context.Context, req *types.Empty) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHomeNetworkDefaultGatewayVisibility not implemented")
}
func (*UnimplementedPbaServer) ListNetworks(ctx context.Context, req *ListPacketBrokerNetworksRequest) (*PacketBrokerNetworks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNetworks not implemented")
}
func (*UnimplementedPbaServer) ListHomeNetworks(ctx context.Context, req *ListPacketBrokerHomeNetworksRequest) (*PacketBrokerNetworks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHomeNetworks not implemented")
}
func (*UnimplementedPbaServer) ListForwarderRoutingPolicies(ctx context.Context, req *ListForwarderRoutingPoliciesRequest) (*PacketBrokerRoutingPolicies, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListForwarderRoutingPolicies not implemented")
}

func RegisterPbaServer(s *grpc.Server, srv PbaServer) {
	s.RegisterService(&_Pba_serviceDesc, srv)
}

func _Pba_GetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PbaServer).GetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.Pba/GetInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PbaServer).GetInfo(ctx, req.(*types.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pba_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PacketBrokerRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PbaServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.Pba/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PbaServer).Register(ctx, req.(*PacketBrokerRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pba_Deregister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PbaServer).Deregister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.Pba/Deregister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PbaServer).Deregister(ctx, req.(*types.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pba_GetHomeNetworkDefaultRoutingPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PbaServer).GetHomeNetworkDefaultRoutingPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.Pba/GetHomeNetworkDefaultRoutingPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PbaServer).GetHomeNetworkDefaultRoutingPolicy(ctx, req.(*types.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pba_SetHomeNetworkDefaultRoutingPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPacketBrokerDefaultRoutingPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PbaServer).SetHomeNetworkDefaultRoutingPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.Pba/SetHomeNetworkDefaultRoutingPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PbaServer).SetHomeNetworkDefaultRoutingPolicy(ctx, req.(*SetPacketBrokerDefaultRoutingPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pba_DeleteHomeNetworkDefaultRoutingPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PbaServer).DeleteHomeNetworkDefaultRoutingPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.Pba/DeleteHomeNetworkDefaultRoutingPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PbaServer).DeleteHomeNetworkDefaultRoutingPolicy(ctx, req.(*types.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pba_ListHomeNetworkRoutingPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHomeNetworkRoutingPoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PbaServer).ListHomeNetworkRoutingPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.Pba/ListHomeNetworkRoutingPolicies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PbaServer).ListHomeNetworkRoutingPolicies(ctx, req.(*ListHomeNetworkRoutingPoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pba_GetHomeNetworkRoutingPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PacketBrokerNetworkIdentifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PbaServer).GetHomeNetworkRoutingPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.Pba/GetHomeNetworkRoutingPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PbaServer).GetHomeNetworkRoutingPolicy(ctx, req.(*PacketBrokerNetworkIdentifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pba_SetHomeNetworkRoutingPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPacketBrokerRoutingPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PbaServer).SetHomeNetworkRoutingPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.Pba/SetHomeNetworkRoutingPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PbaServer).SetHomeNetworkRoutingPolicy(ctx, req.(*SetPacketBrokerRoutingPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pba_DeleteHomeNetworkRoutingPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PacketBrokerNetworkIdentifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PbaServer).DeleteHomeNetworkRoutingPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.Pba/DeleteHomeNetworkRoutingPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PbaServer).DeleteHomeNetworkRoutingPolicy(ctx, req.(*PacketBrokerNetworkIdentifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pba_GetHomeNetworkDefaultGatewayVisibility_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PbaServer).GetHomeNetworkDefaultGatewayVisibility(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.Pba/GetHomeNetworkDefaultGatewayVisibility",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PbaServer).GetHomeNetworkDefaultGatewayVisibility(ctx, req.(*types.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pba_SetHomeNetworkDefaultGatewayVisibility_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPacketBrokerDefaultGatewayVisibilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PbaServer).SetHomeNetworkDefaultGatewayVisibility(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.Pba/SetHomeNetworkDefaultGatewayVisibility",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PbaServer).SetHomeNetworkDefaultGatewayVisibility(ctx, req.(*SetPacketBrokerDefaultGatewayVisibilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pba_DeleteHomeNetworkDefaultGatewayVisibility_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PbaServer).DeleteHomeNetworkDefaultGatewayVisibility(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.Pba/DeleteHomeNetworkDefaultGatewayVisibility",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PbaServer).DeleteHomeNetworkDefaultGatewayVisibility(ctx, req.(*types.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pba_ListNetworks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPacketBrokerNetworksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PbaServer).ListNetworks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.Pba/ListNetworks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PbaServer).ListNetworks(ctx, req.(*ListPacketBrokerNetworksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pba_ListHomeNetworks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPacketBrokerHomeNetworksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PbaServer).ListHomeNetworks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.Pba/ListHomeNetworks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PbaServer).ListHomeNetworks(ctx, req.(*ListPacketBrokerHomeNetworksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pba_ListForwarderRoutingPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListForwarderRoutingPoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PbaServer).ListForwarderRoutingPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.Pba/ListForwarderRoutingPolicies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PbaServer).ListForwarderRoutingPolicies(ctx, req.(*ListForwarderRoutingPoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Pba_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.lorawan.v3.Pba",
	HandlerType: (*PbaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetInfo",
			Handler:    _Pba_GetInfo_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _Pba_Register_Handler,
		},
		{
			MethodName: "Deregister",
			Handler:    _Pba_Deregister_Handler,
		},
		{
			MethodName: "GetHomeNetworkDefaultRoutingPolicy",
			Handler:    _Pba_GetHomeNetworkDefaultRoutingPolicy_Handler,
		},
		{
			MethodName: "SetHomeNetworkDefaultRoutingPolicy",
			Handler:    _Pba_SetHomeNetworkDefaultRoutingPolicy_Handler,
		},
		{
			MethodName: "DeleteHomeNetworkDefaultRoutingPolicy",
			Handler:    _Pba_DeleteHomeNetworkDefaultRoutingPolicy_Handler,
		},
		{
			MethodName: "ListHomeNetworkRoutingPolicies",
			Handler:    _Pba_ListHomeNetworkRoutingPolicies_Handler,
		},
		{
			MethodName: "GetHomeNetworkRoutingPolicy",
			Handler:    _Pba_GetHomeNetworkRoutingPolicy_Handler,
		},
		{
			MethodName: "SetHomeNetworkRoutingPolicy",
			Handler:    _Pba_SetHomeNetworkRoutingPolicy_Handler,
		},
		{
			MethodName: "DeleteHomeNetworkRoutingPolicy",
			Handler:    _Pba_DeleteHomeNetworkRoutingPolicy_Handler,
		},
		{
			MethodName: "GetHomeNetworkDefaultGatewayVisibility",
			Handler:    _Pba_GetHomeNetworkDefaultGatewayVisibility_Handler,
		},
		{
			MethodName: "SetHomeNetworkDefaultGatewayVisibility",
			Handler:    _Pba_SetHomeNetworkDefaultGatewayVisibility_Handler,
		},
		{
			MethodName: "DeleteHomeNetworkDefaultGatewayVisibility",
			Handler:    _Pba_DeleteHomeNetworkDefaultGatewayVisibility_Handler,
		},
		{
			MethodName: "ListNetworks",
			Handler:    _Pba_ListNetworks_Handler,
		},
		{
			MethodName: "ListHomeNetworks",
			Handler:    _Pba_ListHomeNetworks_Handler,
		},
		{
			MethodName: "ListForwarderRoutingPolicies",
			Handler:    _Pba_ListForwarderRoutingPolicies_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lorawan-stack/api/packetbrokeragent.proto",
}
